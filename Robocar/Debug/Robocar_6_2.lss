
Robocar_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000015ba  0000164e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800152  00800152  000016a0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003e0  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000058bc  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020c1  00000000  00000000  0000739c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a03  00000000  00000000  0000945d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000910  00000000  00000000  0000ae60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f4c  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f6c  00000000  00000000  0000c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  0000e628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
       e:	00 00       	nop
      10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
      12:	00 00       	nop
      14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c7       	rjmp	.+3660   	; 0xe7a <__vector_11>
      2e:	00 00       	nop
      30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
      42:	00 00       	nop
      44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	af c0       	rjmp	.+350    	; 0x1b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a9 c0       	rjmp	.+338    	; 0x1b0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c0       	rjmp	.+330    	; 0x1b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
      72:	00 00       	nop
      74:	9d c0       	rjmp	.+314    	; 0x1b0 <__bad_interrupt>
      76:	00 00       	nop
      78:	9b c0       	rjmp	.+310    	; 0x1b0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	99 c0       	rjmp	.+306    	; 0x1b0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	97 c0       	rjmp	.+302    	; 0x1b0 <__bad_interrupt>
      82:	00 00       	nop
      84:	be c4       	rjmp	.+2428   	; 0xa02 <__vector_33>
      86:	00 00       	nop
      88:	5c c5       	rjmp	.+2744   	; 0xb42 <__vector_34>
	...

0000008c <__trampolines_end>:
      8c:	08 01       	movw	r0, r16
      8e:	06 0c       	add	r0, r6
	...

00000091 <_ZL5table>:
      91:	18 23 35 34 47 25 66 45 59 26 57 34 88 58 77 56     .#54G%fEY&W4.XwV
      a1:	6b 27 38 34 99 27 66 45 aa 6a aa 37 99 99 88 67     k'84.'fE.j.7...g
      b1:	7b 28 39 34 7a 25 66 45 bb 2b 79 34 88 58 77 56     {(94z%fE.+y4.XwV
      c1:	cc 7c cc 38 cc 7c 99 45 bb bb bb 7b aa aa 99 78     .|.8.|.E...{...x
      d1:	8f 29 3a 34 4b 25 66 45 cc 29 57 34 88 58 77 56     .):4K%fE.)W4.XwV
      e1:	dd 2d 8d 34 bb 29 66 45 aa 6a aa 37 99 99 88 67     .-.4.)fE.j.7...g
      f1:	ee 8e ee 39 ee 8e aa 45 ee 8e ee 39 bb 8b 77 56     ...9...E...9..wV
     101:	dd dd dd 8d dd dd dd 49 cc cc cc cc bb bb aa 89     .......I........
	...

00000112 <__ctors_start>:
     112:	09 01       	movw	r0, r18
     114:	4f 02       	muls	r20, r31
     116:	1c 03       	fmul	r17, r20
     118:	2a 05       	cpc	r18, r10
     11a:	ed 05       	cpc	r30, r13
     11c:	05 08       	sbc	r0, r5
     11e:	3c 09       	sbc	r19, r12

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d0 e4       	ldi	r29, 0x40	; 64
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <_Z14__hardwareInitv>:
#define LEDON() PORTA |= _BV(2)
#define LEDOFF() PORTA &= ~_BV(2)


void __attribute__((section(".init3"), naked)) __hardwareInit(void) {
    DDRA |= _BV(1);		// POWER
     12c:	09 9a       	sbi	0x01, 1	; 1
    DDRA |= _BV(2);		// LED
     12e:	0a 9a       	sbi	0x01, 2	; 1
    DDRA |= _BV(7);		// LCD strobe
     130:	0f 9a       	sbi	0x01, 7	; 1
    DDRB |= _BV(2);		// HC138 GATE
     132:	22 9a       	sbi	0x04, 2	; 4

    //SPI init (USART1 in MSPIM)
    DDRD |= _BV(3);			// TXD1 output
     134:	53 9a       	sbi	0x0a, 3	; 10
    DDRD |= _BV(4);			// XCLK1 output
     136:	54 9a       	sbi	0x0a, 4	; 10
    UBRR1 = 0;
     138:	ec ec       	ldi	r30, 0xCC	; 204
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	11 82       	std	Z+1, r1	; 0x01
     13e:	10 82       	st	Z, r1
    UCSR1C = 0b11000011;	// MSPIM, MSB first, idle high (write)
     140:	83 ec       	ldi	r24, 0xC3	; 195
     142:	80 93 ca 00 	sts	0x00CA, r24
    UCSR1B = 0x18;			// enable transmitter and receiver
     146:	88 e1       	ldi	r24, 0x18	; 24
     148:	80 93 c9 00 	sts	0x00C9, r24
    UBRR1 = 0;				// set clock to fosc/2
     14c:	11 82       	std	Z+1, r1	; 0x01
     14e:	10 82       	st	Z, r1

    LL::write574(LL::U4, 0);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e4       	ldi	r24, 0x40	; 64
     154:	0b d3       	rcall	.+1558   	; 0x76c <_ZN2LL8write574ENS_5HC574Ec>
    LL::write574(LL::U5, 0);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	80 e6       	ldi	r24, 0x60	; 96
     15a:	08 d3       	rcall	.+1552   	; 0x76c <_ZN2LL8write574ENS_5HC574Ec>

0000015c <__do_copy_data>:
     15c:	11 e0       	ldi	r17, 0x01	; 1
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	ea eb       	ldi	r30, 0xBA	; 186
     164:	f5 e1       	ldi	r31, 0x15	; 21
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	0b bf       	out	0x3b, r16	; 59
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x14>
     16c:	07 90       	elpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a2 35       	cpi	r26, 0x52	; 82
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0x10>

00000176 <__do_clear_bss>:
     176:	22 e0       	ldi	r18, 0x02	; 2
     178:	a2 e5       	ldi	r26, 0x52	; 82
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a4 33       	cpi	r26, 0x34	; 52
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>

00000186 <__do_global_ctors>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	c0 e2       	ldi	r28, 0x20	; 32
     18a:	d1 e0       	ldi	r29, 0x01	; 1
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	06 c0       	rjmp	.+12     	; 0x19c <__do_global_ctors+0x16>
     190:	22 97       	sbiw	r28, 0x02	; 2
     192:	01 09       	sbc	r16, r1
     194:	fe 01       	movw	r30, r28
     196:	0b bf       	out	0x3b, r16	; 59
     198:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__tablejump_elpm__>
     19c:	c2 31       	cpi	r28, 0x12	; 18
     19e:	d1 07       	cpc	r29, r17
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	08 07       	cpc	r16, r24
     1a4:	a9 f7       	brne	.-22     	; 0x190 <__do_global_ctors+0xa>

000001a6 <_Z7__powerv>:
}

void __attribute__((section(".init8"), naked)) __power(void) {
    POWERUP();
     1a6:	11 9a       	sbi	0x02, 1	; 2

000001a8 <_Z5__seiv>:
     1a8:	78 94       	sei
     1aa:	1d d2       	rcall	.+1082   	; 0x5e6 <main>
     1ac:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <_ZN7Buttons7timeoutEv>:
	bool troggleState;
	unsigned char speed;
	int kP, kI, kD;
	int PIDselecter;
	int vrValue;
    void timeout(void) {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	ec 01       	movw	r28, r24
		//str2[1] = 'y';
		//str2[2] = '\0';
		//str2[3] = '\0';
		
		
        count = PERIOD;		//restore count
     1b8:	88 e2       	ldi	r24, 0x28	; 40
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	9d 83       	std	Y+5, r25	; 0x05
     1be:	8c 83       	std	Y+4, r24	; 0x04
        char b = LL::read541(LL::BUTTONS, 1);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	8c e8       	ldi	r24, 0x8C	; 140
     1c4:	b9 d2       	rcall	.+1394   	; 0x738 <_ZN2LL7read541ENS_5HC541Eh>
        char c = b ^ state;
     1c6:	98 a5       	ldd	r25, Y+40	; 0x28
     1c8:	98 27       	eor	r25, r24
        if (c) {
     1ca:	d1 f0       	breq	.+52     	; 0x200 <_ZN7Buttons7timeoutEv+0x4e>
            state = b;
     1cc:	88 a7       	std	Y+40, r24	; 0x28
            if (S1 & c) S1Changed(S1 & b);
     1ce:	90 ff       	sbrs	r25, 0
     1d0:	17 c0       	rjmp	.+46     	; 0x200 <_ZN7Buttons7timeoutEv+0x4e>
        }
    }


    void S1Changed(char c) {
        if (c) {
     1d2:	80 ff       	sbrs	r24, 0
     1d4:	15 c0       	rjmp	.+42     	; 0x200 <_ZN7Buttons7timeoutEv+0x4e>
			if(troggleState == false){
     1d6:	89 a5       	ldd	r24, Y+41	; 0x29
     1d8:	81 11       	cpse	r24, r1
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <_ZN7Buttons7timeoutEv+0x42>
				Wheel::setP(kP);
     1dc:	8b a5       	ldd	r24, Y+43	; 0x2b
     1de:	9c a5       	ldd	r25, Y+44	; 0x2c
     1e0:	05 d7       	rcall	.+3594   	; 0xfec <_ZN5Wheel4setPEi>
				Wheel::setI(kI);
     1e2:	8d a5       	ldd	r24, Y+45	; 0x2d
     1e4:	9e a5       	ldd	r25, Y+46	; 0x2e
     1e6:	07 d7       	rcall	.+3598   	; 0xff6 <_ZN5Wheel4setIEi>
				Wheel::setD(kD);
     1e8:	8f a5       	ldd	r24, Y+47	; 0x2f
     1ea:	98 a9       	ldd	r25, Y+48	; 0x30
     1ec:	09 d7       	rcall	.+3602   	; 0x1000 <_ZN5Wheel4setDEi>
				Wheel::move(Wheel::BACKWARD);
     1ee:	84 ea       	ldi	r24, 0xA4	; 164
     1f0:	81 d6       	rcall	.+3330   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_ZN7Buttons7timeoutEv+0x46>
			} else {
				Wheel::move(Wheel::STOP);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	7e d6       	rcall	.+3324   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
			}
			troggleState = !troggleState;
     1f8:	99 a5       	ldd	r25, Y+41	; 0x29
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	89 27       	eor	r24, r25
     1fe:	89 a7       	std	Y+41, r24	; 0x29
            if (S1 & c) S1Changed(S1 & b);
            if (S2 & c) S2Changed(S2 & b);
            if (S3 & c) S3Changed(S3 & b);
            if (S4 & c) S4Changed(S4 & b);
        }
    }
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <_ZN6Button6getBF1Ev>:
} buttons;

namespace Button{
	char * getBF1(){
		return buttons.bf1;
	}
     206:	88 e5       	ldi	r24, 0x58	; 88
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	08 95       	ret

0000020c <_ZN6Button6getBF2Ev>:
	char * getBF2(){
		return buttons.bf2;
	}
     20c:	89 e6       	ldi	r24, 0x69	; 105
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	08 95       	ret

00000212 <_GLOBAL__sub_I__ZN6Button6getBF1Ev>:
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
#ifndef __TIMER_H__
#define __TIMER_H__

#include "List.h"

class Timer : Element {
     21a:	84 e5       	ldi	r24, 0x54	; 84
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	4e d7       	rcall	.+3740   	; 0x10bc <_ZN7ElementC1Ev>

static class Buttons : Timer {
public:
	char bf1[17];
	char bf2[17];
    Buttons(void) {
     220:	8c e0       	ldi	r24, 0x0C	; 12
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	90 93 53 01 	sts	0x0153, r25
     228:	80 93 52 01 	sts	0x0152, r24
		kP = 11;
     22c:	8b e0       	ldi	r24, 0x0B	; 11
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	90 93 7e 01 	sts	0x017E, r25
     234:	80 93 7d 01 	sts	0x017D, r24
		kI = 56;
     238:	0f e7       	ldi	r16, 0x7F	; 127
     23a:	11 e0       	ldi	r17, 0x01	; 1
     23c:	88 e3       	ldi	r24, 0x38	; 56
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	f8 01       	movw	r30, r16
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
		kD = 60;
     246:	c1 e8       	ldi	r28, 0x81	; 129
     248:	d1 e0       	ldi	r29, 0x01	; 1
     24a:	8c e3       	ldi	r24, 0x3C	; 60
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	99 83       	std	Y+1, r25	; 0x01
     250:	88 83       	st	Y, r24
		// 13, 63, 56,speed 100
		// 19, 63, 63 ,speed = 160
		// 24
		Wheel::setP(kP);
     252:	8b e0       	ldi	r24, 0x0B	; 11
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	ca d6       	rcall	.+3476   	; 0xfec <_ZN5Wheel4setPEi>
		Wheel::setI(kI);
     258:	f8 01       	movw	r30, r16
     25a:	80 81       	ld	r24, Z
     25c:	91 81       	ldd	r25, Z+1	; 0x01
     25e:	cb d6       	rcall	.+3478   	; 0xff6 <_ZN5Wheel4setIEi>
		Wheel::setD(kD);
     260:	88 81       	ld	r24, Y
     262:	99 81       	ldd	r25, Y+1	; 0x01
     264:	cd d6       	rcall	.+3482   	; 0x1000 <_ZN5Wheel4setDEi>
		Wheel::setSpeed(160);
     266:	80 ea       	ldi	r24, 0xA0	; 160
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	3f d6       	rcall	.+3198   	; 0xeea <_ZN5Wheel8setSpeedEi>
		PIDselecter = 0;
     26c:	10 92 84 01 	sts	0x0184, r1
     270:	10 92 83 01 	sts	0x0183, r1
		troggleState = false;
     274:	10 92 7b 01 	sts	0x017B, r1
     278:	e9 e6       	ldi	r30, 0x69	; 105
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	a8 e5       	ldi	r26, 0x58	; 88
     27e:	b1 e0       	ldi	r27, 0x01	; 1
     280:	89 e7       	ldi	r24, 0x79	; 121
     282:	91 e0       	ldi	r25, 0x01	; 1
		
		for (int i = 0; i < 16; i++) bf1[i] = bf2[i] = ' ';
     284:	20 e2       	ldi	r18, 0x20	; 32
     286:	21 93       	st	Z+, r18
     288:	2d 93       	st	X+, r18
     28a:	e8 17       	cp	r30, r24
     28c:	f9 07       	cpc	r31, r25
     28e:	d9 f7       	brne	.-10     	; 0x286 <_GLOBAL__sub_I__ZN6Button6getBF1Ev+0x74>
		speed = 5;
     290:	85 e0       	ldi	r24, 0x05	; 5
     292:	80 93 7c 01 	sts	0x017C, r24
		
        count = PERIOD;
     296:	88 e2       	ldi	r24, 0x28	; 40
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 57 01 	sts	0x0157, r25
     29e:	80 93 56 01 	sts	0x0156, r24
        state = LL::read541(LL::BUTTONS, 1);
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	8c e8       	ldi	r24, 0x8C	; 140
     2a6:	48 d2       	rcall	.+1168   	; 0x738 <_ZN2LL7read541ENS_5HC541Eh>
     2a8:	80 93 7a 01 	sts	0x017A, r24
        timer::add(*this);		//timer3 has to be already instantiated
     2ac:	82 e5       	ldi	r24, 0x52	; 82
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	71 d4       	rcall	.+2274   	; 0xb94 <_ZN5timer3addER5Timer>
		return buttons.bf1;
	}
	char * getBF2(){
		return buttons.bf2;
	}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <__cxa_pure_virtual>:
/*
    This is applicable if using pure virtual inheritance.
*/
extern "C" void __cxa_pure_virtual(void); 
 
void __cxa_pure_virtual(void) {}; 
     2bc:	08 95       	ret

000002be <_Znwj>:
void* operator new(size_t size);
void operator delete(void* size);
 
void * operator new(size_t size)
{
    return malloc(size);
     2be:	0c 94 81 09 	jmp	0x1302	; 0x1302 <malloc>
}
     2c2:	08 95       	ret

000002c4 <_ZN12_GLOBAL__N_13LCD4taskEv>:
		void print(unsigned char position, const char *s, unsigned char src) {
			if(lcd.print(position, s, src)) return;
			print_param.position = position;
			print_param.s = s;
			print_param.src = src;
			kerAppend(*this);
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     2cc:	81 11       	cpse	r24, r1
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <_ZN12_GLOBAL__N_13LCD4taskEv+0x10>
     2d0:	1a 86       	std	Y+10, r1	; 0x0a
     2d2:	25 c0       	rjmp	.+74     	; 0x31e <_ZN12_GLOBAL__N_13LCD4taskEv+0x5a>
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	1a d2       	rcall	.+1076   	; 0x70c <_ZN2LL11lcdReadByteEh>
     2d8:	88 23       	and	r24, r24
     2da:	f4 f0       	brlt	.+60     	; 0x318 <_ZN12_GLOBAL__N_13LCD4taskEv+0x54>
     2dc:	6c 85       	ldd	r22, Y+12	; 0x0c
     2de:	62 30       	cpi	r22, 0x02	; 2
     2e0:	30 f0       	brcs	.+12     	; 0x2ee <_ZN12_GLOBAL__N_13LCD4taskEv+0x2a>
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e6:	04 d2       	rcall	.+1032   	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	8c 87       	std	Y+12, r24	; 0x0c
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <_ZN12_GLOBAL__N_13LCD4taskEv+0x2e>
     2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f0:	ff d1       	rcall	.+1022   	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     2f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	41 f4       	brne	.+16     	; 0x308 <_ZN12_GLOBAL__N_13LCD4taskEv+0x44>
     2f8:	ee 85       	ldd	r30, Y+14	; 0x0e
     2fa:	ff 85       	ldd	r31, Y+15	; 0x0f
     2fc:	cf 01       	movw	r24, r30
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	9f 87       	std	Y+15, r25	; 0x0f
     302:	8e 87       	std	Y+14, r24	; 0x0e
     304:	e0 81       	ld	r30, Z
     306:	07 c0       	rjmp	.+14     	; 0x316 <_ZN12_GLOBAL__N_13LCD4taskEv+0x52>
     308:	ee 85       	ldd	r30, Y+14	; 0x0e
     30a:	ff 85       	ldd	r31, Y+15	; 0x0f
     30c:	cf 01       	movw	r24, r30
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	9f 87       	std	Y+15, r25	; 0x0f
     312:	8e 87       	std	Y+14, r24	; 0x0e
     314:	e4 91       	lpm	r30, Z
     316:	eb 87       	std	Y+11, r30	; 0x0b
     318:	ce 01       	movw	r24, r28
     31a:	06 96       	adiw	r24, 0x06	; 6
     31c:	a4 d7       	rcall	.+3912   	; 0x1266 <_Z9kerAppendR4Task>
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <_ZN12_GLOBAL__N_13LCD7timeoutEv>:
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
     32a:	8a 85       	ldd	r24, Y+10	; 0x0a
     32c:	87 30       	cpi	r24, 0x07	; 7
     32e:	51 f4       	brne	.+20     	; 0x344 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x20>
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	8a 87       	std	Y+10, r24	; 0x0a
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	9d 83       	std	Y+5, r25	; 0x05
     33a:	8c 83       	std	Y+4, r24	; 0x04
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	80 e3       	ldi	r24, 0x30	; 48
     340:	d7 d1       	rcall	.+942    	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     342:	3f c0       	rjmp	.+126    	; 0x3c2 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x9e>
     344:	ce 01       	movw	r24, r28
     346:	2d d4       	rcall	.+2138   	; 0xba2 <_ZN5timer6removeER5Timer>
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	80 e3       	ldi	r24, 0x30	; 48
     34c:	c6 d1       	rcall	.+908    	; 0x6da <_ZN2LL14lcdWriteNibbleEhh>
     34e:	88 e7       	ldi	r24, 0x78	; 120
     350:	b3 d1       	rcall	.+870    	; 0x6b8 <_Z6delayUh>
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	80 e3       	ldi	r24, 0x30	; 48
     356:	c1 d1       	rcall	.+898    	; 0x6da <_ZN2LL14lcdWriteNibbleEhh>
     358:	82 e3       	ldi	r24, 0x32	; 50
     35a:	ae d1       	rcall	.+860    	; 0x6b8 <_Z6delayUh>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	80 e2       	ldi	r24, 0x20	; 32
     360:	bc d1       	rcall	.+888    	; 0x6da <_ZN2LL14lcdWriteNibbleEhh>
     362:	82 e3       	ldi	r24, 0x32	; 50
     364:	a9 d1       	rcall	.+850    	; 0x6b8 <_Z6delayUh>
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	88 e2       	ldi	r24, 0x28	; 40
     36a:	c2 d1       	rcall	.+900    	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     36c:	82 e3       	ldi	r24, 0x32	; 50
     36e:	a4 d1       	rcall	.+840    	; 0x6b8 <_Z6delayUh>
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	bd d1       	rcall	.+890    	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     376:	82 e3       	ldi	r24, 0x32	; 50
     378:	9f d1       	rcall	.+830    	; 0x6b8 <_Z6delayUh>
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	85 ea       	ldi	r24, 0xA5	; 165
     37e:	b8 d1       	rcall	.+880    	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     380:	82 e3       	ldi	r24, 0x32	; 50
     382:	9a d1       	rcall	.+820    	; 0x6b8 <_Z6delayUh>
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	80 e4       	ldi	r24, 0x40	; 64
     388:	b3 d1       	rcall	.+870    	; 0x6f0 <_ZN2LL12lcdWriteByteEhh>
     38a:	82 e3       	ldi	r24, 0x32	; 50
     38c:	95 d1       	rcall	.+810    	; 0x6b8 <_Z6delayUh>
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	bd d1       	rcall	.+890    	; 0x70c <_ZN2LL11lcdReadByteEh>
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	85 3a       	cpi	r24, 0xA5	; 165
     396:	09 f4       	brne	.+2      	; 0x39a <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x76>
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	99 23       	and	r25, r25
     39c:	11 f0       	breq	.+4      	; 0x3a2 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x7e>
     39e:	9a 87       	std	Y+10, r25	; 0x0a
     3a0:	10 c0       	rjmp	.+32     	; 0x3c2 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x9e>
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	8a 87       	std	Y+10, r24	; 0x0a
     3a6:	8e ef       	ldi	r24, 0xFE	; 254
     3a8:	8d 87       	std	Y+13, r24	; 0x0d
     3aa:	1c 86       	std	Y+12, r1	; 0x0c
     3ac:	8d e8       	ldi	r24, 0x8D	; 141
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9f 87       	std	Y+15, r25	; 0x0f
     3b2:	8e 87       	std	Y+14, r24	; 0x0e
     3b4:	ec e8       	ldi	r30, 0x8C	; 140
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	e4 91       	lpm	r30, Z
     3ba:	eb 87       	std	Y+11, r30	; 0x0b
     3bc:	ce 01       	movw	r24, r28
     3be:	06 96       	adiw	r24, 0x06	; 6
     3c0:	52 d7       	rcall	.+3748   	; 0x1266 <_Z9kerAppendR4Task>
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN3LCD3._54taskEv>:
     3c8:	dc 01       	movw	r26, r24
     3ca:	17 96       	adiw	r26, 0x07	; 7
     3cc:	2c 91       	ld	r18, X
     3ce:	17 97       	sbiw	r26, 0x07	; 7
     3d0:	15 96       	adiw	r26, 0x05	; 5
     3d2:	ed 91       	ld	r30, X+
     3d4:	fc 91       	ld	r31, X
     3d6:	16 97       	sbiw	r26, 0x06	; 6
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	8c 91       	ld	r24, X
     3dc:	14 97       	sbiw	r26, 0x04	; 4
     3de:	90 91 99 01 	lds	r25, 0x0199
     3e2:	91 11       	cpse	r25, r1
     3e4:	28 c0       	rjmp	.+80     	; 0x436 <_ZN3LCD3._54taskEv+0x6e>
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	90 93 99 01 	sts	0x0199, r25
     3ec:	20 93 9c 01 	sts	0x019C, r18
     3f0:	f0 93 9e 01 	sts	0x019E, r31
     3f4:	e0 93 9d 01 	sts	0x019D, r30
     3f8:	98 2f       	mov	r25, r24
     3fa:	90 95       	com	r25
     3fc:	90 93 9b 01 	sts	0x019B, r25
     400:	92 30       	cpi	r25, 0x02	; 2
     402:	10 f0       	brcs	.+4      	; 0x408 <_ZN3LCD3._54taskEv+0x40>
     404:	80 68       	ori	r24, 0x80	; 128
     406:	11 c0       	rjmp	.+34     	; 0x42a <_ZN3LCD3._54taskEv+0x62>
     408:	21 30       	cpi	r18, 0x01	; 1
     40a:	41 f4       	brne	.+16     	; 0x41c <_ZN3LCD3._54taskEv+0x54>
     40c:	cf 01       	movw	r24, r30
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 9e 01 	sts	0x019E, r25
     414:	80 93 9d 01 	sts	0x019D, r24
     418:	80 81       	ld	r24, Z
     41a:	07 c0       	rjmp	.+14     	; 0x42a <_ZN3LCD3._54taskEv+0x62>
     41c:	cf 01       	movw	r24, r30
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 9e 01 	sts	0x019E, r25
     424:	80 93 9d 01 	sts	0x019D, r24
     428:	84 91       	lpm	r24, Z
     42a:	80 93 9a 01 	sts	0x019A, r24
     42e:	85 e9       	ldi	r24, 0x95	; 149
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	19 c7       	rjmp	.+3634   	; 0x1266 <_Z9kerAppendR4Task>
     434:	08 95       	ret
     436:	cd 01       	movw	r24, r26
     438:	16 c7       	rjmp	.+3628   	; 0x1266 <_Z9kerAppendR4Task>
     43a:	08 95       	ret

0000043c <_ZN3LCD5printEhPc>:
        LCD(void) {
            count = state = POWER_UP_DELAY;	//power up delay > 15 ms
            timer::add(*this);		//timer3 has to be already instantiated
        }
        bool print(unsigned char position, const char *s, unsigned char src) {
			if (state != READY) return false;
     43c:	90 91 99 01 	lds	r25, 0x0199
     440:	91 11       	cpse	r25, r1
     442:	20 c0       	rjmp	.+64     	; 0x484 <_ZN3LCD5printEhPc+0x48>
			state = PRINTING;
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	90 93 99 01 	sts	0x0199, r25
			source = src;
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	90 93 9c 01 	sts	0x019C, r25
			flash = s;
     450:	70 93 9e 01 	sts	0x019E, r23
     454:	60 93 9d 01 	sts	0x019D, r22
			location = ~position;
     458:	98 2f       	mov	r25, r24
     45a:	90 95       	com	r25
     45c:	90 93 9b 01 	sts	0x019B, r25
			character = location > RAM ? position|128 : readbyte(); //pgm_read_byte(str++);
     460:	92 30       	cpi	r25, 0x02	; 2
     462:	10 f0       	brcs	.+4      	; 0x468 <_ZN3LCD5printEhPc+0x2c>
     464:	80 68       	ori	r24, 0x80	; 128
     466:	08 c0       	rjmp	.+16     	; 0x478 <_ZN3LCD5printEhPc+0x3c>
    private:
        unsigned char state, character, location, source;
		union {const char *flash; char *ram;};

		char readbyte(void){
			return source == RAM ? *ram++ : pgm_read_byte(flash++);
     468:	cb 01       	movw	r24, r22
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	90 93 9e 01 	sts	0x019E, r25
     470:	80 93 9d 01 	sts	0x019D, r24
     474:	fb 01       	movw	r30, r22
     476:	80 81       	ld	r24, Z
			if (state != READY) return false;
			state = PRINTING;
			source = src;
			flash = s;
			location = ~position;
			character = location > RAM ? position|128 : readbyte(); //pgm_read_byte(str++);
     478:	80 93 9a 01 	sts	0x019A, r24
			kerAppend(*this);
     47c:	85 e9       	ldi	r24, 0x95	; 149
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	f2 c6       	rjmp	.+3556   	; 0x1266 <_Z9kerAppendR4Task>
     482:	08 95       	ret
namespace LCD {
	static class : public Task {
	public:
		void print(unsigned char position, const char *s, unsigned char src) {
			if(lcd.print(position, s, src)) return;
			print_param.position = position;
     484:	80 93 8b 01 	sts	0x018B, r24
			print_param.s = s;
     488:	70 93 8d 01 	sts	0x018D, r23
     48c:	60 93 8c 01 	sts	0x018C, r22
			print_param.src = src;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 8e 01 	sts	0x018E, r24
			kerAppend(*this);
     496:	87 e8       	ldi	r24, 0x87	; 135
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	e5 c6       	rjmp	.+3530   	; 0x1266 <_Z9kerAppendR4Task>
     49c:	08 95       	ret

0000049e <_GLOBAL__sub_I__ZN3LCD5printEhPKc>:
	void print(unsigned char position, char *s){
		printTask.print(position, (const char *)s, RAM);
		//usrCall(printTask);
	}

     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	81 e9       	ldi	r24, 0x91	; 145
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0a d6       	rcall	.+3092   	; 0x10bc <_ZN7ElementC1Ev>
     4a8:	cf e8       	ldi	r28, 0x8F	; 143
     4aa:	d1 e0       	ldi	r29, 0x01	; 1
     4ac:	82 e1       	ldi	r24, 0x12	; 18
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	99 83       	std	Y+1, r25	; 0x01
     4b2:	88 83       	st	Y, r24
#ifndef __TASK_H__
#define __TASK_H__

#include "List.h"

class Task : Element {
     4b4:	87 e9       	ldi	r24, 0x97	; 151
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	01 d6       	rcall	.+3074   	; 0x10bc <_ZN7ElementC1Ev>
    enum {STATUS=0, RAM=1, BUSY=128};
    enum {POWER_UP_DELAY=7, INTERFACE_SET_DELAY=2, READY=0, NO_LCDM, PRINTING};

    class LCD : Timer, public Task {
    public:
        LCD(void) {
     4ba:	88 e1       	ldi	r24, 0x18	; 24
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	99 83       	std	Y+1, r25	; 0x01
     4c0:	88 83       	st	Y, r24
     4c2:	80 e2       	ldi	r24, 0x20	; 32
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	90 93 96 01 	sts	0x0196, r25
     4ca:	80 93 95 01 	sts	0x0195, r24
            count = state = POWER_UP_DELAY;	//power up delay > 15 ms
     4ce:	87 e0       	ldi	r24, 0x07	; 7
     4d0:	80 93 99 01 	sts	0x0199, r24
     4d4:	87 e0       	ldi	r24, 0x07	; 7
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 94 01 	sts	0x0194, r25
     4dc:	80 93 93 01 	sts	0x0193, r24
            timer::add(*this);		//timer3 has to be already instantiated
     4e0:	ce 01       	movw	r24, r28
     4e2:	58 d3       	rcall	.+1712   	; 0xb94 <_ZN5timer3addER5Timer>
     4e4:	89 e8       	ldi	r24, 0x89	; 137
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	e9 d5       	rcall	.+3026   	; 0x10bc <_ZN7ElementC1Ev>
    } lcd;

}

namespace LCD {
	static class : public Task {
     4ea:	86 e2       	ldi	r24, 0x26	; 38
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	90 93 88 01 	sts	0x0188, r25
     4f2:	80 93 87 01 	sts	0x0187, r24
	void print(unsigned char position, char *s){
		printTask.print(position, (const char *)s, RAM);
		//usrCall(printTask);
	}

     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZThn6_N12_GLOBAL__N_13LCD4taskEv>:
     4fc:	06 97       	sbiw	r24, 0x06	; 6
     4fe:	e2 ce       	rjmp	.-572    	; 0x2c4 <_ZN12_GLOBAL__N_13LCD4taskEv>

00000500 <_Z12displacementc>:
	// 11111111
};

int displacement(char b){
	static int last = 8;
	if (!b) return last;
     500:	81 11       	cpse	r24, r1
     502:	05 c0       	rjmp	.+10     	; 0x50e <_Z12displacementc+0xe>
     504:	80 91 06 01 	lds	r24, 0x0106
     508:	90 91 07 01 	lds	r25, 0x0107
     50c:	08 95       	ret
	unsigned char c = pgm_read_byte(&table[(unsigned char)b>>1]);
     50e:	e8 2f       	mov	r30, r24
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	f5 95       	asr	r31
     514:	e7 95       	ror	r30
     516:	ef 56       	subi	r30, 0x6F	; 111
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	e4 91       	lpm	r30, Z
	return last = b & 1 ? c >> 4 : c & 15;
     51c:	80 ff       	sbrs	r24, 0
     51e:	0a c0       	rjmp	.+20     	; 0x534 <_Z12displacementc+0x34>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	f5 95       	asr	r31
     524:	e7 95       	ror	r30
     526:	f5 95       	asr	r31
     528:	e7 95       	ror	r30
     52a:	f5 95       	asr	r31
     52c:	e7 95       	ror	r30
     52e:	f5 95       	asr	r31
     530:	e7 95       	ror	r30
     532:	02 c0       	rjmp	.+4      	; 0x538 <_Z12displacementc+0x38>
     534:	ef 70       	andi	r30, 0x0F	; 15
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	f0 93 07 01 	sts	0x0107, r31
     53c:	e0 93 06 01 	sts	0x0106, r30
     540:	8e 2f       	mov	r24, r30
     542:	9f 2f       	mov	r25, r31
}
     544:	08 95       	ret

00000546 <_ZN8maintask4taskEv>:
	Servo::second();
	Servo::set(Servo::UP1,2);
	Servo::set(Servo::UP2,3);
	Servo::delay100ms(10);
	Servo::set(Servo::RIGHT,1);
	Servo::slowclose1();
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	89 85       	ldd	r24, Y+9	; 0x09
     54e:	81 11       	cpse	r24, r1
     550:	0d c0       	rjmp	.+26     	; 0x56c <_ZN8maintask4taskEv+0x26>
     552:	c8 d4       	rcall	.+2448   	; 0xee4 <_ZN5Wheel9getSensorEv>
     554:	ba d0       	rcall	.+372    	; 0x6ca <_Z6mirrorc>
     556:	80 ff       	sbrs	r24, 0
     558:	05 c0       	rjmp	.+10     	; 0x564 <_ZN8maintask4taskEv+0x1e>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	cb d4       	rcall	.+2454   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	89 87       	std	Y+9, r24	; 0x09
     562:	04 c0       	rjmp	.+8      	; 0x56c <_ZN8maintask4taskEv+0x26>
     564:	84 ea       	ldi	r24, 0xA4	; 164
     566:	c6 d4       	rcall	.+2444   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     568:	ce 01       	movw	r24, r28
     56a:	7d d6       	rcall	.+3322   	; 0x1266 <_Z9kerAppendR4Task>
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <_ZN9maintask14taskEv>:
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
     578:	8e 81       	ldd	r24, Y+6	; 0x06
     57a:	81 11       	cpse	r24, r1
     57c:	18 c0       	rjmp	.+48     	; 0x5ae <_ZN9maintask14taskEv+0x3c>
     57e:	b2 d4       	rcall	.+2404   	; 0xee4 <_ZN5Wheel9getSensorEv>
     580:	80 ff       	sbrs	r24, 0
     582:	11 c0       	rjmp	.+34     	; 0x5a6 <_ZN9maintask14taskEv+0x34>
     584:	8c 81       	ldd	r24, Y+4	; 0x04
     586:	9d 81       	ldd	r25, Y+5	; 0x05
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	9d 83       	std	Y+5, r25	; 0x05
     58c:	8c 83       	std	Y+4, r24	; 0x04
     58e:	02 97       	sbiw	r24, 0x02	; 2
     590:	29 f4       	brne	.+10     	; 0x59c <_ZN9maintask14taskEv+0x2a>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	af d4       	rcall	.+2398   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8e 83       	std	Y+6, r24	; 0x06
     59a:	09 c0       	rjmp	.+18     	; 0x5ae <_ZN9maintask14taskEv+0x3c>
     59c:	84 ea       	ldi	r24, 0xA4	; 164
     59e:	aa d4       	rcall	.+2388   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     5a0:	ce 01       	movw	r24, r28
     5a2:	61 d6       	rcall	.+3266   	; 0x1266 <_Z9kerAppendR4Task>
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <_ZN9maintask14taskEv+0x3c>
     5a6:	84 ea       	ldi	r24, 0xA4	; 164
     5a8:	a5 d4       	rcall	.+2378   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     5aa:	ce 01       	movw	r24, r28
     5ac:	5c d6       	rcall	.+3256   	; 0x1266 <_Z9kerAppendR4Task>
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <_Z4testv>:
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	9f e1       	ldi	r25, 0x1F	; 31
     5bc:	9f d1       	rcall	.+830    	; 0x8fc <_ZN5Servo3setENS_13servo_commandEi>
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e7       	ldi	r24, 0x70	; 112
     5c4:	97 e1       	ldi	r25, 0x17	; 23
     5c6:	9a d1       	rcall	.+820    	; 0x8fc <_ZN5Servo3setENS_13servo_commandEi>
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e5       	ldi	r24, 0x50	; 80
     5ce:	96 e4       	ldi	r25, 0x46	; 70
     5d0:	95 d1       	rcall	.+810    	; 0x8fc <_ZN5Servo3setENS_13servo_commandEi>
     5d2:	8a e0       	ldi	r24, 0x0A	; 10
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	5e d1       	rcall	.+700    	; 0x894 <_ZN5Servo10delay100msEi>
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	89 e9       	ldi	r24, 0x99	; 153
     5de:	95 e1       	ldi	r25, 0x15	; 21
     5e0:	8d d1       	rcall	.+794    	; 0x8fc <_ZN5Servo3setENS_13servo_commandEi>
     5e2:	94 c1       	rjmp	.+808    	; 0x90c <_ZN5Servo9slowcloseEv>
     5e4:	08 95       	ret

000005e6 <main>:
	}
}usrTask1,usrTask2;

int main(void) {
	
 	Servo::setInitialise();
     5e6:	8c ee       	ldi	r24, 0xEC	; 236
     5e8:	9a e3       	ldi	r25, 0x3A	; 58
     5ea:	71 d1       	rcall	.+738    	; 0x8ce <_ZN5Servo13setInitialiseEi>
 	usrCall(usrTask);
     5ec:	8d ea       	ldi	r24, 0xAD	; 173
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	3f d6       	rcall	.+3198   	; 0x1270 <_Z7usrCallR4Task>
 	test();
     5f2:	e0 df       	rcall	.-64     	; 0x5b4 <_Z4testv>
	
 	Servo::delay100ms(10);
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	4d d1       	rcall	.+666    	; 0x894 <_ZN5Servo10delay100msEi>
	usrCall(usrTask1);
     5fa:	86 ea       	ldi	r24, 0xA6	; 166
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	38 d6       	rcall	.+3184   	; 0x1270 <_Z7usrCallR4Task>
	Wheel::move(Wheel::BACKWARD);
     600:	84 ea       	ldi	r24, 0xA4	; 164
     602:	78 d4       	rcall	.+2288   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(10);
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	45 d1       	rcall	.+650    	; 0x894 <_ZN5Servo10delay100msEi>
	usrCall(usrTask2);
     60a:	8f e9       	ldi	r24, 0x9F	; 159
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	30 d6       	rcall	.+3168   	; 0x1270 <_Z7usrCallR4Task>
	Servo::delay100ms(10);
     610:	8a e0       	ldi	r24, 0x0A	; 10
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	3f d1       	rcall	.+638    	; 0x894 <_ZN5Servo10delay100msEi>
	Wheel::set(70);
     616:	86 e4       	ldi	r24, 0x46	; 70
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	5f d4       	rcall	.+2238   	; 0xeda <_ZN5Wheel3setEi>
	Wheel::move(Wheel::BTURNRIGHT);
     61c:	8c e2       	ldi	r24, 0x2C	; 44
     61e:	6a d4       	rcall	.+2260   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(10);
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	37 d1       	rcall	.+622    	; 0x894 <_ZN5Servo10delay100msEi>
	Wheel::move(Wheel::BACKWARD);
     626:	84 ea       	ldi	r24, 0xA4	; 164
     628:	65 d4       	rcall	.+2250   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(9);
     62a:	89 e0       	ldi	r24, 0x09	; 9
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	32 d1       	rcall	.+612    	; 0x894 <_ZN5Servo10delay100msEi>
	Wheel::move(Wheel::STOP);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	60 d4       	rcall	.+2240   	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
	Servo::GG();	
     634:	ca d1       	rcall	.+916    	; 0x9ca <_ZN5Servo2GGEv>
     636:	ff cf       	rjmp	.-2      	; 0x636 <main+0x50>

00000638 <_GLOBAL__sub_I__Z4testv>:
	
	
    while(1) {

    }
}
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	8f ea       	ldi	r24, 0xAF	; 175
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	3d d5       	rcall	.+2682   	; 0x10bc <_ZN7ElementC1Ev>
	
}

static class maintask : public Task{
	public:
	maintask(void){
     642:	8c e2       	ldi	r24, 0x2C	; 44
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	90 93 ae 01 	sts	0x01AE, r25
     64a:	80 93 ad 01 	sts	0x01AD, r24
		stop=false;
     64e:	10 92 b6 01 	sts	0x01B6, r1
		count=0;
     652:	10 92 b3 01 	sts	0x01B3, r1
     656:	10 92 b2 01 	sts	0x01B2, r1
     65a:	88 ea       	ldi	r24, 0xA8	; 168
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	2e d5       	rcall	.+2652   	; 0x10bc <_ZN7ElementC1Ev>
	}
}usrTask;

static class maintask1 : public Task{
	public:
	maintask1(void){
     660:	c2 e3       	ldi	r28, 0x32	; 50
     662:	d1 e0       	ldi	r29, 0x01	; 1
     664:	d0 93 a7 01 	sts	0x01A7, r29
     668:	c0 93 a6 01 	sts	0x01A6, r28
		stop=false;
     66c:	10 92 ac 01 	sts	0x01AC, r1
		count=0;
     670:	10 92 ab 01 	sts	0x01AB, r1
     674:	10 92 aa 01 	sts	0x01AA, r1
     678:	81 ea       	ldi	r24, 0xA1	; 161
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	1f d5       	rcall	.+2622   	; 0x10bc <_ZN7ElementC1Ev>
	}
}usrTask;

static class maintask1 : public Task{
	public:
	maintask1(void){
     67e:	d0 93 a0 01 	sts	0x01A0, r29
     682:	c0 93 9f 01 	sts	0x019F, r28
		stop=false;
     686:	10 92 a5 01 	sts	0x01A5, r1
		count=0;
     68a:	10 92 a4 01 	sts	0x01A4, r1
     68e:	10 92 a3 01 	sts	0x01A3, r1
	
	
    while(1) {

    }
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <_ZN12_GLOBAL__N_13SPIEc>:
namespace {

    char u4, u5;

    char SPI(char c) {
        while (!(UCSR1A & _BV(UDRE1)));		// wait for empty transmit buffer
     698:	e8 ec       	ldi	r30, 0xC8	; 200
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	90 81       	ld	r25, Z
     69e:	95 ff       	sbrs	r25, 5
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <_ZN12_GLOBAL__N_13SPIEc+0x4>
        UDR1 = c;
     6a2:	80 93 ce 00 	sts	0x00CE, r24
        while (!(UCSR1A & _BV(RXC1)));		// wait for data to be received
     6a6:	e8 ec       	ldi	r30, 0xC8	; 200
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	ec f7       	brge	.-6      	; 0x6aa <_ZN12_GLOBAL__N_13SPIEc+0x12>
        return UDR1;							// dummy read
     6b0:	80 91 ce 00 	lds	r24, 0x00CE
    }
     6b4:	08 95       	ret

000006b6 <_Z5delayv>:
#include <avr/io.h>

#include "robocar_ll.h"

void __attribute__((noinline, naked)) delay(void) {
    __asm__("ret"::);
     6b6:	08 95       	ret

000006b8 <_Z6delayUh>:
}
//8 clk = 723 ns (11.0592 MHz)

void delayU(unsigned char t) {
     6b8:	cf 93       	push	r28
    while (t--) {
     6ba:	88 23       	and	r24, r24
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <_Z6delayUh+0xe>
     6be:	c8 2f       	mov	r28, r24
        delay();
     6c0:	fa df       	rcall	.-12     	; 0x6b6 <_Z5delayv>
     6c2:	c1 50       	subi	r28, 0x01	; 1
    __asm__("ret"::);
}
//8 clk = 723 ns (11.0592 MHz)

void delayU(unsigned char t) {
    while (t--) {
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <_Z6delayUh+0x8>
        delay();
    }
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <_Z6mirrorc>:
                         "1: lsr __tmp_reg__" "\n\t"\
                         "rol %0" "\n\t"\
                         "brcs 1b" "\n\t"\
                         :"=a" (c)\
                         :"0" (c)\
                        );
     6ca:	28 2f       	mov	r18, r24
     6cc:	02 2e       	mov	r0, r18
     6ce:	2e ef       	ldi	r18, 0xFE	; 254
     6d0:	06 94       	lsr	r0
     6d2:	22 1f       	adc	r18, r18
     6d4:	e8 f3       	brcs	.-6      	; 0x6d0 <_Z6mirrorc+0x6>
     6d6:	82 2f       	mov	r24, r18
    return c;
}
     6d8:	08 95       	ret

000006da <_ZN2LL14lcdWriteNibbleEhh>:

namespace LL {

    void lcdWriteNibble(unsigned char n, unsigned char c) {
        // require lower nibble of n = 0
        BGATEL();
     6da:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(n | c << 2);
     6e0:	66 0f       	add	r22, r22
     6e2:	66 0f       	add	r22, r22
     6e4:	86 2b       	or	r24, r22
     6e6:	88 b9       	out	0x08, r24	; 8
        LCDSTROBE();
     6e8:	17 9a       	sbi	0x02, 7	; 2
     6ea:	e5 df       	rcall	.-54     	; 0x6b6 <_Z5delayv>
     6ec:	17 98       	cbi	0x02, 7	; 2
     6ee:	08 95       	ret

000006f0 <_ZN2LL12lcdWriteByteEhh>:
    }

    void lcdWriteByte(unsigned char b, unsigned char c) {
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	c8 2f       	mov	r28, r24
     6f6:	d6 2f       	mov	r29, r22
        lcdWriteNibble(b & 0xf0, c);		// high nibble first
     6f8:	80 7f       	andi	r24, 0xF0	; 240
     6fa:	ef df       	rcall	.-34     	; 0x6da <_ZN2LL14lcdWriteNibbleEhh>
        lcdWriteNibble(b << 4, c);
     6fc:	6d 2f       	mov	r22, r29
     6fe:	8c 2f       	mov	r24, r28
     700:	82 95       	swap	r24
     702:	80 7f       	andi	r24, 0xF0	; 240
     704:	ea df       	rcall	.-44     	; 0x6da <_ZN2LL14lcdWriteNibbleEhh>
    }
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_ZN2LL11lcdReadByteEh>:

    char lcdReadByte(unsigned char c) {
     70c:	cf 93       	push	r28
        unsigned char lownibble;
        BGATEL();
     70e:	2a 98       	cbi	0x05, 2	; 5
        BUS(BREAD);
     710:	9f e0       	ldi	r25, 0x0F	; 15
     712:	97 b9       	out	0x07, r25	; 7
        BUSWRITE((c | 2) << 2);
     714:	82 60       	ori	r24, 0x02	; 2
     716:	88 0f       	add	r24, r24
     718:	88 0f       	add	r24, r24
     71a:	88 b9       	out	0x08, r24	; 8
        LCDSTROBE();
     71c:	17 9a       	sbi	0x02, 7	; 2
     71e:	cb df       	rcall	.-106    	; 0x6b6 <_Z5delayv>
     720:	17 98       	cbi	0x02, 7	; 2
        BUSREAD(c);
     722:	c6 b1       	in	r28, 0x06	; 6
        c &= 0xf0;	// high nibble first
        LCDSTROBE();
     724:	17 9a       	sbi	0x02, 7	; 2
     726:	c7 df       	rcall	.-114    	; 0x6b6 <_Z5delayv>
     728:	17 98       	cbi	0x02, 7	; 2
        BUSREAD(lownibble);
     72a:	86 b1       	in	r24, 0x06	; 6
        return c | lownibble >> 4;
     72c:	82 95       	swap	r24
     72e:	8f 70       	andi	r24, 0x0F	; 15
        BGATEL();
        BUS(BREAD);
        BUSWRITE((c | 2) << 2);
        LCDSTROBE();
        BUSREAD(c);
        c &= 0xf0;	// high nibble first
     730:	c0 7f       	andi	r28, 0xF0	; 240
        LCDSTROBE();
        BUSREAD(lownibble);
        return c | lownibble >> 4;
    }
     732:	8c 2b       	or	r24, r28
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <_ZN2LL7read541ENS_5HC541Eh>:

    char read541(HC541 address, unsigned char t) {
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
        SPICLKL();
     73c:	ca ec       	ldi	r28, 0xCA	; 202
     73e:	d0 e0       	ldi	r29, 0x00	; 0
     740:	98 81       	ld	r25, Y
     742:	9e 7f       	andi	r25, 0xFE	; 254
     744:	98 83       	st	Y, r25
        BGATEL();
     746:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     748:	9f ef       	ldi	r25, 0xFF	; 255
     74a:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(address);
     74c:	88 b9       	out	0x08, r24	; 8
        BGATEH();
     74e:	2a 9a       	sbi	0x05, 2	; 5
        delayU(t);
     750:	86 2f       	mov	r24, r22
     752:	b2 df       	rcall	.-156    	; 0x6b8 <_Z6delayUh>
        SPICLKH();
     754:	88 81       	ld	r24, Y
     756:	81 60       	ori	r24, 0x01	; 1
     758:	88 83       	st	Y, r24
        BGATEL();
     75a:	2a 98       	cbi	0x05, 2	; 5
        PORTC &= 0xf3;
     75c:	88 b1       	in	r24, 0x08	; 8
     75e:	83 7f       	andi	r24, 0xF3	; 243
     760:	88 b9       	out	0x08, r24	; 8
        return SPI(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	99 df       	rcall	.-206    	; 0x698 <_ZN12_GLOBAL__N_13SPIEc>
    }
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <_ZN2LL8write574ENS_5HC574Ec>:

    void write574(HC574 address, char c) {
        BGATEL();
     76c:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(address);
     772:	88 b9       	out	0x08, r24	; 8
        BGATEH();
     774:	2a 9a       	sbi	0x05, 2	; 5
        SPI(c);
     776:	86 2f       	mov	r24, r22
     778:	8f df       	rcall	.-226    	; 0x698 <_ZN12_GLOBAL__N_13SPIEc>
        BGATEL();
     77a:	2a 98       	cbi	0x05, 2	; 5
     77c:	08 95       	ret

0000077e <_ZN2LL15servoSetAddressEc>:
    }

    void servoSetAddress(char c) {
     77e:	cf 93       	push	r28
        u4 = (u4 & 0x1F) | mirror(c & 7);
     780:	c0 91 b8 01 	lds	r28, 0x01B8
     784:	cf 71       	andi	r28, 0x1F	; 31
     786:	87 70       	andi	r24, 0x07	; 7
     788:	a0 df       	rcall	.-192    	; 0x6ca <_Z6mirrorc>
     78a:	68 2f       	mov	r22, r24
     78c:	6c 2b       	or	r22, r28
     78e:	60 93 b8 01 	sts	0x01B8, r22
        write574(U4, u4);
     792:	80 e4       	ldi	r24, 0x40	; 64
     794:	eb df       	rcall	.-42     	; 0x76c <_ZN2LL8write574ENS_5HC574Ec>
    }
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <_ZN2LL16backMotorControlEc>:

    void backMotorControl(char c) {
        u5 = (u5 & 0x78) | (c & 0x87);
     79a:	87 78       	andi	r24, 0x87	; 135
     79c:	60 91 b7 01 	lds	r22, 0x01B7
     7a0:	68 77       	andi	r22, 0x78	; 120
     7a2:	68 2b       	or	r22, r24
     7a4:	60 93 b7 01 	sts	0x01B7, r22
        write574(U5, u5);
     7a8:	80 e6       	ldi	r24, 0x60	; 96
     7aa:	e0 cf       	rjmp	.-64     	; 0x76c <_ZN2LL8write574ENS_5HC574Ec>
     7ac:	08 95       	ret

000007ae <_ZN12_GLOBAL__N_18Slowmove4taskEv>:
	void second(){
		while(servo.width[0]>OPEN)
		{	servo.width[0]-=2;
			delayU(255);
		}	
	}
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 85       	ldd	r24, Z+8	; 0x08
     7b2:	91 85       	ldd	r25, Z+9	; 0x09
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	91 87       	std	Z+9, r25	; 0x09
     7b8:	80 87       	std	Z+8, r24	; 0x08
     7ba:	22 85       	ldd	r18, Z+10	; 0x0a
     7bc:	22 23       	and	r18, r18
     7be:	f1 f1       	breq	.+124    	; 0x83c <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x8e>
     7c0:	88 3e       	cpi	r24, 0xE8	; 232
     7c2:	93 40       	sbci	r25, 0x03	; 3
     7c4:	71 f5       	brne	.+92     	; 0x822 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x74>
     7c6:	24 81       	ldd	r18, Z+4	; 0x04
     7c8:	35 81       	ldd	r19, Z+5	; 0x05
     7ca:	d9 01       	movw	r26, r18
     7cc:	aa 0f       	add	r26, r26
     7ce:	bb 1f       	adc	r27, r27
     7d0:	a8 53       	subi	r26, 0x38	; 56
     7d2:	be 4f       	sbci	r27, 0xFE	; 254
     7d4:	8d 91       	ld	r24, X+
     7d6:	9c 91       	ld	r25, X
     7d8:	46 81       	ldd	r20, Z+6	; 0x06
     7da:	57 81       	ldd	r21, Z+7	; 0x07
     7dc:	84 17       	cp	r24, r20
     7de:	95 07       	cpc	r25, r21
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x44>
     7e2:	d9 01       	movw	r26, r18
     7e4:	aa 0f       	add	r26, r26
     7e6:	bb 1f       	adc	r27, r27
     7e8:	a8 53       	subi	r26, 0x38	; 56
     7ea:	be 4f       	sbci	r27, 0xFE	; 254
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	8d 93       	st	X+, r24
     7f0:	9c 93       	st	X, r25
     7f2:	24 81       	ldd	r18, Z+4	; 0x04
     7f4:	35 81       	ldd	r19, Z+5	; 0x05
     7f6:	d9 01       	movw	r26, r18
     7f8:	aa 0f       	add	r26, r26
     7fa:	bb 1f       	adc	r27, r27
     7fc:	a8 53       	subi	r26, 0x38	; 56
     7fe:	be 4f       	sbci	r27, 0xFE	; 254
     800:	8d 91       	ld	r24, X+
     802:	9c 91       	ld	r25, X
     804:	46 81       	ldd	r20, Z+6	; 0x06
     806:	57 81       	ldd	r21, Z+7	; 0x07
     808:	48 17       	cp	r20, r24
     80a:	59 07       	cpc	r21, r25
     80c:	40 f4       	brcc	.+16     	; 0x81e <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x70>
     80e:	d9 01       	movw	r26, r18
     810:	aa 0f       	add	r26, r26
     812:	bb 1f       	adc	r27, r27
     814:	a8 53       	subi	r26, 0x38	; 56
     816:	be 4f       	sbci	r27, 0xFE	; 254
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	8d 93       	st	X+, r24
     81c:	9c 93       	st	X, r25
     81e:	11 86       	std	Z+9, r1	; 0x09
     820:	10 86       	std	Z+8, r1	; 0x08
     822:	a4 81       	ldd	r26, Z+4	; 0x04
     824:	b5 81       	ldd	r27, Z+5	; 0x05
     826:	86 81       	ldd	r24, Z+6	; 0x06
     828:	97 81       	ldd	r25, Z+7	; 0x07
     82a:	aa 0f       	add	r26, r26
     82c:	bb 1f       	adc	r27, r27
     82e:	a8 53       	subi	r26, 0x38	; 56
     830:	be 4f       	sbci	r27, 0xFE	; 254
     832:	8d 93       	st	X+, r24
     834:	9c 93       	st	X, r25
     836:	89 2b       	or	r24, r25
     838:	09 f0       	breq	.+2      	; 0x83c <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x8e>
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	08 95       	ret

0000083e <_ZN12_GLOBAL__N_15Servo4taskEv>:
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	8c 89       	ldd	r24, Y+20	; 0x14
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	87 70       	andi	r24, 0x07	; 7
     84a:	8c 8b       	std	Y+20, r24	; 0x14
     84c:	98 df       	rcall	.-208    	; 0x77e <_ZN2LL15servoSetAddressEc>
     84e:	8c 89       	ldd	r24, Y+20	; 0x14
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	02 96       	adiw	r24, 0x02	; 2
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	c8 0f       	add	r28, r24
     85a:	d9 1f       	adc	r29, r25
     85c:	88 81       	ld	r24, Y
     85e:	99 81       	ldd	r25, Y+1	; 0x01
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	51 f0       	breq	.+20     	; 0x878 <_ZN12_GLOBAL__N_15Servo4taskEv+0x3a>
     864:	90 93 9b 00 	sts	0x009B, r25
     868:	80 93 9a 00 	sts	0x009A, r24
     86c:	e0 e9       	ldi	r30, 0x90	; 144
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	80 62       	ori	r24, 0x20	; 32
     874:	80 83       	st	Z, r24
     876:	0b c0       	rjmp	.+22     	; 0x88e <_ZN12_GLOBAL__N_15Servo4taskEv+0x50>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e3       	ldi	r25, 0x36	; 54
     87c:	90 93 9b 00 	sts	0x009B, r25
     880:	80 93 9a 00 	sts	0x009A, r24
     884:	e0 e9       	ldi	r30, 0x90	; 144
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	8f 7d       	andi	r24, 0xDF	; 223
     88c:	80 83       	st	Z, r24
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_ZN5Servo10delay100msEi>:
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	20 e9       	ldi	r18, 0x90	; 144
     89e:	31 e0       	ldi	r19, 0x01	; 1
     8a0:	82 9f       	mul	r24, r18
     8a2:	80 01       	movw	r16, r0
     8a4:	83 9f       	mul	r24, r19
     8a6:	10 0d       	add	r17, r0
     8a8:	92 9f       	mul	r25, r18
     8aa:	10 0d       	add	r17, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	10 16       	cp	r1, r16
     8b0:	11 06       	cpc	r1, r17
     8b2:	44 f4       	brge	.+16     	; 0x8c4 <_ZN5Servo10delay100msEi+0x30>
     8b4:	c0 e0       	ldi	r28, 0x00	; 0
     8b6:	d0 e0       	ldi	r29, 0x00	; 0
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	fe de       	rcall	.-516    	; 0x6b8 <_Z6delayUh>
     8bc:	21 96       	adiw	r28, 0x01	; 1
     8be:	c0 17       	cp	r28, r16
     8c0:	d1 07       	cpc	r29, r17
     8c2:	d1 f7       	brne	.-12     	; 0x8b8 <_ZN5Servo10delay100msEi+0x24>
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <_ZN5Servo13setInitialiseEi>:
     8ce:	90 93 cf 01 	sts	0x01CF, r25
     8d2:	80 93 ce 01 	sts	0x01CE, r24
     8d6:	20 e4       	ldi	r18, 0x40	; 64
     8d8:	3f e1       	ldi	r19, 0x1F	; 31
     8da:	30 93 c9 01 	sts	0x01C9, r19
     8de:	20 93 c8 01 	sts	0x01C8, r18
     8e2:	28 ed       	ldi	r18, 0xD8	; 216
     8e4:	39 e5       	ldi	r19, 0x59	; 89
     8e6:	30 93 cb 01 	sts	0x01CB, r19
     8ea:	20 93 ca 01 	sts	0x01CA, r18
     8ee:	88 58       	subi	r24, 0x88	; 136
     8f0:	93 41       	sbci	r25, 0x13	; 19
     8f2:	90 93 cd 01 	sts	0x01CD, r25
     8f6:	80 93 cc 01 	sts	0x01CC, r24
     8fa:	08 95       	ret

000008fc <_ZN5Servo3setENS_13servo_commandEi>:
     8fc:	fb 01       	movw	r30, r22
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e8 53       	subi	r30, 0x38	; 56
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
     90a:	08 95       	ret

0000090c <_ZN5Servo9slowcloseEv>:
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	bf df       	rcall	.-130    	; 0x894 <_ZN5Servo10delay100msEi>
     916:	88 ef       	ldi	r24, 0xF8	; 248
     918:	9a e2       	ldi	r25, 0x2A	; 42
     91a:	90 93 cd 01 	sts	0x01CD, r25
     91e:	80 93 cc 01 	sts	0x01CC, r24
     922:	8a e0       	ldi	r24, 0x0A	; 10
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	b6 df       	rcall	.-148    	; 0x894 <_ZN5Servo10delay100msEi>
     928:	8c e9       	ldi	r24, 0x9C	; 156
     92a:	98 e1       	ldi	r25, 0x18	; 24
     92c:	90 93 cf 01 	sts	0x01CF, r25
     930:	80 93 ce 01 	sts	0x01CE, r24
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	ad df       	rcall	.-166    	; 0x894 <_ZN5Servo10delay100msEi>
     93a:	80 91 ca 01 	lds	r24, 0x01CA
     93e:	90 91 cb 01 	lds	r25, 0x01CB
     942:	88 32       	cpi	r24, 0x28	; 40
     944:	23 e2       	ldi	r18, 0x23	; 35
     946:	92 07       	cpc	r25, r18
     948:	68 f4       	brcc	.+26     	; 0x964 <_ZN5Servo9slowcloseEv+0x58>
     94a:	ca ec       	ldi	r28, 0xCA	; 202
     94c:	d1 e0       	ldi	r29, 0x01	; 1
     94e:	02 96       	adiw	r24, 0x02	; 2
     950:	99 83       	std	Y+1, r25	; 0x01
     952:	88 83       	st	Y, r24
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	b0 de       	rcall	.-672    	; 0x6b8 <_Z6delayUh>
     958:	88 81       	ld	r24, Y
     95a:	99 81       	ldd	r25, Y+1	; 0x01
     95c:	88 32       	cpi	r24, 0x28	; 40
     95e:	23 e2       	ldi	r18, 0x23	; 35
     960:	92 07       	cpc	r25, r18
     962:	a8 f3       	brcs	.-22     	; 0x94e <_ZN5Servo9slowcloseEv+0x42>
     964:	80 91 c8 01 	lds	r24, 0x01C8
     968:	90 91 c9 01 	lds	r25, 0x01C9
     96c:	80 35       	cpi	r24, 0x50	; 80
     96e:	26 e4       	ldi	r18, 0x46	; 70
     970:	92 07       	cpc	r25, r18
     972:	68 f4       	brcc	.+26     	; 0x98e <_ZN5Servo9slowcloseEv+0x82>
     974:	c8 ec       	ldi	r28, 0xC8	; 200
     976:	d1 e0       	ldi	r29, 0x01	; 1
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	99 83       	std	Y+1, r25	; 0x01
     97c:	88 83       	st	Y, r24
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9b de       	rcall	.-714    	; 0x6b8 <_Z6delayUh>
     982:	88 81       	ld	r24, Y
     984:	99 81       	ldd	r25, Y+1	; 0x01
     986:	80 35       	cpi	r24, 0x50	; 80
     988:	26 e4       	ldi	r18, 0x46	; 70
     98a:	92 07       	cpc	r25, r18
     98c:	a8 f3       	brcs	.-22     	; 0x978 <_ZN5Servo9slowcloseEv+0x6c>
     98e:	88 ed       	ldi	r24, 0xD8	; 216
     990:	99 e5       	ldi	r25, 0x59	; 89
     992:	90 93 cb 01 	sts	0x01CB, r25
     996:	80 93 ca 01 	sts	0x01CA, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	7a df       	rcall	.-268    	; 0x894 <_ZN5Servo10delay100msEi>
     9a0:	80 e7       	ldi	r24, 0x70	; 112
     9a2:	97 e1       	ldi	r25, 0x17	; 23
     9a4:	90 93 cd 01 	sts	0x01CD, r25
     9a8:	80 93 cc 01 	sts	0x01CC, r24
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	71 df       	rcall	.-286    	; 0x894 <_ZN5Servo10delay100msEi>
     9b2:	80 e5       	ldi	r24, 0x50	; 80
     9b4:	96 e4       	ldi	r25, 0x46	; 70
     9b6:	90 93 cf 01 	sts	0x01CF, r25
     9ba:	80 93 ce 01 	sts	0x01CE, r24
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	68 df       	rcall	.-304    	; 0x894 <_ZN5Servo10delay100msEi>
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <_ZN5Servo2GGEv>:
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
	void set(int num,int name){
		servo.width[name]=num;
     9ca:	80 eb       	ldi	r24, 0xB0	; 176
     9cc:	96 e3       	ldi	r25, 0x36	; 54
     9ce:	90 93 cb 01 	sts	0x01CB, r25
     9d2:	80 93 ca 01 	sts	0x01CA, r24
		servo.width[(int)i]=val;
		servo.width[0]=8000;
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
     9d6:	88 ef       	ldi	r24, 0xF8	; 248
     9d8:	9a e2       	ldi	r25, 0x2A	; 42
     9da:	90 93 cd 01 	sts	0x01CD, r25
     9de:	80 93 cc 01 	sts	0x01CC, r24
     9e2:	8c e9       	ldi	r24, 0x9C	; 156
     9e4:	98 e1       	ldi	r25, 0x18	; 24
     9e6:	90 93 cf 01 	sts	0x01CF, r25
     9ea:	80 93 ce 01 	sts	0x01CE, r24
	void GG(){
		
		set(14000,1);
		set(DOWN1,2);
		set(DOWN2,3);
		delay100ms(10);
     9ee:	8a e0       	ldi	r24, 0x0A	; 10
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	50 df       	rcall	.-352    	; 0x894 <_ZN5Servo10delay100msEi>
		servo.width[(int)i]=val;
		servo.width[0]=8000;
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	9f e1       	ldi	r25, 0x1F	; 31
     9f8:	90 93 c9 01 	sts	0x01C9, r25
     9fc:	80 93 c8 01 	sts	0x01C8, r24
     a00:	08 95       	ret

00000a02 <__vector_33>:
	
	
}


ISR(TIMER3_COMPB_vect) {
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	0b b6       	in	r0, 0x3b	; 59
     a0e:	0f 92       	push	r0
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
    isrAppend(servo);
     a28:	84 ec       	ldi	r24, 0xC4	; 196
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	ef d3       	rcall	.+2014   	; 0x120c <_Z9isrAppendR4Task>
	// isrAppend(slowmove);
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <_GLOBAL__sub_I__ZN5Servo10delay100msEi>:
     a54:	86 ec       	ldi	r24, 0xC6	; 198
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	31 d3       	rcall	.+1634   	; 0x10bc <_ZN7ElementC1Ev>

namespace {

    class Servo: public Task {
    public:
        Servo(void) {
     a5a:	88 e3       	ldi	r24, 0x38	; 56
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	90 93 c5 01 	sts	0x01C5, r25
     a62:	80 93 c4 01 	sts	0x01C4, r24
            DDRB |=_BV(7);
     a66:	27 9a       	sbi	0x04, 7	; 4
            OCR3B=13824;
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	96 e3       	ldi	r25, 0x36	; 54
     a6c:	90 93 9b 00 	sts	0x009B, r25
     a70:	80 93 9a 00 	sts	0x009A, r24
            TIMSK3|=_BV(OCIE3B);
     a74:	e1 e7       	ldi	r30, 0x71	; 113
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	84 60       	ori	r24, 0x04	; 4
     a7c:	80 83       	st	Z, r24
            channel=width[0]=width[1]=0;
     a7e:	10 92 cb 01 	sts	0x01CB, r1
     a82:	10 92 ca 01 	sts	0x01CA, r1
     a86:	10 92 c9 01 	sts	0x01C9, r1
     a8a:	10 92 c8 01 	sts	0x01C8, r1
     a8e:	10 92 d8 01 	sts	0x01D8, r1
            width[2]=width[3]=0;
     a92:	10 92 cf 01 	sts	0x01CF, r1
     a96:	10 92 ce 01 	sts	0x01CE, r1
     a9a:	10 92 cd 01 	sts	0x01CD, r1
     a9e:	10 92 cc 01 	sts	0x01CC, r1
            width[4]=width[5]=0;
     aa2:	10 92 d3 01 	sts	0x01D3, r1
     aa6:	10 92 d2 01 	sts	0x01D2, r1
     aaa:	10 92 d1 01 	sts	0x01D1, r1
     aae:	10 92 d0 01 	sts	0x01D0, r1
            width[6]=width[7]=0;
     ab2:	10 92 d7 01 	sts	0x01D7, r1
     ab6:	10 92 d6 01 	sts	0x01D6, r1
     aba:	10 92 d5 01 	sts	0x01D5, r1
     abe:	10 92 d4 01 	sts	0x01D4, r1
     ac2:	8b eb       	ldi	r24, 0xBB	; 187
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	fa d2       	rcall	.+1524   	; 0x10bc <_ZN7ElementC1Ev>
namespace {

	class Slowmove: public Task { 
		
		public:
		Slowmove(void) {
     ac8:	8e e3       	ldi	r24, 0x3E	; 62
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	90 93 ba 01 	sts	0x01BA, r25
     ad0:	80 93 b9 01 	sts	0x01B9, r24
			_start=false;
     ad4:	10 92 c3 01 	sts	0x01C3, r1
     ad8:	08 95       	ret

00000ada <_ZN6Timer34taskEv>:
        if (e) if (current == &t) current = e;
    }
private:
    List list;
    Timer *current;
    void task(void) {
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
        if ((current = (Timer*)list.getNext(current))) {
     ae0:	68 85       	ldd	r22, Y+8	; 0x08
     ae2:	79 85       	ldd	r23, Y+9	; 0x09
     ae4:	61 15       	cp	r22, r1
     ae6:	71 05       	cpc	r23, r1
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <_ZN6Timer34taskEv+0x16>
     aea:	6e 5f       	subi	r22, 0xFE	; 254
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <_ZN6Timer34taskEv+0x1a>
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	ce 01       	movw	r24, r28
     af6:	04 96       	adiw	r24, 0x04	; 4
     af8:	ee d2       	rcall	.+1500   	; 0x10d6 <_ZN4List7getNextEP7Element>
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	e9 f0       	breq	.+58     	; 0xb38 <_ZN6Timer34taskEv+0x5e>
     afe:	9c 01       	movw	r18, r24
     b00:	22 50       	subi	r18, 0x02	; 2
     b02:	31 09       	sbc	r19, r1
     b04:	39 87       	std	Y+9, r19	; 0x09
     b06:	28 87       	std	Y+8, r18	; 0x08
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	b9 f0       	breq	.+46     	; 0xb3c <_ZN6Timer34taskEv+0x62>
            if (--current->count == 0) current->timeout();
     b0e:	f9 01       	movw	r30, r18
     b10:	24 81       	ldd	r18, Z+4	; 0x04
     b12:	35 81       	ldd	r19, Z+5	; 0x05
     b14:	21 50       	subi	r18, 0x01	; 1
     b16:	31 09       	sbc	r19, r1
     b18:	35 83       	std	Z+5, r19	; 0x05
     b1a:	24 83       	std	Z+4, r18	; 0x04
     b1c:	23 2b       	or	r18, r19
     b1e:	49 f4       	brne	.+18     	; 0xb32 <_ZN6Timer34taskEv+0x58>
     b20:	88 85       	ldd	r24, Y+8	; 0x08
     b22:	99 85       	ldd	r25, Y+9	; 0x09
     b24:	dc 01       	movw	r26, r24
     b26:	ed 91       	ld	r30, X+
     b28:	fc 91       	ld	r31, X
     b2a:	01 90       	ld	r0, Z+
     b2c:	f0 81       	ld	r31, Z
     b2e:	e0 2d       	mov	r30, r0
     b30:	09 95       	icall
            kerAppend(*this);
     b32:	ce 01       	movw	r24, r28
     b34:	98 d3       	rcall	.+1840   	; 0x1266 <_Z9kerAppendR4Task>
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <_ZN6Timer34taskEv+0x62>
    }
private:
    List list;
    Timer *current;
    void task(void) {
        if ((current = (Timer*)list.getNext(current))) {
     b38:	19 86       	std	Y+9, r1	; 0x09
     b3a:	18 86       	std	Y+8, r1	; 0x08
            if (--current->count == 0) current->timeout();
            kerAppend(*this);
        }
    }
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <__vector_34>:
} timer3;

ISR(TIMER3_OVF_vect) {
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	0b b6       	in	r0, 0x3b	; 59
     b4e:	0f 92       	push	r0
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
    isrAppend(timer3);
     b68:	8b ed       	ldi	r24, 0xDB	; 219
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	4f d3       	rcall	.+1694   	; 0x120c <_Z9isrAppendR4Task>
}
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0b be       	out	0x3b, r0	; 59
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <_ZN5timer3addER5Timer>:
        TCCR3B = 0b00011001;	// clk/1
        OCR3A = 27648;			// 2.5 ms for 11.0592 MHz
        TIMSK3 |= _BV(TOIE3);	// enable interrupt
    }
    void add(Timer &t) {
        list.append(t);
     b94:	bc 01       	movw	r22, r24
     b96:	6e 5f       	subi	r22, 0xFE	; 254
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	8f ed       	ldi	r24, 0xDF	; 223
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	b9 c2       	rjmp	.+1394   	; 0x1112 <_ZN4List6appendER7Element>
     ba0:	08 95       	ret

00000ba2 <_ZN5timer6removeER5Timer>:

namespace timer {
    void add(Timer &t) {
        timer3.add(t);
    }
    void remove(Timer &t) {
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
    }
    void add(Timer &t) {
        list.append(t);
    }
    void remove(Timer &t) {
        Timer* e = (Timer*)list.remove(t);
     ba8:	bc 01       	movw	r22, r24
     baa:	6e 5f       	subi	r22, 0xFE	; 254
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	8f ed       	ldi	r24, 0xDF	; 223
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	d8 d2       	rcall	.+1456   	; 0x1164 <_ZN4List6removeER7Element>
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	71 f0       	breq	.+28     	; 0xbd4 <_ZN5timer6removeER5Timer+0x32>
     bb8:	02 97       	sbiw	r24, 0x02	; 2
        if (e) if (current == &t) current = e;
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <_ZN5timer6removeER5Timer+0x32>
     bbe:	20 91 e3 01 	lds	r18, 0x01E3
     bc2:	30 91 e4 01 	lds	r19, 0x01E4
     bc6:	c2 17       	cp	r28, r18
     bc8:	d3 07       	cpc	r29, r19
     bca:	21 f4       	brne	.+8      	; 0xbd4 <_ZN5timer6removeER5Timer+0x32>
     bcc:	90 93 e4 01 	sts	0x01E4, r25
     bd0:	80 93 e3 01 	sts	0x01E3, r24
    void add(Timer &t) {
        timer3.add(t);
    }
    void remove(Timer &t) {
        timer3.remove(t);
    }
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <_GLOBAL__sub_I___vector_34>:
     bda:	8d ed       	ldi	r24, 0xDD	; 221
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	6e d2       	rcall	.+1244   	; 0x10bc <_ZN7ElementC1Ev>
#include "Task.h"
#include "Timer.h"

static class Timer3 : public Task {
public:
    Timer3(void) : current(0) {
     be0:	84 e4       	ldi	r24, 0x44	; 68
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	90 93 dc 01 	sts	0x01DC, r25
     be8:	80 93 db 01 	sts	0x01DB, r24
     bec:	8f ed       	ldi	r24, 0xDF	; 223
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	69 d2       	rcall	.+1234   	; 0x10c4 <_ZN4ListC1Ev>
     bf2:	10 92 e4 01 	sts	0x01E4, r1
     bf6:	10 92 e3 01 	sts	0x01E3, r1
        TCCR3A = 0b00000011;	// OC3A & OC3B disconnected, Fast PWM
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	80 93 90 00 	sts	0x0090, r24
        TCCR3B = 0b00011001;	// clk/1
     c00:	89 e1       	ldi	r24, 0x19	; 25
     c02:	80 93 91 00 	sts	0x0091, r24
        OCR3A = 27648;			// 2.5 ms for 11.0592 MHz
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	9c e6       	ldi	r25, 0x6C	; 108
     c0a:	90 93 99 00 	sts	0x0099, r25
     c0e:	80 93 98 00 	sts	0x0098, r24
        TIMSK3 |= _BV(TOIE3);	// enable interrupt
     c12:	e1 e7       	ldi	r30, 0x71	; 113
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	80 83       	st	Z, r24
     c1c:	08 95       	ret

00000c1e <_ZL5uitosjPch>:
	void setP(int P){	timer2.kP = P;	}
	void setI(int I){	timer2.kI = I;	}
	void setD(int D){	timer2.kD = D;	}
	void usrCount(unsigned int step){
		usrCountTask.set(step);
		usrCall(usrCountTask);		
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	7c 01       	movw	r14, r24
     c2c:	8b 01       	movw	r16, r22
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	fa 01       	movw	r30, r20
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	e6 0f       	add	r30, r22
     c36:	f7 1f       	adc	r31, r23
     c38:	9c 01       	movw	r18, r24
     c3a:	ad ec       	ldi	r26, 0xCD	; 205
     c3c:	bc ec       	ldi	r27, 0xCC	; 204
     c3e:	3a d3       	rcall	.+1652   	; 0x12b4 <__umulhisi3>
     c40:	ec 01       	movw	r28, r24
     c42:	d6 95       	lsr	r29
     c44:	c7 95       	ror	r28
     c46:	d6 95       	lsr	r29
     c48:	c7 95       	ror	r28
     c4a:	d6 95       	lsr	r29
     c4c:	c7 95       	ror	r28
     c4e:	9e 01       	movw	r18, r28
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	ce 01       	movw	r24, r28
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	97 01       	movw	r18, r14
     c68:	28 1b       	sub	r18, r24
     c6a:	39 0b       	sbc	r19, r25
     c6c:	c9 01       	movw	r24, r18
     c6e:	80 5d       	subi	r24, 0xD0	; 208
     c70:	80 83       	st	Z, r24
     c72:	42 50       	subi	r20, 0x02	; 2
     c74:	51 09       	sbc	r21, r1
     c76:	55 23       	and	r21, r21
     c78:	24 f1       	brlt	.+72     	; 0xcc2 <_ZL5uitosjPch+0xa4>
     c7a:	20 97       	sbiw	r28, 0x00	; 0
     c7c:	e1 f0       	breq	.+56     	; 0xcb6 <_ZL5uitosjPch+0x98>
     c7e:	9e 01       	movw	r18, r28
     c80:	ad ec       	ldi	r26, 0xCD	; 205
     c82:	bc ec       	ldi	r27, 0xCC	; 204
     c84:	17 d3       	rcall	.+1582   	; 0x12b4 <__umulhisi3>
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	bc 01       	movw	r22, r24
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	9c 01       	movw	r18, r24
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	26 0f       	add	r18, r22
     ca8:	37 1f       	adc	r19, r23
     caa:	c2 1b       	sub	r28, r18
     cac:	d3 0b       	sbc	r29, r19
     cae:	2c 2f       	mov	r18, r28
     cb0:	20 5d       	subi	r18, 0xD0	; 208
     cb2:	ec 01       	movw	r28, r24
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <_ZL5uitosjPch+0x9a>
     cb6:	20 e2       	ldi	r18, 0x20	; 32
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	20 83       	st	Z, r18
     cbc:	41 50       	subi	r20, 0x01	; 1
     cbe:	51 09       	sbc	r21, r1
     cc0:	e0 f6       	brcc	.-72     	; 0xc7a <_ZL5uitosjPch+0x5c>
     cc2:	cd 2b       	or	r28, r29
     cc4:	19 f0       	breq	.+6      	; 0xccc <_ZL5uitosjPch+0xae>
     cc6:	8a e2       	ldi	r24, 0x2A	; 42
     cc8:	f8 01       	movw	r30, r16
     cca:	80 83       	st	Z, r24
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	08 95       	ret

00000cda <_ZN12_GLOBAL__N_16Timer24taskEv>:
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
     cec:	8c da       	rcall	.-2792   	; 0x206 <_ZN6Button6getBF1Ev>
     cee:	7c 01       	movw	r14, r24
     cf0:	8d da       	rcall	.-2790   	; 0x20c <_ZN6Button6getBF2Ev>
     cf2:	6e e1       	ldi	r22, 0x1E	; 30
     cf4:	8c ec       	ldi	r24, 0xCC	; 204
     cf6:	20 dd       	rcall	.-1472   	; 0x738 <_ZN2LL7read541ENS_5HC541Eh>
     cf8:	88 a7       	std	Y+40, r24	; 0x28
     cfa:	02 dc       	rcall	.-2044   	; 0x500 <_Z12displacementc>
     cfc:	8c 01       	movw	r16, r24
     cfe:	08 50       	subi	r16, 0x08	; 8
     d00:	11 09       	sbc	r17, r1
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	db da       	rcall	.-2634   	; 0x2be <_Znwj>
     d08:	6c 01       	movw	r12, r24
     d0a:	fc 01       	movw	r30, r24
     d0c:	10 86       	std	Z+8, r1	; 0x08
     d0e:	88 a5       	ldd	r24, Y+40	; 0x28
     d10:	dc dc       	rcall	.-1608   	; 0x6ca <_Z6mirrorc>
     d12:	f6 01       	movw	r30, r12
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	ac 01       	movw	r20, r24
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <_ZN12_GLOBAL__N_16Timer24taskEv+0x4a>
     d20:	55 95       	asr	r21
     d22:	47 95       	ror	r20
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <_ZN12_GLOBAL__N_16Timer24taskEv+0x46>
     d28:	40 ff       	sbrs	r20, 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <_ZN12_GLOBAL__N_16Timer24taskEv+0x56>
     d2c:	41 e3       	ldi	r20, 0x31	; 49
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <_ZN12_GLOBAL__N_16Timer24taskEv+0x58>
     d30:	40 e3       	ldi	r20, 0x30	; 48
     d32:	41 93       	st	Z+, r20
     d34:	2f 5f       	subi	r18, 0xFF	; 255
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	28 30       	cpi	r18, 0x08	; 8
     d3a:	31 05       	cpc	r19, r1
     d3c:	71 f7       	brne	.-36     	; 0xd1a <_ZN12_GLOBAL__N_16Timer24taskEv+0x40>
     d3e:	b6 01       	movw	r22, r12
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	7c db       	rcall	.-2312   	; 0x43c <_ZN3LCD5printEhPc>
     d44:	6a a1       	ldd	r22, Y+34	; 0x22
     d46:	7b a1       	ldd	r23, Y+35	; 0x23
     d48:	82 e3       	ldi	r24, 0x32	; 50
     d4a:	86 9f       	mul	r24, r22
     d4c:	90 01       	movw	r18, r0
     d4e:	87 9f       	mul	r24, r23
     d50:	30 0d       	add	r19, r0
     d52:	11 24       	eor	r1, r1
     d54:	4c a1       	ldd	r20, Y+36	; 0x24
     d56:	58 a1       	ldd	r21, Y+32	; 0x20
     d58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d5c:	80 0f       	add	r24, r16
     d5e:	91 1f       	adc	r25, r17
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	0c f4       	brge	.+2      	; 0xd68 <_ZN12_GLOBAL__N_16Timer24taskEv+0x8e>
     d66:	c9 01       	movw	r24, r18
     d68:	31 95       	neg	r19
     d6a:	21 95       	neg	r18
     d6c:	31 09       	sbc	r19, r1
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	0c f4       	brge	.+2      	; 0xd76 <_ZN12_GLOBAL__N_16Timer24taskEv+0x9c>
     d74:	c9 01       	movw	r24, r18
     d76:	9d 8f       	std	Y+29, r25	; 0x1d
     d78:	8c 8f       	std	Y+28, r24	; 0x1c
     d7a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d7c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d7e:	f8 01       	movw	r30, r16
     d80:	e2 1b       	sub	r30, r18
     d82:	f3 0b       	sbc	r31, r19
     d84:	9f 01       	movw	r18, r30
     d86:	1f 8f       	std	Y+31, r17	; 0x1f
     d88:	0e 8f       	std	Y+30, r16	; 0x1e
     d8a:	50 9f       	mul	r21, r16
     d8c:	f0 01       	movw	r30, r0
     d8e:	51 9f       	mul	r21, r17
     d90:	f0 0d       	add	r31, r0
     d92:	11 24       	eor	r1, r1
     d94:	77 27       	eor	r23, r23
     d96:	7b d2       	rcall	.+1270   	; 0x128e <__divmodhi4>
     d98:	6f 01       	movw	r12, r30
     d9a:	c6 0e       	add	r12, r22
     d9c:	d7 1e       	adc	r13, r23
     d9e:	42 9f       	mul	r20, r18
     da0:	c0 01       	movw	r24, r0
     da2:	43 9f       	mul	r20, r19
     da4:	90 0d       	add	r25, r0
     da6:	11 24       	eor	r1, r1
     da8:	c8 0e       	add	r12, r24
     daa:	d9 1e       	adc	r13, r25
     dac:	88 a5       	ldd	r24, Y+40	; 0x28
     dae:	8d dc       	rcall	.-1766   	; 0x6ca <_Z6mirrorc>
     db0:	f7 01       	movw	r30, r14
     db2:	38 96       	adiw	r30, 0x08	; 8
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	ac 01       	movw	r20, r24
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <_ZN12_GLOBAL__N_16Timer24taskEv+0xea>
     dc0:	55 95       	asr	r21
     dc2:	47 95       	ror	r20
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <_ZN12_GLOBAL__N_16Timer24taskEv+0xe6>
     dc8:	40 ff       	sbrs	r20, 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <_ZN12_GLOBAL__N_16Timer24taskEv+0xf6>
     dcc:	4a e2       	ldi	r20, 0x2A	; 42
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN12_GLOBAL__N_16Timer24taskEv+0xf8>
     dd0:	4e e2       	ldi	r20, 0x2E	; 46
     dd2:	42 93       	st	-Z, r20
     dd4:	2f 5f       	subi	r18, 0xFF	; 255
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	28 30       	cpi	r18, 0x08	; 8
     dda:	31 05       	cpc	r19, r1
     ddc:	71 f7       	brne	.-36     	; 0xdba <_ZN12_GLOBAL__N_16Timer24taskEv+0xe0>
     dde:	11 23       	and	r17, r17
     de0:	3c f4       	brge	.+14     	; 0xdf0 <_ZN12_GLOBAL__N_16Timer24taskEv+0x116>
     de2:	11 95       	neg	r17
     de4:	01 95       	neg	r16
     de6:	11 09       	sbc	r17, r1
     de8:	8d e2       	ldi	r24, 0x2D	; 45
     dea:	f7 01       	movw	r30, r14
     dec:	81 87       	std	Z+9, r24	; 0x09
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <_ZN12_GLOBAL__N_16Timer24taskEv+0x11c>
     df0:	8b e2       	ldi	r24, 0x2B	; 43
     df2:	f7 01       	movw	r30, r14
     df4:	81 87       	std	Z+9, r24	; 0x09
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	b7 01       	movw	r22, r14
     dfa:	66 5f       	subi	r22, 0xF6	; 246
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	c8 01       	movw	r24, r16
     e00:	0e df       	rcall	.-484    	; 0xc1e <_ZL5uitosjPch>
     e02:	dd 20       	and	r13, r13
     e04:	44 f4       	brge	.+16     	; 0xe16 <_ZN12_GLOBAL__N_16Timer24taskEv+0x13c>
     e06:	88 27       	eor	r24, r24
     e08:	99 27       	eor	r25, r25
     e0a:	8c 19       	sub	r24, r12
     e0c:	9d 09       	sbc	r25, r13
     e0e:	2d e2       	ldi	r18, 0x2D	; 45
     e10:	f7 01       	movw	r30, r14
     e12:	23 87       	std	Z+11, r18	; 0x0b
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <_ZN12_GLOBAL__N_16Timer24taskEv+0x144>
     e16:	8b e2       	ldi	r24, 0x2B	; 43
     e18:	f7 01       	movw	r30, r14
     e1a:	83 87       	std	Z+11, r24	; 0x0b
     e1c:	c6 01       	movw	r24, r12
     e1e:	b7 01       	movw	r22, r14
     e20:	64 5f       	subi	r22, 0xF4	; 244
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	44 e0       	ldi	r20, 0x04	; 4
     e26:	fb de       	rcall	.-522    	; 0xc1e <_ZL5uitosjPch>
     e28:	28 89       	ldd	r18, Y+16	; 0x10
     e2a:	39 89       	ldd	r19, Y+17	; 0x11
     e2c:	c9 01       	movw	r24, r18
     e2e:	8c 19       	sub	r24, r12
     e30:	9d 09       	sbc	r25, r13
     e32:	2c 0d       	add	r18, r12
     e34:	3d 1d       	adc	r19, r13
     e36:	2f 3f       	cpi	r18, 0xFF	; 255
     e38:	31 05       	cpc	r19, r1
     e3a:	19 f0       	breq	.+6      	; 0xe42 <_ZN12_GLOBAL__N_16Timer24taskEv+0x168>
     e3c:	14 f0       	brlt	.+4      	; 0xe42 <_ZN12_GLOBAL__N_16Timer24taskEv+0x168>
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	91 05       	cpc	r25, r1
     e46:	19 f0       	breq	.+6      	; 0xe4e <_ZN12_GLOBAL__N_16Timer24taskEv+0x174>
     e48:	14 f0       	brlt	.+4      	; 0xe4e <_ZN12_GLOBAL__N_16Timer24taskEv+0x174>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	69 01       	movw	r12, r18
     e50:	33 23       	and	r19, r19
     e52:	14 f4       	brge	.+4      	; 0xe58 <_ZN12_GLOBAL__N_16Timer24taskEv+0x17e>
     e54:	c1 2c       	mov	r12, r1
     e56:	d1 2c       	mov	r13, r1
     e58:	c0 92 b3 00 	sts	0x00B3, r12
     e5c:	99 23       	and	r25, r25
     e5e:	14 f4       	brge	.+4      	; 0xe64 <_ZN12_GLOBAL__N_16Timer24taskEv+0x18a>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	80 93 b4 00 	sts	0x00B4, r24
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <__vector_11>:
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	0b b6       	in	r0, 0x3b	; 59
     e86:	0f 92       	push	r0
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
     ea0:	86 b5       	in	r24, 0x26	; 38
     ea2:	80 93 f7 01 	sts	0x01F7, r24
     ea6:	80 91 84 00 	lds	r24, 0x0084
     eaa:	80 93 f6 01 	sts	0x01F6, r24
     eae:	88 ef       	ldi	r24, 0xF8	; 248
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	ac d1       	rcall	.+856    	; 0x120c <_Z9isrAppendR4Task>
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <_ZN5Wheel3setEi>:
     eda:	90 93 09 02 	sts	0x0209, r25
     ede:	80 93 08 02 	sts	0x0208, r24
     ee2:	08 95       	ret

00000ee4 <_ZN5Wheel9getSensorEv>:
     ee4:	80 91 20 02 	lds	r24, 0x0220
     ee8:	08 95       	ret

00000eea <_ZN5Wheel8setSpeedEi>:
     eea:	90 93 0b 02 	sts	0x020B, r25
     eee:	80 93 0a 02 	sts	0x020A, r24
     ef2:	08 95       	ret

00000ef4 <_ZN5Wheel4moveENS_8_commandE>:
     ef4:	cf 93       	push	r28
     ef6:	c8 2f       	mov	r28, r24
     ef8:	81 11       	cpse	r24, r1
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <_ZN5Wheel4moveENS_8_commandE+0x14>
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	80 93 b0 00 	sts	0x00B0, r24
     f02:	80 e8       	ldi	r24, 0x80	; 128
     f04:	4a dc       	rcall	.-1900   	; 0x79a <_ZN2LL16backMotorControlEc>
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <_ZN5Wheel4moveENS_8_commandE+0x22>
     f08:	83 70       	andi	r24, 0x03	; 3
     f0a:	84 68       	ori	r24, 0x84	; 132
     f0c:	46 dc       	rcall	.-1908   	; 0x79a <_ZN2LL16backMotorControlEc>
     f0e:	c0 7f       	andi	r28, 0xF0	; 240
     f10:	c3 60       	ori	r28, 0x03	; 3
     f12:	c0 93 b0 00 	sts	0x00B0, r28
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN12_GLOBAL__N_112UsrCountTask4taskEv>:
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	88 85       	ldd	r24, Y+8	; 0x08
     f22:	88 23       	and	r24, r24
     f24:	81 f0       	breq	.+32     	; 0xf46 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x2c>
     f26:	10 92 f1 01 	sts	0x01F1, r1
     f2a:	10 92 f0 01 	sts	0x01F0, r1
     f2e:	10 92 f3 01 	sts	0x01F3, r1
     f32:	10 92 f2 01 	sts	0x01F2, r1
     f36:	86 b5       	in	r24, 0x26	; 38
     f38:	80 93 f5 01 	sts	0x01F5, r24
     f3c:	80 91 84 00 	lds	r24, 0x0084
     f40:	80 93 f4 01 	sts	0x01F4, r24
     f44:	18 86       	std	Y+8, r1	; 0x08
     f46:	1f 82       	std	Y+7, r1	; 0x07
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	8a 30       	cpi	r24, 0x0A	; 10
     f4e:	91 05       	cpc	r25, r1
     f50:	60 f4       	brcc	.+24     	; 0xf6a <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x50>
     f52:	80 e3       	ldi	r24, 0x30	; 48
     f54:	8c 83       	std	Y+4, r24	; 0x04
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	80 91 79 00 	lds	r24, 0x0079
     f5c:	4a e0       	ldi	r20, 0x0A	; 10
     f5e:	be 01       	movw	r22, r28
     f60:	6a 5f       	subi	r22, 0xFA	; 250
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	f4 d2       	rcall	.+1512   	; 0x1550 <__itoa_ncheck>
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x7c>
     f6a:	84 36       	cpi	r24, 0x64	; 100
     f6c:	91 05       	cpc	r25, r1
     f6e:	58 f4       	brcc	.+22     	; 0xf86 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x6c>
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	8c 83       	std	Y+4, r24	; 0x04
     f74:	80 91 79 00 	lds	r24, 0x0079
     f78:	4a e0       	ldi	r20, 0x0A	; 10
     f7a:	be 01       	movw	r22, r28
     f7c:	6b 5f       	subi	r22, 0xFB	; 251
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	e6 d2       	rcall	.+1484   	; 0x1550 <__itoa_ncheck>
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x7c>
     f86:	80 91 79 00 	lds	r24, 0x0079
     f8a:	4a e0       	ldi	r20, 0x0A	; 10
     f8c:	be 01       	movw	r22, r28
     f8e:	6c 5f       	subi	r22, 0xFC	; 252
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	dd d2       	rcall	.+1466   	; 0x1550 <__itoa_ncheck>
     f96:	be 01       	movw	r22, r28
     f98:	6c 5f       	subi	r22, 0xFC	; 252
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	4e da       	rcall	.-2916   	; 0x43c <_ZN3LCD5printEhPc>
     fa0:	56 b5       	in	r21, 0x26	; 38
     fa2:	40 91 84 00 	lds	r20, 0x0084
     fa6:	20 91 f0 01 	lds	r18, 0x01F0
     faa:	30 91 f1 01 	lds	r19, 0x01F1
     fae:	80 91 f2 01 	lds	r24, 0x01F2
     fb2:	90 91 f3 01 	lds	r25, 0x01F3
     fb6:	28 0f       	add	r18, r24
     fb8:	39 1f       	adc	r19, r25
     fba:	25 0f       	add	r18, r21
     fbc:	31 1d       	adc	r19, r1
     fbe:	24 0f       	add	r18, r20
     fc0:	31 1d       	adc	r19, r1
     fc2:	80 91 f5 01 	lds	r24, 0x01F5
     fc6:	28 1b       	sub	r18, r24
     fc8:	31 09       	sbc	r19, r1
     fca:	80 91 f4 01 	lds	r24, 0x01F4
     fce:	28 1b       	sub	r18, r24
     fd0:	31 09       	sbc	r19, r1
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	28 17       	cp	r18, r24
     fd8:	39 07       	cpc	r19, r25
     fda:	18 f4       	brcc	.+6      	; 0xfe2 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0xc8>
     fdc:	ce 01       	movw	r24, r28
     fde:	43 d1       	rcall	.+646    	; 0x1266 <_Z9kerAppendR4Task>
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0xcc>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	87 df       	rcall	.-242    	; 0xef4 <_ZN5Wheel4moveENS_8_commandE>
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <_ZN5Wheel4setPEi>:
     fec:	90 93 19 02 	sts	0x0219, r25
     ff0:	80 93 18 02 	sts	0x0218, r24
     ff4:	08 95       	ret

00000ff6 <_ZN5Wheel4setIEi>:
     ff6:	90 93 1b 02 	sts	0x021B, r25
     ffa:	80 93 1a 02 	sts	0x021A, r24
     ffe:	08 95       	ret

00001000 <_ZN5Wheel4setDEi>:
    1000:	90 93 1d 02 	sts	0x021D, r25
    1004:	80 93 1c 02 	sts	0x021C, r24
    1008:	08 95       	ret

0000100a <_GLOBAL__sub_I___vector_11>:
    100a:	8a ef       	ldi	r24, 0xFA	; 250
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	56 d0       	rcall	.+172    	; 0x10bc <_ZN7ElementC1Ev>
    class Timer2: public Task  {
        public:
			unsigned char L_speed_limit, R_speed_limit;
            unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
            unsigned int L_count, R_count,speed;
            Timer2(void) {
    1010:	8a e4       	ldi	r24, 0x4A	; 74
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	90 93 f9 01 	sts	0x01F9, r25
    1018:	80 93 f8 01 	sts	0x01F8, r24
    enum _TCCR2A {	A_CON = 0b10000011, B_CON = 0b00100011, DISCON = 0b11};
	
	class PIDcontrol {
	public:
		PIDcontrol(void){
			iTerm = lastInput = 0;	
    101c:	10 92 0f 02 	sts	0x020F, r1
    1020:	10 92 0e 02 	sts	0x020E, r1
    1024:	10 92 0d 02 	sts	0x020D, r1
    1028:	10 92 0c 02 	sts	0x020C, r1
    102c:	10 92 13 02 	sts	0x0213, r1
    1030:	10 92 12 02 	sts	0x0212, r1
    1034:	10 92 11 02 	sts	0x0211, r1
    1038:	10 92 10 02 	sts	0x0210, r1
    103c:	10 92 17 02 	sts	0x0217, r1
    1040:	10 92 16 02 	sts	0x0216, r1
    1044:	10 92 15 02 	sts	0x0215, r1
    1048:	10 92 14 02 	sts	0x0214, r1
        public:
			unsigned char L_speed_limit, R_speed_limit;
            unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
            unsigned int L_count, R_count,speed;
            Timer2(void) {
                DDRD |= _BV(7);
    104c:	57 9a       	sbi	0x0a, 7	; 10
                DDRD |= _BV(6);
    104e:	56 9a       	sbi	0x0a, 6	; 10
                TCCR2A = DISCON;
    1050:	e0 eb       	ldi	r30, 0xB0	; 176
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	90 83       	st	Z, r25
                TCCR2B = 0b111;
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	80 93 b1 00 	sts	0x00B1, r24
                TCCR0B = TCCR1B = 7;
    105e:	80 93 81 00 	sts	0x0081, r24
    1062:	85 bd       	out	0x25, r24	; 37
                ASSR &= ~_BV(AS2);
    1064:	a6 eb       	ldi	r26, 0xB6	; 182
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	8c 91       	ld	r24, X
    106a:	8f 7d       	andi	r24, 0xDF	; 223
    106c:	8c 93       	st	X, r24
				kI = 20;
				kD = 10;*/
            }
            void move(unsigned char command) {
                if (command == Wheel::STOP) {
                    TCCR2A = DISCON;
    106e:	90 83       	st	Z, r25
                    LL::backMotorControl(ON);
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	93 db       	rcall	.-2266   	; 0x79a <_ZN2LL16backMotorControlEc>
                TCCR2A = DISCON;
                TCCR2B = 0b111;
                TCCR0B = TCCR1B = 7;
                ASSR &= ~_BV(AS2);
                move(Wheel::STOP);
                L_OCR = R_OCR = 128;
    1074:	80 e8       	ldi	r24, 0x80	; 128
    1076:	80 93 b4 00 	sts	0x00B4, r24
    107a:	80 93 b3 00 	sts	0x00B3, r24
				choosesensor=0;
    107e:	10 92 1f 02 	sts	0x021F, r1
    1082:	10 92 1e 02 	sts	0x021E, r1
                TIMSK2 |= _BV(TOIE2);	// enable overflow interrupt
    1086:	e0 e7       	ldi	r30, 0x70	; 112
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	80 83       	st	Z, r24
				speed=60;
    1090:	8c e3       	ldi	r24, 0x3C	; 60
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 09 02 	sts	0x0209, r25
    1098:	80 93 08 02 	sts	0x0208, r24
				trackspeed = 5;
    109c:	85 e0       	ldi	r24, 0x05	; 5
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	90 93 0b 02 	sts	0x020B, r25
    10a4:	80 93 0a 02 	sts	0x020A, r24
    10a8:	87 ee       	ldi	r24, 0xE7	; 231
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	07 d0       	rcall	.+14     	; 0x10bc <_ZN7ElementC1Ev>

    }	timer2;
	
		 unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
		 unsigned int L_count, R_count;
		 class UsrCountTask :public Task{
    10ae:	80 e5       	ldi	r24, 0x50	; 80
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	90 93 e6 01 	sts	0x01E6, r25
    10b6:	80 93 e5 01 	sts	0x01E5, r24
    10ba:	08 95       	ret

000010bc <_ZN7ElementC1Ev>:
    10bc:	fc 01       	movw	r30, r24
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	08 95       	ret

000010c4 <_ZN4ListC1Ev>:
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	ec 01       	movw	r28, r24
    10ca:	f8 df       	rcall	.-16     	; 0x10bc <_ZN7ElementC1Ev>
    10cc:	db 83       	std	Y+3, r29	; 0x03
    10ce:	ca 83       	std	Y+2, r28	; 0x02
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <_ZN4List7getNextEP7Element>:
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <_ZN4List7getNextEP7Element+0x8>
    10dc:	bc 01       	movw	r22, r24
    10de:	fb 01       	movw	r30, r22
    10e0:	20 81       	ld	r18, Z
    10e2:	31 81       	ldd	r19, Z+1	; 0x01
    10e4:	28 17       	cp	r18, r24
    10e6:	39 07       	cpc	r19, r25
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <_ZN4List7getNextEP7Element+0x1a>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	08 95       	ret
    10f0:	82 2f       	mov	r24, r18
    10f2:	93 2f       	mov	r25, r19
    10f4:	08 95       	ret

000010f6 <_ZN4List4pushER7Element>:
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	e8 17       	cp	r30, r24
    10fe:	f9 07       	cpc	r31, r25
    1100:	11 f4       	brne	.+4      	; 0x1106 <_ZN4List4pushER7Element+0x10>
    1102:	73 83       	std	Z+3, r23	; 0x03
    1104:	62 83       	std	Z+2, r22	; 0x02
    1106:	db 01       	movw	r26, r22
    1108:	8d 93       	st	X+, r24
    110a:	9c 93       	st	X, r25
    110c:	71 83       	std	Z+1, r23	; 0x01
    110e:	60 83       	st	Z, r22
    1110:	08 95       	ret

00001112 <_ZN4List6appendER7Element>:
    1112:	dc 01       	movw	r26, r24
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	ed 91       	ld	r30, X+
    1118:	fc 91       	ld	r31, X
    111a:	13 97       	sbiw	r26, 0x03	; 3
    111c:	71 83       	std	Z+1, r23	; 0x01
    111e:	60 83       	st	Z, r22
    1120:	13 96       	adiw	r26, 0x03	; 3
    1122:	7c 93       	st	X, r23
    1124:	6e 93       	st	-X, r22
    1126:	12 97       	sbiw	r26, 0x02	; 2
    1128:	fb 01       	movw	r30, r22
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
    112e:	08 95       	ret

00001130 <_ZN4List3popEv>:
    1130:	dc 01       	movw	r26, r24
    1132:	ed 91       	ld	r30, X+
    1134:	fc 91       	ld	r31, X
    1136:	11 97       	sbiw	r26, 0x01	; 1
    1138:	8e 17       	cp	r24, r30
    113a:	9f 07       	cpc	r25, r31
    113c:	79 f0       	breq	.+30     	; 0x115c <_ZN4List3popEv+0x2c>
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	8a 17       	cp	r24, r26
    114a:	9b 07       	cpc	r25, r27
    114c:	21 f4       	brne	.+8      	; 0x1156 <_ZN4List3popEv+0x26>
    114e:	13 96       	adiw	r26, 0x03	; 3
    1150:	9c 93       	st	X, r25
    1152:	8e 93       	st	-X, r24
    1154:	12 97       	sbiw	r26, 0x02	; 2
    1156:	f1 83       	std	Z+1, r31	; 0x01
    1158:	e0 83       	st	Z, r30
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <_ZN4List3popEv+0x30>
    115c:	e0 e0       	ldi	r30, 0x00	; 0
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	cf 01       	movw	r24, r30
    1162:	08 95       	ret

00001164 <_ZN4List6removeER7Element>:
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ac 01       	movw	r20, r24
    116a:	fc 01       	movw	r30, r24
    116c:	17 c0       	rjmp	.+46     	; 0x119c <_ZN4List6removeER7Element+0x38>
    116e:	26 17       	cp	r18, r22
    1170:	37 07       	cpc	r19, r23
    1172:	99 f4       	brne	.+38     	; 0x119a <_ZN4List6removeER7Element+0x36>
    1174:	df 01       	movw	r26, r30
    1176:	ec 01       	movw	r28, r24
    1178:	2a 81       	ldd	r18, Y+2	; 0x02
    117a:	3b 81       	ldd	r19, Y+3	; 0x03
    117c:	26 17       	cp	r18, r22
    117e:	37 07       	cpc	r19, r23
    1180:	11 f4       	brne	.+4      	; 0x1186 <_ZN4List6removeER7Element+0x22>
    1182:	fb 83       	std	Y+3, r31	; 0x03
    1184:	ea 83       	std	Y+2, r30	; 0x02
    1186:	eb 01       	movw	r28, r22
    1188:	88 81       	ld	r24, Y
    118a:	99 81       	ldd	r25, Y+1	; 0x01
    118c:	8d 93       	st	X+, r24
    118e:	9c 93       	st	X, r25
    1190:	79 83       	std	Y+1, r23	; 0x01
    1192:	68 83       	st	Y, r22
    1194:	8e 2f       	mov	r24, r30
    1196:	9f 2f       	mov	r25, r31
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <_ZN4List6removeER7Element+0x46>
    119a:	f9 01       	movw	r30, r18
    119c:	20 81       	ld	r18, Z
    119e:	31 81       	ldd	r19, Z+1	; 0x01
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	21 f7       	brne	.-56     	; 0x116e <_ZN4List6removeER7Element+0xa>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <_ZN5QueueC1EPS_>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	ec 01       	movw	r28, r24
    11ba:	8b 01       	movw	r16, r22
    11bc:	83 df       	rcall	.-250    	; 0x10c4 <_ZN4ListC1Ev>
    11be:	1d 83       	std	Y+5, r17	; 0x05
    11c0:	0c 83       	std	Y+4, r16	; 0x04
    11c2:	1e 82       	std	Y+6, r1	; 0x06
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <_ZN5Queue6appendER4Task>:
    11ce:	fc 01       	movw	r30, r24
    11d0:	26 81       	ldd	r18, Z+6	; 0x06
    11d2:	22 23       	and	r18, r18
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <_ZN5Queue6appendER4Task+0x14>
    11d6:	6e 5f       	subi	r22, 0xFE	; 254
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	89 e2       	ldi	r24, 0x29	; 41
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	8b cf       	rjmp	.-234    	; 0x10f6 <_ZN4List4pushER7Element>
    11e0:	08 95       	ret
    11e2:	6e 5f       	subi	r22, 0xFE	; 254
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	95 cf       	rjmp	.-214    	; 0x1112 <_ZN4List6appendER7Element>
    11e8:	08 95       	ret

000011ea <_ZN5Queue3popEv>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8e 83       	std	Y+6, r24	; 0x06
    11f4:	ce 01       	movw	r24, r28
    11f6:	9c df       	rcall	.-200    	; 0x1130 <_ZN4List3popEv>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	11 f0       	breq	.+4      	; 0x1200 <_ZN5Queue3popEv+0x16>
    11fc:	02 97       	sbiw	r24, 0x02	; 2
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <_ZN5Queue3popEv+0x1a>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	1e 82       	std	Y+6, r1	; 0x06
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <_Z9isrAppendR4Task>:
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	bc 01       	movw	r22, r24
    1216:	82 e2       	ldi	r24, 0x22	; 34
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	d9 df       	rcall	.-78     	; 0x11ce <_ZN5Queue6appendER4Task>
    121c:	80 91 21 02 	lds	r24, 0x0221
    1220:	81 11       	cpse	r24, r1
    1222:	1c c0       	rjmp	.+56     	; 0x125c <_Z9isrAppendR4Task+0x50>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 21 02 	sts	0x0221, r24
    122a:	78 94       	sei
    122c:	c2 e2       	ldi	r28, 0x22	; 34
    122e:	d2 e0       	ldi	r29, 0x02	; 2
    1230:	8e 01       	movw	r16, r28
    1232:	ce 01       	movw	r24, r28
    1234:	da df       	rcall	.-76     	; 0x11ea <_ZN5Queue3popEv>
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	49 f0       	breq	.+18     	; 0x124c <_Z9isrAppendR4Task+0x40>
    123a:	dc 01       	movw	r26, r24
    123c:	ed 91       	ld	r30, X+
    123e:	fc 91       	ld	r31, X
    1240:	01 90       	ld	r0, Z+
    1242:	f0 81       	ld	r31, Z
    1244:	e0 2d       	mov	r30, r0
    1246:	09 95       	icall
    1248:	e8 01       	movw	r28, r16
    124a:	f3 cf       	rjmp	.-26     	; 0x1232 <_Z9isrAppendR4Task+0x26>
    124c:	0c 80       	ldd	r0, Y+4	; 0x04
    124e:	dd 81       	ldd	r29, Y+5	; 0x05
    1250:	c0 2d       	mov	r28, r0
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	71 f7       	brne	.-36     	; 0x1232 <_Z9isrAppendR4Task+0x26>
    1256:	f8 94       	cli
    1258:	10 92 21 02 	sts	0x0221, r1
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_Z9kerAppendR4Task>:
    1266:	bc 01       	movw	r22, r24
    1268:	89 e2       	ldi	r24, 0x29	; 41
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	b0 cf       	rjmp	.-160    	; 0x11ce <_ZN5Queue6appendER4Task>
    126e:	08 95       	ret

00001270 <_Z7usrCallR4Task>:
    1270:	f8 94       	cli
    1272:	cc df       	rcall	.-104    	; 0x120c <_Z9isrAppendR4Task>
    1274:	78 94       	sei
    1276:	08 95       	ret

00001278 <_GLOBAL__sub_I__Z5__seiv>:
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	89 e2       	ldi	r24, 0x29	; 41
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	97 df       	rcall	.-210    	; 0x11b0 <_ZN5QueueC1EPS_>
    1282:	69 e2       	ldi	r22, 0x29	; 41
    1284:	72 e0       	ldi	r23, 0x02	; 2
    1286:	82 e2       	ldi	r24, 0x22	; 34
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	92 cf       	rjmp	.-220    	; 0x11b0 <_ZN5QueueC1EPS_>
    128c:	08 95       	ret

0000128e <__divmodhi4>:
    128e:	97 fb       	bst	r25, 7
    1290:	07 2e       	mov	r0, r23
    1292:	16 f4       	brtc	.+4      	; 0x1298 <__divmodhi4+0xa>
    1294:	00 94       	com	r0
    1296:	06 d0       	rcall	.+12     	; 0x12a4 <__divmodhi4_neg1>
    1298:	77 fd       	sbrc	r23, 7
    129a:	08 d0       	rcall	.+16     	; 0x12ac <__divmodhi4_neg2>
    129c:	1e d0       	rcall	.+60     	; 0x12da <__udivmodhi4>
    129e:	07 fc       	sbrc	r0, 7
    12a0:	05 d0       	rcall	.+10     	; 0x12ac <__divmodhi4_neg2>
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__divmodhi4_exit>

000012a4 <__divmodhi4_neg1>:
    12a4:	90 95       	com	r25
    12a6:	81 95       	neg	r24
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__divmodhi4_neg2>:
    12ac:	70 95       	com	r23
    12ae:	61 95       	neg	r22
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255

000012b2 <__divmodhi4_exit>:
    12b2:	08 95       	ret

000012b4 <__umulhisi3>:
    12b4:	a2 9f       	mul	r26, r18
    12b6:	b0 01       	movw	r22, r0
    12b8:	b3 9f       	mul	r27, r19
    12ba:	c0 01       	movw	r24, r0
    12bc:	a3 9f       	mul	r26, r19
    12be:	70 0d       	add	r23, r0
    12c0:	81 1d       	adc	r24, r1
    12c2:	11 24       	eor	r1, r1
    12c4:	91 1d       	adc	r25, r1
    12c6:	b2 9f       	mul	r27, r18
    12c8:	70 0d       	add	r23, r0
    12ca:	81 1d       	adc	r24, r1
    12cc:	11 24       	eor	r1, r1
    12ce:	91 1d       	adc	r25, r1
    12d0:	08 95       	ret

000012d2 <__tablejump_elpm__>:
    12d2:	07 90       	elpm	r0, Z+
    12d4:	f6 91       	elpm	r31, Z
    12d6:	e0 2d       	mov	r30, r0
    12d8:	09 94       	ijmp

000012da <__udivmodhi4>:
    12da:	aa 1b       	sub	r26, r26
    12dc:	bb 1b       	sub	r27, r27
    12de:	51 e1       	ldi	r21, 0x11	; 17
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <__udivmodhi4_ep>

000012e2 <__udivmodhi4_loop>:
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	a6 17       	cp	r26, r22
    12e8:	b7 07       	cpc	r27, r23
    12ea:	10 f0       	brcs	.+4      	; 0x12f0 <__udivmodhi4_ep>
    12ec:	a6 1b       	sub	r26, r22
    12ee:	b7 0b       	sbc	r27, r23

000012f0 <__udivmodhi4_ep>:
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	5a 95       	dec	r21
    12f6:	a9 f7       	brne	.-22     	; 0x12e2 <__udivmodhi4_loop>
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	08 95       	ret

00001302 <malloc>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	10 f4       	brcc	.+4      	; 0x1310 <malloc+0xe>
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	e0 91 32 02 	lds	r30, 0x0232
    1314:	f0 91 33 02 	lds	r31, 0x0233
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	30 97       	sbiw	r30, 0x00	; 0
    1322:	39 f1       	breq	.+78     	; 0x1372 <malloc+0x70>
    1324:	40 81       	ld	r20, Z
    1326:	51 81       	ldd	r21, Z+1	; 0x01
    1328:	48 17       	cp	r20, r24
    132a:	59 07       	cpc	r21, r25
    132c:	b8 f0       	brcs	.+46     	; 0x135c <malloc+0x5a>
    132e:	48 17       	cp	r20, r24
    1330:	59 07       	cpc	r21, r25
    1332:	71 f4       	brne	.+28     	; 0x1350 <malloc+0x4e>
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	10 97       	sbiw	r26, 0x00	; 0
    133a:	29 f0       	breq	.+10     	; 0x1346 <malloc+0x44>
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	9c 93       	st	X, r25
    1340:	8e 93       	st	-X, r24
    1342:	12 97       	sbiw	r26, 0x02	; 2
    1344:	2c c0       	rjmp	.+88     	; 0x139e <malloc+0x9c>
    1346:	90 93 33 02 	sts	0x0233, r25
    134a:	80 93 32 02 	sts	0x0232, r24
    134e:	27 c0       	rjmp	.+78     	; 0x139e <malloc+0x9c>
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	31 f0       	breq	.+12     	; 0x1362 <malloc+0x60>
    1356:	42 17       	cp	r20, r18
    1358:	53 07       	cpc	r21, r19
    135a:	18 f0       	brcs	.+6      	; 0x1362 <malloc+0x60>
    135c:	a9 01       	movw	r20, r18
    135e:	db 01       	movw	r26, r22
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <malloc+0x62>
    1362:	ef 01       	movw	r28, r30
    1364:	9a 01       	movw	r18, r20
    1366:	bd 01       	movw	r22, r26
    1368:	df 01       	movw	r26, r30
    136a:	02 80       	ldd	r0, Z+2	; 0x02
    136c:	f3 81       	ldd	r31, Z+3	; 0x03
    136e:	e0 2d       	mov	r30, r0
    1370:	d7 cf       	rjmp	.-82     	; 0x1320 <malloc+0x1e>
    1372:	21 15       	cp	r18, r1
    1374:	31 05       	cpc	r19, r1
    1376:	f9 f0       	breq	.+62     	; 0x13b6 <malloc+0xb4>
    1378:	28 1b       	sub	r18, r24
    137a:	39 0b       	sbc	r19, r25
    137c:	24 30       	cpi	r18, 0x04	; 4
    137e:	31 05       	cpc	r19, r1
    1380:	80 f4       	brcc	.+32     	; 0x13a2 <malloc+0xa0>
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	61 15       	cp	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	21 f0       	breq	.+8      	; 0x1394 <malloc+0x92>
    138c:	fb 01       	movw	r30, r22
    138e:	93 83       	std	Z+3, r25	; 0x03
    1390:	82 83       	std	Z+2, r24	; 0x02
    1392:	04 c0       	rjmp	.+8      	; 0x139c <malloc+0x9a>
    1394:	90 93 33 02 	sts	0x0233, r25
    1398:	80 93 32 02 	sts	0x0232, r24
    139c:	fe 01       	movw	r30, r28
    139e:	32 96       	adiw	r30, 0x02	; 2
    13a0:	44 c0       	rjmp	.+136    	; 0x142a <malloc+0x128>
    13a2:	fe 01       	movw	r30, r28
    13a4:	e2 0f       	add	r30, r18
    13a6:	f3 1f       	adc	r31, r19
    13a8:	81 93       	st	Z+, r24
    13aa:	91 93       	st	Z+, r25
    13ac:	22 50       	subi	r18, 0x02	; 2
    13ae:	31 09       	sbc	r19, r1
    13b0:	39 83       	std	Y+1, r19	; 0x01
    13b2:	28 83       	st	Y, r18
    13b4:	3a c0       	rjmp	.+116    	; 0x142a <malloc+0x128>
    13b6:	20 91 30 02 	lds	r18, 0x0230
    13ba:	30 91 31 02 	lds	r19, 0x0231
    13be:	23 2b       	or	r18, r19
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <malloc+0xd0>
    13c2:	20 91 02 01 	lds	r18, 0x0102
    13c6:	30 91 03 01 	lds	r19, 0x0103
    13ca:	30 93 31 02 	sts	0x0231, r19
    13ce:	20 93 30 02 	sts	0x0230, r18
    13d2:	20 91 00 01 	lds	r18, 0x0100
    13d6:	30 91 01 01 	lds	r19, 0x0101
    13da:	21 15       	cp	r18, r1
    13dc:	31 05       	cpc	r19, r1
    13de:	41 f4       	brne	.+16     	; 0x13f0 <malloc+0xee>
    13e0:	2d b7       	in	r18, 0x3d	; 61
    13e2:	3e b7       	in	r19, 0x3e	; 62
    13e4:	40 91 04 01 	lds	r20, 0x0104
    13e8:	50 91 05 01 	lds	r21, 0x0105
    13ec:	24 1b       	sub	r18, r20
    13ee:	35 0b       	sbc	r19, r21
    13f0:	e0 91 30 02 	lds	r30, 0x0230
    13f4:	f0 91 31 02 	lds	r31, 0x0231
    13f8:	e2 17       	cp	r30, r18
    13fa:	f3 07       	cpc	r31, r19
    13fc:	a0 f4       	brcc	.+40     	; 0x1426 <malloc+0x124>
    13fe:	2e 1b       	sub	r18, r30
    1400:	3f 0b       	sbc	r19, r31
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	78 f0       	brcs	.+30     	; 0x1426 <malloc+0x124>
    1408:	ac 01       	movw	r20, r24
    140a:	4e 5f       	subi	r20, 0xFE	; 254
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	24 17       	cp	r18, r20
    1410:	35 07       	cpc	r19, r21
    1412:	48 f0       	brcs	.+18     	; 0x1426 <malloc+0x124>
    1414:	4e 0f       	add	r20, r30
    1416:	5f 1f       	adc	r21, r31
    1418:	50 93 31 02 	sts	0x0231, r21
    141c:	40 93 30 02 	sts	0x0230, r20
    1420:	81 93       	st	Z+, r24
    1422:	91 93       	st	Z+, r25
    1424:	02 c0       	rjmp	.+4      	; 0x142a <malloc+0x128>
    1426:	e0 e0       	ldi	r30, 0x00	; 0
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	cf 01       	movw	r24, r30
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <free>:
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	09 f4       	brne	.+2      	; 0x143c <free+0xa>
    143a:	87 c0       	rjmp	.+270    	; 0x154a <free+0x118>
    143c:	fc 01       	movw	r30, r24
    143e:	32 97       	sbiw	r30, 0x02	; 2
    1440:	13 82       	std	Z+3, r1	; 0x03
    1442:	12 82       	std	Z+2, r1	; 0x02
    1444:	c0 91 32 02 	lds	r28, 0x0232
    1448:	d0 91 33 02 	lds	r29, 0x0233
    144c:	20 97       	sbiw	r28, 0x00	; 0
    144e:	81 f4       	brne	.+32     	; 0x1470 <free+0x3e>
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	28 0f       	add	r18, r24
    1456:	39 1f       	adc	r19, r25
    1458:	80 91 30 02 	lds	r24, 0x0230
    145c:	90 91 31 02 	lds	r25, 0x0231
    1460:	82 17       	cp	r24, r18
    1462:	93 07       	cpc	r25, r19
    1464:	79 f5       	brne	.+94     	; 0x14c4 <free+0x92>
    1466:	f0 93 31 02 	sts	0x0231, r31
    146a:	e0 93 30 02 	sts	0x0230, r30
    146e:	6d c0       	rjmp	.+218    	; 0x154a <free+0x118>
    1470:	de 01       	movw	r26, r28
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	ae 17       	cp	r26, r30
    1478:	bf 07       	cpc	r27, r31
    147a:	50 f4       	brcc	.+20     	; 0x1490 <free+0x5e>
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	4d 91       	ld	r20, X+
    1480:	5c 91       	ld	r21, X
    1482:	13 97       	sbiw	r26, 0x03	; 3
    1484:	9d 01       	movw	r18, r26
    1486:	41 15       	cp	r20, r1
    1488:	51 05       	cpc	r21, r1
    148a:	09 f1       	breq	.+66     	; 0x14ce <free+0x9c>
    148c:	da 01       	movw	r26, r20
    148e:	f3 cf       	rjmp	.-26     	; 0x1476 <free+0x44>
    1490:	b3 83       	std	Z+3, r27	; 0x03
    1492:	a2 83       	std	Z+2, r26	; 0x02
    1494:	40 81       	ld	r20, Z
    1496:	51 81       	ldd	r21, Z+1	; 0x01
    1498:	84 0f       	add	r24, r20
    149a:	95 1f       	adc	r25, r21
    149c:	8a 17       	cp	r24, r26
    149e:	9b 07       	cpc	r25, r27
    14a0:	71 f4       	brne	.+28     	; 0x14be <free+0x8c>
    14a2:	8d 91       	ld	r24, X+
    14a4:	9c 91       	ld	r25, X
    14a6:	11 97       	sbiw	r26, 0x01	; 1
    14a8:	84 0f       	add	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	02 96       	adiw	r24, 0x02	; 2
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X
    14b8:	13 97       	sbiw	r26, 0x03	; 3
    14ba:	93 83       	std	Z+3, r25	; 0x03
    14bc:	82 83       	std	Z+2, r24	; 0x02
    14be:	21 15       	cp	r18, r1
    14c0:	31 05       	cpc	r19, r1
    14c2:	29 f4       	brne	.+10     	; 0x14ce <free+0x9c>
    14c4:	f0 93 33 02 	sts	0x0233, r31
    14c8:	e0 93 32 02 	sts	0x0232, r30
    14cc:	3e c0       	rjmp	.+124    	; 0x154a <free+0x118>
    14ce:	d9 01       	movw	r26, r18
    14d0:	13 96       	adiw	r26, 0x03	; 3
    14d2:	fc 93       	st	X, r31
    14d4:	ee 93       	st	-X, r30
    14d6:	12 97       	sbiw	r26, 0x02	; 2
    14d8:	4d 91       	ld	r20, X+
    14da:	5d 91       	ld	r21, X+
    14dc:	a4 0f       	add	r26, r20
    14de:	b5 1f       	adc	r27, r21
    14e0:	ea 17       	cp	r30, r26
    14e2:	fb 07       	cpc	r31, r27
    14e4:	79 f4       	brne	.+30     	; 0x1504 <free+0xd2>
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	84 0f       	add	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	d9 01       	movw	r26, r18
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	13 96       	adiw	r26, 0x03	; 3
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
    1502:	12 97       	sbiw	r26, 0x02	; 2
    1504:	e0 e0       	ldi	r30, 0x00	; 0
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	19 f0       	breq	.+6      	; 0x1516 <free+0xe4>
    1510:	fe 01       	movw	r30, r28
    1512:	ec 01       	movw	r28, r24
    1514:	f9 cf       	rjmp	.-14     	; 0x1508 <free+0xd6>
    1516:	ce 01       	movw	r24, r28
    1518:	02 96       	adiw	r24, 0x02	; 2
    151a:	28 81       	ld	r18, Y
    151c:	39 81       	ldd	r19, Y+1	; 0x01
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	20 91 30 02 	lds	r18, 0x0230
    1526:	30 91 31 02 	lds	r19, 0x0231
    152a:	28 17       	cp	r18, r24
    152c:	39 07       	cpc	r19, r25
    152e:	69 f4       	brne	.+26     	; 0x154a <free+0x118>
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	29 f4       	brne	.+10     	; 0x153e <free+0x10c>
    1534:	10 92 33 02 	sts	0x0233, r1
    1538:	10 92 32 02 	sts	0x0232, r1
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <free+0x110>
    153e:	13 82       	std	Z+3, r1	; 0x03
    1540:	12 82       	std	Z+2, r1	; 0x02
    1542:	d0 93 31 02 	sts	0x0231, r29
    1546:	c0 93 30 02 	sts	0x0230, r28
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <__itoa_ncheck>:
    1550:	bb 27       	eor	r27, r27
    1552:	4a 30       	cpi	r20, 0x0A	; 10
    1554:	31 f4       	brne	.+12     	; 0x1562 <__itoa_ncheck+0x12>
    1556:	99 23       	and	r25, r25
    1558:	22 f4       	brpl	.+8      	; 0x1562 <__itoa_ncheck+0x12>
    155a:	bd e2       	ldi	r27, 0x2D	; 45
    155c:	90 95       	com	r25
    155e:	81 95       	neg	r24
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <__utoa_common>

00001564 <__utoa_ncheck>:
    1564:	bb 27       	eor	r27, r27

00001566 <__utoa_common>:
    1566:	fb 01       	movw	r30, r22
    1568:	55 27       	eor	r21, r21
    156a:	aa 27       	eor	r26, r26
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	aa 1f       	adc	r26, r26
    1572:	a4 17       	cp	r26, r20
    1574:	10 f0       	brcs	.+4      	; 0x157a <__utoa_common+0x14>
    1576:	a4 1b       	sub	r26, r20
    1578:	83 95       	inc	r24
    157a:	50 51       	subi	r21, 0x10	; 16
    157c:	b9 f7       	brne	.-18     	; 0x156c <__utoa_common+0x6>
    157e:	a0 5d       	subi	r26, 0xD0	; 208
    1580:	aa 33       	cpi	r26, 0x3A	; 58
    1582:	08 f0       	brcs	.+2      	; 0x1586 <__utoa_common+0x20>
    1584:	a9 5d       	subi	r26, 0xD9	; 217
    1586:	a1 93       	st	Z+, r26
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	79 f7       	brne	.-34     	; 0x156a <__utoa_common+0x4>
    158c:	b1 11       	cpse	r27, r1
    158e:	b1 93       	st	Z+, r27
    1590:	11 92       	st	Z+, r1
    1592:	cb 01       	movw	r24, r22
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <strrev>

00001596 <strrev>:
    1596:	dc 01       	movw	r26, r24
    1598:	fc 01       	movw	r30, r24
    159a:	67 2f       	mov	r22, r23
    159c:	71 91       	ld	r23, Z+
    159e:	77 23       	and	r23, r23
    15a0:	e1 f7       	brne	.-8      	; 0x159a <strrev+0x4>
    15a2:	32 97       	sbiw	r30, 0x02	; 2
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <strrev+0x18>
    15a6:	7c 91       	ld	r23, X
    15a8:	6d 93       	st	X+, r22
    15aa:	70 83       	st	Z, r23
    15ac:	62 91       	ld	r22, -Z
    15ae:	ae 17       	cp	r26, r30
    15b0:	bf 07       	cpc	r27, r31
    15b2:	c8 f3       	brcs	.-14     	; 0x15a6 <strrev+0x10>
    15b4:	08 95       	ret

000015b6 <_exit>:
    15b6:	f8 94       	cli

000015b8 <__stop_program>:
    15b8:	ff cf       	rjmp	.-2      	; 0x15b8 <__stop_program>
