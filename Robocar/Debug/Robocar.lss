
Robocar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000015be  00001652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800152  00800152  000016a4  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005981  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020c4  00000000  00000000  000074a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b6  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  0000af20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103e  00000000  00000000  0000b860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000204d  00000000  00000000  0000c89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e8eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c7       	rjmp	.+3670   	; 0xe84 <__vector_11>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a0 c0       	rjmp	.+320    	; 0x1a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	9e c0       	rjmp	.+316    	; 0x1a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c4       	rjmp	.+2468   	; 0xa2a <__vector_33>
      86:	00 00       	nop
      88:	5a c5       	rjmp	.+2740   	; 0xb3e <__vector_34>
	...

0000008c <__trampolines_end>:
      8c:	08 01       	movw	r0, r16
      8e:	06 0c       	add	r0, r6
	...

00000091 <_ZL5table>:
      91:	18 23 35 34 47 25 66 45 59 26 57 34 88 58 77 56     .#54G%fEY&W4.XwV
      a1:	6b 27 38 34 99 27 66 45 aa 6a aa 37 99 99 88 67     k'84.'fE.j.7...g
      b1:	7b 28 39 34 7a 25 66 45 bb 2b 79 34 88 58 77 56     {(94z%fE.+y4.XwV
      c1:	cc 7c cc 38 cc 7c 99 45 bb bb bb 7b aa aa 99 78     .|.8.|.E...{...x
      d1:	8f 29 3a 34 4b 25 66 45 cc 29 57 34 88 58 77 56     .):4K%fE.)W4.XwV
      e1:	dd 2d 8d 34 bb 29 66 45 aa 6a aa 37 99 99 88 67     .-.4.)fE.j.7...g
      f1:	ee 8e ee 39 ee 8e aa 45 ee 8e ee 39 bb 8b 77 56     ...9...E...9..wV
     101:	dd dd dd 8d dd dd dd 49 cc cc cc cc bb bb aa 89     .......I........
	...

00000112 <__ctors_start>:
     112:	04 01       	movw	r0, r8
     114:	7c 02       	muls	r23, r28
     116:	44 03       	mulsu	r20, r20
     118:	3e 05       	cpc	r19, r14
     11a:	ec 05       	cpc	r30, r12
     11c:	0a 08       	sbc	r0, r10
     11e:	33 09       	sbc	r19, r3

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d0 e4       	ldi	r29, 0x40	; 64
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <_Z14__hardwareInitv>:
#define LEDON() PORTA |= _BV(2)
#define LEDOFF() PORTA &= ~_BV(2)


void __attribute__((section(".init3"), naked)) __hardwareInit(void) {
    DDRA |= _BV(1);		// POWER
     12c:	09 9a       	sbi	0x01, 1	; 1
    DDRA |= _BV(2);		// LED
     12e:	0a 9a       	sbi	0x01, 2	; 1
    DDRA |= _BV(7);		// LCD strobe
     130:	0f 9a       	sbi	0x01, 7	; 1
    DDRB |= _BV(2);		// HC138 GATE
     132:	22 9a       	sbi	0x04, 2	; 4

    //SPI init (USART1 in MSPIM)
    DDRD |= _BV(3);			// TXD1 output
     134:	53 9a       	sbi	0x0a, 3	; 10
    DDRD |= _BV(4);			// XCLK1 output
     136:	54 9a       	sbi	0x0a, 4	; 10
    UBRR1 = 0;
     138:	ec ec       	ldi	r30, 0xCC	; 204
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	11 82       	std	Z+1, r1	; 0x01
     13e:	10 82       	st	Z, r1
    UCSR1C = 0b11000011;	// MSPIM, MSB first, idle high (write)
     140:	83 ec       	ldi	r24, 0xC3	; 195
     142:	80 93 ca 00 	sts	0x00CA, r24
    UCSR1B = 0x18;			// enable transmitter and receiver
     146:	88 e1       	ldi	r24, 0x18	; 24
     148:	80 93 c9 00 	sts	0x00C9, r24
    UBRR1 = 0;				// set clock to fosc/2
     14c:	11 82       	std	Z+1, r1	; 0x01
     14e:	10 82       	st	Z, r1

    LL::write574(LL::U4, 0);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e4       	ldi	r24, 0x40	; 64
     154:	2a d3       	rcall	.+1620   	; 0x7aa <_ZN2LL8write574ENS_5HC574Ec>
    LL::write574(LL::U5, 0);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	80 e6       	ldi	r24, 0x60	; 96
     15a:	27 d3       	rcall	.+1614   	; 0x7aa <_ZN2LL8write574ENS_5HC574Ec>

0000015c <__do_copy_data>:
     15c:	11 e0       	ldi	r17, 0x01	; 1
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	ee eb       	ldi	r30, 0xBE	; 190
     164:	f5 e1       	ldi	r31, 0x15	; 21
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	0b bf       	out	0x3b, r16	; 59
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x14>
     16c:	07 90       	elpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a2 35       	cpi	r26, 0x52	; 82
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0x10>

00000176 <__do_clear_bss>:
     176:	22 e0       	ldi	r18, 0x02	; 2
     178:	a2 e5       	ldi	r26, 0x52	; 82
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a4 33       	cpi	r26, 0x34	; 52
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>

00000186 <__do_global_ctors>:
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	c0 e9       	ldi	r28, 0x90	; 144
     18a:	d0 e0       	ldi	r29, 0x00	; 0
     18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_global_ctors+0x10>
     18e:	21 97       	sbiw	r28, 0x01	; 1
     190:	fe 01       	movw	r30, r28
     192:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__tablejump2__>
     196:	c9 38       	cpi	r28, 0x89	; 137
     198:	d1 07       	cpc	r29, r17
     19a:	c9 f7       	brne	.-14     	; 0x18e <__do_global_ctors+0x8>

0000019c <_Z7__powerv>:
}

void __attribute__((section(".init8"), naked)) __power(void) {
    POWERUP();
     19c:	11 9a       	sbi	0x02, 1	; 2

0000019e <_Z5__seiv>:
     19e:	78 94       	sei
     1a0:	4a d2       	rcall	.+1172   	; 0x636 <main>
     1a2:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <_ZN7Buttons7timeoutEv>:
	bool troggleState;
	unsigned char speed;
	int kP, kI, kD;
	int PIDselecter;
	int vrValue;
    void timeout(void) {
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
		//str2[1] = 'y';
		//str2[2] = '\0';
		//str2[3] = '\0';
		
		
        count = PERIOD;		//restore count
     1ae:	88 e2       	ldi	r24, 0x28	; 40
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9d 83       	std	Y+5, r25	; 0x05
     1b4:	8c 83       	std	Y+4, r24	; 0x04
        char b = LL::read541(LL::BUTTONS, 1);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	8c e8       	ldi	r24, 0x8C	; 140
     1ba:	dd d2       	rcall	.+1466   	; 0x776 <_ZN2LL7read541ENS_5HC541Eh>
        char c = b ^ state;
     1bc:	98 a5       	ldd	r25, Y+40	; 0x28
     1be:	98 27       	eor	r25, r24
        if (c) {
     1c0:	d1 f0       	breq	.+52     	; 0x1f6 <_ZN7Buttons7timeoutEv+0x4e>
            state = b;
     1c2:	88 a7       	std	Y+40, r24	; 0x28
            if (S1 & c) S1Changed(S1 & b);
     1c4:	90 ff       	sbrs	r25, 0
     1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <_ZN7Buttons7timeoutEv+0x4e>
        }
    }


    void S1Changed(char c) {
        if (c) {
     1c8:	80 ff       	sbrs	r24, 0
     1ca:	15 c0       	rjmp	.+42     	; 0x1f6 <_ZN7Buttons7timeoutEv+0x4e>
			if(troggleState == false){
     1cc:	89 a5       	ldd	r24, Y+41	; 0x29
     1ce:	81 11       	cpse	r24, r1
     1d0:	0c c0       	rjmp	.+24     	; 0x1ea <_ZN7Buttons7timeoutEv+0x42>
				Wheel::setP(kP);
     1d2:	8b a5       	ldd	r24, Y+43	; 0x2b
     1d4:	9c a5       	ldd	r25, Y+44	; 0x2c
     1d6:	0f d7       	rcall	.+3614   	; 0xff6 <_ZN5Wheel4setPEi>
				Wheel::setI(kI);
     1d8:	8d a5       	ldd	r24, Y+45	; 0x2d
     1da:	9e a5       	ldd	r25, Y+46	; 0x2e
     1dc:	11 d7       	rcall	.+3618   	; 0x1000 <_ZN5Wheel4setIEi>
				Wheel::setD(kD);
     1de:	8f a5       	ldd	r24, Y+47	; 0x2f
     1e0:	98 a9       	ldd	r25, Y+48	; 0x30
     1e2:	13 d7       	rcall	.+3622   	; 0x100a <_ZN5Wheel4setDEi>
				Wheel::move(Wheel::BACKWARD);
     1e4:	84 ea       	ldi	r24, 0xA4	; 164
     1e6:	8b d6       	rcall	.+3350   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <_ZN7Buttons7timeoutEv+0x46>
			} else {
				Wheel::move(Wheel::STOP);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	88 d6       	rcall	.+3344   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
			}
			troggleState = !troggleState;
     1ee:	99 a5       	ldd	r25, Y+41	; 0x29
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	89 27       	eor	r24, r25
     1f4:	89 a7       	std	Y+41, r24	; 0x29
            if (S1 & c) S1Changed(S1 & b);
            if (S2 & c) S2Changed(S2 & b);
            if (S3 & c) S3Changed(S3 & b);
            if (S4 & c) S4Changed(S4 & b);
        }
    }
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <_ZN6Button6getBF1Ev>:
} buttons;

namespace Button{
	char * getBF1(){
		return buttons.bf1;
	}
     1fc:	88 e5       	ldi	r24, 0x58	; 88
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	08 95       	ret

00000202 <_ZN6Button6getBF2Ev>:
	char * getBF2(){
		return buttons.bf2;
	}
     202:	89 e6       	ldi	r24, 0x69	; 105
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	08 95       	ret

00000208 <_GLOBAL__sub_I__ZN6Button6getBF1Ev>:
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
#ifndef __TIMER_H__
#define __TIMER_H__

#include "List.h"

class Timer : Element {
     20c:	84 e5       	ldi	r24, 0x54	; 84
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	4c d7       	rcall	.+3736   	; 0x10aa <_ZN7ElementC1Ev>

static class Buttons : Timer {
public:
	char bf1[17];
	char bf2[17];
    Buttons(void) {
     212:	c2 e5       	ldi	r28, 0x52	; 82
     214:	d1 e0       	ldi	r29, 0x01	; 1
     216:	8c e0       	ldi	r24, 0x0C	; 12
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	99 83       	std	Y+1, r25	; 0x01
     21c:	88 83       	st	Y, r24
		kP = 11;
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	9c a7       	std	Y+44, r25	; 0x2c
     224:	8b a7       	std	Y+43, r24	; 0x2b
		kI = 56;
     226:	88 e3       	ldi	r24, 0x38	; 56
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9e a7       	std	Y+46, r25	; 0x2e
     22c:	8d a7       	std	Y+45, r24	; 0x2d
		kD = 60;
     22e:	8c e3       	ldi	r24, 0x3C	; 60
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	98 ab       	std	Y+48, r25	; 0x30
     234:	8f a7       	std	Y+47, r24	; 0x2f
		// 13, 63, 56,speed 100
		// 19, 63, 63 ,speed = 160
		// 24
		Wheel::setP(kP);
     236:	8b e0       	ldi	r24, 0x0B	; 11
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	dd d6       	rcall	.+3514   	; 0xff6 <_ZN5Wheel4setPEi>
		Wheel::setI(kI);
     23c:	8d a5       	ldd	r24, Y+45	; 0x2d
     23e:	9e a5       	ldd	r25, Y+46	; 0x2e
     240:	df d6       	rcall	.+3518   	; 0x1000 <_ZN5Wheel4setIEi>
		Wheel::setD(kD);
     242:	8f a5       	ldd	r24, Y+47	; 0x2f
     244:	98 a9       	ldd	r25, Y+48	; 0x30
     246:	e1 d6       	rcall	.+3522   	; 0x100a <_ZN5Wheel4setDEi>
		Wheel::setSpeed(160);
     248:	80 ea       	ldi	r24, 0xA0	; 160
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	53 d6       	rcall	.+3238   	; 0xef4 <_ZN5Wheel8setSpeedEi>
		PIDselecter = 0;
     24e:	1a aa       	std	Y+50, r1	; 0x32
     250:	19 aa       	std	Y+49, r1	; 0x31
		troggleState = false;
     252:	19 a6       	std	Y+41, r1	; 0x29
     254:	e9 e6       	ldi	r30, 0x69	; 105
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	a8 e5       	ldi	r26, 0x58	; 88
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	29 e7       	ldi	r18, 0x79	; 121
     25e:	31 e0       	ldi	r19, 0x01	; 1
		
		for (int i = 0; i < 16; i++) bf1[i] = bf2[i] = ' ';
     260:	80 e2       	ldi	r24, 0x20	; 32
     262:	81 93       	st	Z+, r24
     264:	8d 93       	st	X+, r24
     266:	e2 17       	cp	r30, r18
     268:	f3 07       	cpc	r31, r19
     26a:	d9 f7       	brne	.-10     	; 0x262 <_GLOBAL__sub_I__ZN6Button6getBF1Ev+0x5a>
		speed = 5;
     26c:	c2 e5       	ldi	r28, 0x52	; 82
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	8a a7       	std	Y+42, r24	; 0x2a
		
        count = PERIOD;
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	9d 83       	std	Y+5, r25	; 0x05
     27a:	8c 83       	std	Y+4, r24	; 0x04
        state = LL::read541(LL::BUTTONS, 1);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	8c e8       	ldi	r24, 0x8C	; 140
     280:	7a d2       	rcall	.+1268   	; 0x776 <_ZN2LL7read541ENS_5HC541Eh>
     282:	88 a7       	std	Y+40, r24	; 0x28
        timer::add(*this);		//timer3 has to be already instantiated
     284:	ce 01       	movw	r24, r28
     286:	84 d4       	rcall	.+2312   	; 0xb90 <_ZN5timer3addER5Timer>
		return buttons.bf1;
	}
	char * getBF2(){
		return buttons.bf2;
	}
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <__cxa_pure_virtual>:
/*
    This is applicable if using pure virtual inheritance.
*/
extern "C" void __cxa_pure_virtual(void); 
 
void __cxa_pure_virtual(void) {}; 
     28e:	08 95       	ret

00000290 <_Znwj>:
void* operator new(size_t size);
void operator delete(void* size);
 
void * operator new(size_t size)
{
    return malloc(size);
     290:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <malloc>
}
     294:	08 95       	ret

00000296 <_ZN12_GLOBAL__N_13LCD4taskEv>:
		void print(unsigned char position, const char *s, unsigned char src) {
			if(lcd.print(position, s, src)) return;
			print_param.position = position;
			print_param.s = s;
			print_param.src = src;
			kerAppend(*this);
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	fc 01       	movw	r30, r24
     29c:	23 85       	ldd	r18, Z+11	; 0x0b
     29e:	21 11       	cpse	r18, r1
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN12_GLOBAL__N_13LCD4taskEv+0x10>
     2a2:	12 86       	std	Z+10, r1	; 0x0a
     2a4:	26 c0       	rjmp	.+76     	; 0x2f2 <_ZN12_GLOBAL__N_13LCD4taskEv+0x5c>
     2a6:	ec 01       	movw	r28, r24
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	4f d2       	rcall	.+1182   	; 0x74a <_ZN2LL11lcdReadByteEh>
     2ac:	88 23       	and	r24, r24
     2ae:	f4 f0       	brlt	.+60     	; 0x2ec <_ZN12_GLOBAL__N_13LCD4taskEv+0x56>
     2b0:	6c 85       	ldd	r22, Y+12	; 0x0c
     2b2:	62 30       	cpi	r22, 0x02	; 2
     2b4:	30 f0       	brcs	.+12     	; 0x2c2 <_ZN12_GLOBAL__N_13LCD4taskEv+0x2c>
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ba:	39 d2       	rcall	.+1138   	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	8c 87       	std	Y+12, r24	; 0x0c
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <_ZN12_GLOBAL__N_13LCD4taskEv+0x30>
     2c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c4:	34 d2       	rcall	.+1128   	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     2c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	41 f4       	brne	.+16     	; 0x2dc <_ZN12_GLOBAL__N_13LCD4taskEv+0x46>
     2cc:	ee 85       	ldd	r30, Y+14	; 0x0e
     2ce:	ff 85       	ldd	r31, Y+15	; 0x0f
     2d0:	cf 01       	movw	r24, r30
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	9f 87       	std	Y+15, r25	; 0x0f
     2d6:	8e 87       	std	Y+14, r24	; 0x0e
     2d8:	e0 81       	ld	r30, Z
     2da:	07 c0       	rjmp	.+14     	; 0x2ea <_ZN12_GLOBAL__N_13LCD4taskEv+0x54>
     2dc:	ee 85       	ldd	r30, Y+14	; 0x0e
     2de:	ff 85       	ldd	r31, Y+15	; 0x0f
     2e0:	cf 01       	movw	r24, r30
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	9f 87       	std	Y+15, r25	; 0x0f
     2e6:	8e 87       	std	Y+14, r24	; 0x0e
     2e8:	e4 91       	lpm	r30, Z
     2ea:	eb 87       	std	Y+11, r30	; 0x0b
     2ec:	ce 01       	movw	r24, r28
     2ee:	06 96       	adiw	r24, 0x06	; 6
     2f0:	b1 d7       	rcall	.+3938   	; 0x1254 <_Z9kerAppendR4Task>
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <_ZN12_GLOBAL__N_13LCD7timeoutEv>:
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ec 01       	movw	r28, r24
     2fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     300:	87 30       	cpi	r24, 0x07	; 7
     302:	51 f4       	brne	.+20     	; 0x318 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x20>
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	8a 87       	std	Y+10, r24	; 0x0a
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9d 83       	std	Y+5, r25	; 0x05
     30e:	8c 83       	std	Y+4, r24	; 0x04
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	0c d2       	rcall	.+1048   	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     316:	3f c0       	rjmp	.+126    	; 0x396 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x9e>
     318:	ce 01       	movw	r24, r28
     31a:	41 d4       	rcall	.+2178   	; 0xb9e <_ZN5timer6removeER5Timer>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	80 e3       	ldi	r24, 0x30	; 48
     320:	fb d1       	rcall	.+1014   	; 0x718 <_ZN2LL14lcdWriteNibbleEhh>
     322:	88 e7       	ldi	r24, 0x78	; 120
     324:	e8 d1       	rcall	.+976    	; 0x6f6 <_Z6delayUh>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	80 e3       	ldi	r24, 0x30	; 48
     32a:	f6 d1       	rcall	.+1004   	; 0x718 <_ZN2LL14lcdWriteNibbleEhh>
     32c:	82 e3       	ldi	r24, 0x32	; 50
     32e:	e3 d1       	rcall	.+966    	; 0x6f6 <_Z6delayUh>
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	80 e2       	ldi	r24, 0x20	; 32
     334:	f1 d1       	rcall	.+994    	; 0x718 <_ZN2LL14lcdWriteNibbleEhh>
     336:	82 e3       	ldi	r24, 0x32	; 50
     338:	de d1       	rcall	.+956    	; 0x6f6 <_Z6delayUh>
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	88 e2       	ldi	r24, 0x28	; 40
     33e:	f7 d1       	rcall	.+1006   	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     340:	82 e3       	ldi	r24, 0x32	; 50
     342:	d9 d1       	rcall	.+946    	; 0x6f6 <_Z6delayUh>
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	80 e4       	ldi	r24, 0x40	; 64
     348:	f2 d1       	rcall	.+996    	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     34a:	82 e3       	ldi	r24, 0x32	; 50
     34c:	d4 d1       	rcall	.+936    	; 0x6f6 <_Z6delayUh>
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	85 ea       	ldi	r24, 0xA5	; 165
     352:	ed d1       	rcall	.+986    	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     354:	82 e3       	ldi	r24, 0x32	; 50
     356:	cf d1       	rcall	.+926    	; 0x6f6 <_Z6delayUh>
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	80 e4       	ldi	r24, 0x40	; 64
     35c:	e8 d1       	rcall	.+976    	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     35e:	82 e3       	ldi	r24, 0x32	; 50
     360:	ca d1       	rcall	.+916    	; 0x6f6 <_Z6delayUh>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	f2 d1       	rcall	.+996    	; 0x74a <_ZN2LL11lcdReadByteEh>
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	85 3a       	cpi	r24, 0xA5	; 165
     36a:	09 f4       	brne	.+2      	; 0x36e <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x76>
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	99 23       	and	r25, r25
     370:	11 f0       	breq	.+4      	; 0x376 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x7e>
     372:	9a 87       	std	Y+10, r25	; 0x0a
     374:	10 c0       	rjmp	.+32     	; 0x396 <_ZN12_GLOBAL__N_13LCD7timeoutEv+0x9e>
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	8a 87       	std	Y+10, r24	; 0x0a
     37a:	8e ef       	ldi	r24, 0xFE	; 254
     37c:	8d 87       	std	Y+13, r24	; 0x0d
     37e:	1c 86       	std	Y+12, r1	; 0x0c
     380:	8d e8       	ldi	r24, 0x8D	; 141
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	9f 87       	std	Y+15, r25	; 0x0f
     386:	8e 87       	std	Y+14, r24	; 0x0e
     388:	ec e8       	ldi	r30, 0x8C	; 140
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	e4 91       	lpm	r30, Z
     38e:	eb 87       	std	Y+11, r30	; 0x0b
     390:	ce 01       	movw	r24, r28
     392:	06 96       	adiw	r24, 0x06	; 6
     394:	5f d7       	rcall	.+3774   	; 0x1254 <_Z9kerAppendR4Task>
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <_ZN3LCD3._54taskEv>:
     39c:	dc 01       	movw	r26, r24
     39e:	17 96       	adiw	r26, 0x07	; 7
     3a0:	2c 91       	ld	r18, X
     3a2:	17 97       	sbiw	r26, 0x07	; 7
     3a4:	15 96       	adiw	r26, 0x05	; 5
     3a6:	ed 91       	ld	r30, X+
     3a8:	fc 91       	ld	r31, X
     3aa:	16 97       	sbiw	r26, 0x06	; 6
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	8c 91       	ld	r24, X
     3b0:	14 97       	sbiw	r26, 0x04	; 4
     3b2:	90 91 99 01 	lds	r25, 0x0199
     3b6:	91 11       	cpse	r25, r1
     3b8:	2c c0       	rjmp	.+88     	; 0x412 <_ZN3LCD3._54taskEv+0x76>
     3ba:	af e8       	ldi	r26, 0x8F	; 143
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	1a 96       	adiw	r26, 0x0a	; 10
     3c2:	9c 93       	st	X, r25
     3c4:	1a 97       	sbiw	r26, 0x0a	; 10
     3c6:	1d 96       	adiw	r26, 0x0d	; 13
     3c8:	2c 93       	st	X, r18
     3ca:	1d 97       	sbiw	r26, 0x0d	; 13
     3cc:	1f 96       	adiw	r26, 0x0f	; 15
     3ce:	fc 93       	st	X, r31
     3d0:	ee 93       	st	-X, r30
     3d2:	1e 97       	sbiw	r26, 0x0e	; 14
     3d4:	98 2f       	mov	r25, r24
     3d6:	90 95       	com	r25
     3d8:	1c 96       	adiw	r26, 0x0c	; 12
     3da:	9c 93       	st	X, r25
     3dc:	92 30       	cpi	r25, 0x02	; 2
     3de:	10 f0       	brcs	.+4      	; 0x3e4 <_ZN3LCD3._54taskEv+0x48>
     3e0:	80 68       	ori	r24, 0x80	; 128
     3e2:	11 c0       	rjmp	.+34     	; 0x406 <_ZN3LCD3._54taskEv+0x6a>
     3e4:	21 30       	cpi	r18, 0x01	; 1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <_ZN3LCD3._54taskEv+0x5c>
     3e8:	cf 01       	movw	r24, r30
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	90 93 9e 01 	sts	0x019E, r25
     3f0:	80 93 9d 01 	sts	0x019D, r24
     3f4:	80 81       	ld	r24, Z
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <_ZN3LCD3._54taskEv+0x6a>
     3f8:	cf 01       	movw	r24, r30
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 9e 01 	sts	0x019E, r25
     400:	80 93 9d 01 	sts	0x019D, r24
     404:	84 91       	lpm	r24, Z
     406:	80 93 9a 01 	sts	0x019A, r24
     40a:	85 e9       	ldi	r24, 0x95	; 149
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	22 c7       	rjmp	.+3652   	; 0x1254 <_Z9kerAppendR4Task>
     410:	08 95       	ret
     412:	cd 01       	movw	r24, r26
     414:	1f c7       	rjmp	.+3646   	; 0x1254 <_Z9kerAppendR4Task>
     416:	08 95       	ret

00000418 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv>:
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	fc 01       	movw	r30, r24
     422:	25 81       	ldd	r18, Z+5	; 0x05
     424:	21 11       	cpse	r18, r1
     426:	02 c0       	rjmp	.+4      	; 0x42c <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x14>
     428:	14 82       	std	Z+4, r1	; 0x04
     42a:	36 c0       	rjmp	.+108    	; 0x498 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x80>
     42c:	ec 01       	movw	r28, r24
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	8c d1       	rcall	.+792    	; 0x74a <_ZN2LL11lcdReadByteEh>
     432:	88 23       	and	r24, r24
     434:	7c f1       	brlt	.+94     	; 0x494 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x7c>
     436:	6e 81       	ldd	r22, Y+6	; 0x06
     438:	62 30       	cpi	r22, 0x02	; 2
     43a:	58 f0       	brcs	.+22     	; 0x452 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x3a>
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	8e 01       	movw	r16, r28
     440:	06 50       	subi	r16, 0x06	; 6
     442:	11 09       	sbc	r17, r1
     444:	f8 01       	movw	r30, r16
     446:	83 85       	ldd	r24, Z+11	; 0x0b
     448:	72 d1       	rcall	.+740    	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	f8 01       	movw	r30, r16
     44e:	84 87       	std	Z+12, r24	; 0x0c
     450:	02 c0       	rjmp	.+4      	; 0x456 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x3e>
     452:	8d 81       	ldd	r24, Y+5	; 0x05
     454:	6c d1       	rcall	.+728    	; 0x72e <_ZN2LL12lcdWriteByteEhh>
     456:	8f 81       	ldd	r24, Y+7	; 0x07
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	71 f4       	brne	.+28     	; 0x478 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x60>
     45c:	de 01       	movw	r26, r28
     45e:	16 97       	sbiw	r26, 0x06	; 6
     460:	1e 96       	adiw	r26, 0x0e	; 14
     462:	ed 91       	ld	r30, X+
     464:	fc 91       	ld	r31, X
     466:	1f 97       	sbiw	r26, 0x0f	; 15
     468:	cf 01       	movw	r24, r30
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	1f 96       	adiw	r26, 0x0f	; 15
     46e:	9c 93       	st	X, r25
     470:	8e 93       	st	-X, r24
     472:	1e 97       	sbiw	r26, 0x0e	; 14
     474:	e0 81       	ld	r30, Z
     476:	0d c0       	rjmp	.+26     	; 0x492 <_ZThn6_N12_GLOBAL__N_13LCD4taskEv+0x7a>
     478:	de 01       	movw	r26, r28
     47a:	16 97       	sbiw	r26, 0x06	; 6
     47c:	1e 96       	adiw	r26, 0x0e	; 14
     47e:	ed 91       	ld	r30, X+
     480:	fc 91       	ld	r31, X
     482:	1f 97       	sbiw	r26, 0x0f	; 15
     484:	cf 01       	movw	r24, r30
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	1f 96       	adiw	r26, 0x0f	; 15
     48a:	9c 93       	st	X, r25
     48c:	8e 93       	st	-X, r24
     48e:	1e 97       	sbiw	r26, 0x0e	; 14
     490:	e4 91       	lpm	r30, Z
     492:	ed 83       	std	Y+5, r30	; 0x05
     494:	ce 01       	movw	r24, r28
     496:	de d6       	rcall	.+3516   	; 0x1254 <_Z9kerAppendR4Task>
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <_ZN3LCD5printEhPc>:
        LCD(void) {
            count = state = POWER_UP_DELAY;	//power up delay > 15 ms
            timer::add(*this);		//timer3 has to be already instantiated
        }
        bool print(unsigned char position, const char *s, unsigned char src) {
			if (state != READY) return false;
     4a2:	90 91 99 01 	lds	r25, 0x0199
     4a6:	91 11       	cpse	r25, r1
     4a8:	1d c0       	rjmp	.+58     	; 0x4e4 <_ZN3LCD5printEhPc+0x42>
			state = PRINTING;
     4aa:	ef e8       	ldi	r30, 0x8F	; 143
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	92 87       	std	Z+10, r25	; 0x0a
			source = src;
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	95 87       	std	Z+13, r25	; 0x0d
			flash = s;
     4b6:	77 87       	std	Z+15, r23	; 0x0f
     4b8:	66 87       	std	Z+14, r22	; 0x0e
			location = ~position;
     4ba:	98 2f       	mov	r25, r24
     4bc:	90 95       	com	r25
     4be:	94 87       	std	Z+12, r25	; 0x0c
			character = location > RAM ? position|128 : readbyte(); //pgm_read_byte(str++);
     4c0:	92 30       	cpi	r25, 0x02	; 2
     4c2:	10 f0       	brcs	.+4      	; 0x4c8 <_ZN3LCD5printEhPc+0x26>
     4c4:	80 68       	ori	r24, 0x80	; 128
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <_ZN3LCD5printEhPc+0x36>
    private:
        unsigned char state, character, location, source;
		union {const char *flash; char *ram;};

		char readbyte(void){
			return source == RAM ? *ram++ : pgm_read_byte(flash++);
     4c8:	cb 01       	movw	r24, r22
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	90 93 9e 01 	sts	0x019E, r25
     4d0:	80 93 9d 01 	sts	0x019D, r24
     4d4:	fb 01       	movw	r30, r22
     4d6:	80 81       	ld	r24, Z
			if (state != READY) return false;
			state = PRINTING;
			source = src;
			flash = s;
			location = ~position;
			character = location > RAM ? position|128 : readbyte(); //pgm_read_byte(str++);
     4d8:	80 93 9a 01 	sts	0x019A, r24
			kerAppend(*this);
     4dc:	85 e9       	ldi	r24, 0x95	; 149
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	b9 c6       	rjmp	.+3442   	; 0x1254 <_Z9kerAppendR4Task>
     4e2:	08 95       	ret
namespace LCD {
	static class : public Task {
	public:
		void print(unsigned char position, const char *s, unsigned char src) {
			if(lcd.print(position, s, src)) return;
			print_param.position = position;
     4e4:	e7 e8       	ldi	r30, 0x87	; 135
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	84 83       	std	Z+4, r24	; 0x04
			print_param.s = s;
     4ea:	76 83       	std	Z+6, r23	; 0x06
     4ec:	65 83       	std	Z+5, r22	; 0x05
			print_param.src = src;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	87 83       	std	Z+7, r24	; 0x07
			kerAppend(*this);
     4f2:	cf 01       	movw	r24, r30
     4f4:	af c6       	rjmp	.+3422   	; 0x1254 <_Z9kerAppendR4Task>
     4f6:	08 95       	ret

000004f8 <_GLOBAL__sub_I__ZN3LCD5printEhPKc>:
	void print(unsigned char position, char *s){
		printTask.print(position, (const char *)s, RAM);
		//usrCall(printTask);
	}

     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	81 e9       	ldi	r24, 0x91	; 145
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	d4 d5       	rcall	.+2984   	; 0x10aa <_ZN7ElementC1Ev>
     502:	cf e8       	ldi	r28, 0x8F	; 143
     504:	d1 e0       	ldi	r29, 0x01	; 1
     506:	82 e1       	ldi	r24, 0x12	; 18
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	99 83       	std	Y+1, r25	; 0x01
     50c:	88 83       	st	Y, r24
#ifndef __TASK_H__
#define __TASK_H__

#include "List.h"

class Task : Element {
     50e:	87 e9       	ldi	r24, 0x97	; 151
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	cb d5       	rcall	.+2966   	; 0x10aa <_ZN7ElementC1Ev>
    enum {STATUS=0, RAM=1, BUSY=128};
    enum {POWER_UP_DELAY=7, INTERFACE_SET_DELAY=2, READY=0, NO_LCDM, PRINTING};

    class LCD : Timer, public Task {
    public:
        LCD(void) {
     514:	88 e1       	ldi	r24, 0x18	; 24
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	99 83       	std	Y+1, r25	; 0x01
     51a:	88 83       	st	Y, r24
     51c:	80 e2       	ldi	r24, 0x20	; 32
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	9f 83       	std	Y+7, r25	; 0x07
     522:	8e 83       	std	Y+6, r24	; 0x06
            count = state = POWER_UP_DELAY;	//power up delay > 15 ms
     524:	87 e0       	ldi	r24, 0x07	; 7
     526:	8a 87       	std	Y+10, r24	; 0x0a
     528:	87 e0       	ldi	r24, 0x07	; 7
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9d 83       	std	Y+5, r25	; 0x05
     52e:	8c 83       	std	Y+4, r24	; 0x04
            timer::add(*this);		//timer3 has to be already instantiated
     530:	ce 01       	movw	r24, r28
     532:	2e d3       	rcall	.+1628   	; 0xb90 <_ZN5timer3addER5Timer>
     534:	89 e8       	ldi	r24, 0x89	; 137
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	b8 d5       	rcall	.+2928   	; 0x10aa <_ZN7ElementC1Ev>
    } lcd;

}

namespace LCD {
	static class : public Task {
     53a:	86 e2       	ldi	r24, 0x26	; 38
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	90 93 88 01 	sts	0x0188, r25
     542:	80 93 87 01 	sts	0x0187, r24
	void print(unsigned char position, char *s){
		printTask.print(position, (const char *)s, RAM);
		//usrCall(printTask);
	}

     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <_Z12displacementc>:
	// 11111111
};

int displacement(char b){
	static int last = 8;
	if (!b) return last;
     54c:	81 11       	cpse	r24, r1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <_Z12displacementc+0xe>
     550:	80 91 06 01 	lds	r24, 0x0106
     554:	90 91 07 01 	lds	r25, 0x0107
     558:	08 95       	ret
	unsigned char c = pgm_read_byte(&table[(unsigned char)b>>1]);
     55a:	e8 2f       	mov	r30, r24
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	f5 95       	asr	r31
     560:	e7 95       	ror	r30
     562:	ef 56       	subi	r30, 0x6F	; 111
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	e4 91       	lpm	r30, Z
	return last = b & 1 ? c >> 4 : c & 15;
     568:	80 ff       	sbrs	r24, 0
     56a:	0b c0       	rjmp	.+22     	; 0x582 <_Z12displacementc+0x36>
     56c:	8e 2f       	mov	r24, r30
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	95 95       	asr	r25
     572:	87 95       	ror	r24
     574:	95 95       	asr	r25
     576:	87 95       	ror	r24
     578:	95 95       	asr	r25
     57a:	87 95       	ror	r24
     57c:	95 95       	asr	r25
     57e:	87 95       	ror	r24
     580:	03 c0       	rjmp	.+6      	; 0x588 <_Z12displacementc+0x3c>
     582:	ef 70       	andi	r30, 0x0F	; 15
     584:	8e 2f       	mov	r24, r30
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	90 93 07 01 	sts	0x0107, r25
     58c:	80 93 06 01 	sts	0x0106, r24
}
     590:	08 95       	ret

00000592 <_ZN8maintask4taskEv>:
	Servo::second();
	Servo::set(Servo::UP1,2);
	Servo::set(Servo::UP2,3);
	Servo::delay100ms(10);
	Servo::set(Servo::RIGHT,1);
	Servo::slowclose1();
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	fc 01       	movw	r30, r24
     598:	21 85       	ldd	r18, Z+9	; 0x09
     59a:	21 11       	cpse	r18, r1
     59c:	0e c0       	rjmp	.+28     	; 0x5ba <_ZN8maintask4taskEv+0x28>
     59e:	ec 01       	movw	r28, r24
     5a0:	a6 d4       	rcall	.+2380   	; 0xeee <_ZN5Wheel9getSensorEv>
     5a2:	b2 d0       	rcall	.+356    	; 0x708 <_Z6mirrorc>
     5a4:	80 ff       	sbrs	r24, 0
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <_ZN8maintask4taskEv+0x20>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	a9 d4       	rcall	.+2386   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 87       	std	Y+9, r24	; 0x09
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <_ZN8maintask4taskEv+0x28>
     5b2:	84 ea       	ldi	r24, 0xA4	; 164
     5b4:	a4 d4       	rcall	.+2376   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     5b6:	ce 01       	movw	r24, r28
     5b8:	4d d6       	rcall	.+3226   	; 0x1254 <_Z9kerAppendR4Task>
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <_ZN9maintask14taskEv>:
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	fc 01       	movw	r30, r24
     5c6:	26 81       	ldd	r18, Z+6	; 0x06
     5c8:	21 11       	cpse	r18, r1
     5ca:	19 c0       	rjmp	.+50     	; 0x5fe <_ZN9maintask14taskEv+0x3e>
     5cc:	ec 01       	movw	r28, r24
     5ce:	8f d4       	rcall	.+2334   	; 0xeee <_ZN5Wheel9getSensorEv>
     5d0:	80 ff       	sbrs	r24, 0
     5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <_ZN9maintask14taskEv+0x36>
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	9d 81       	ldd	r25, Y+5	; 0x05
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	9d 83       	std	Y+5, r25	; 0x05
     5dc:	8c 83       	std	Y+4, r24	; 0x04
     5de:	02 97       	sbiw	r24, 0x02	; 2
     5e0:	29 f4       	brne	.+10     	; 0x5ec <_ZN9maintask14taskEv+0x2c>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	8c d4       	rcall	.+2328   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	8e 83       	std	Y+6, r24	; 0x06
     5ea:	09 c0       	rjmp	.+18     	; 0x5fe <_ZN9maintask14taskEv+0x3e>
     5ec:	84 ea       	ldi	r24, 0xA4	; 164
     5ee:	87 d4       	rcall	.+2318   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     5f0:	ce 01       	movw	r24, r28
     5f2:	30 d6       	rcall	.+3168   	; 0x1254 <_Z9kerAppendR4Task>
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <_ZN9maintask14taskEv+0x3e>
     5f6:	84 ea       	ldi	r24, 0xA4	; 164
     5f8:	82 d4       	rcall	.+2308   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     5fa:	ce 01       	movw	r24, r28
     5fc:	2b d6       	rcall	.+3158   	; 0x1254 <_Z9kerAppendR4Task>
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <_Z4testv>:
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	9f e1       	ldi	r25, 0x1F	; 31
     60c:	97 d1       	rcall	.+814    	; 0x93c <_ZN5Servo3setENS_13servo_commandEi>
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e7       	ldi	r24, 0x70	; 112
     614:	97 e1       	ldi	r25, 0x17	; 23
     616:	92 d1       	rcall	.+804    	; 0x93c <_ZN5Servo3setENS_13servo_commandEi>
     618:	63 e0       	ldi	r22, 0x03	; 3
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e5       	ldi	r24, 0x50	; 80
     61e:	96 e4       	ldi	r25, 0x46	; 70
     620:	8d d1       	rcall	.+794    	; 0x93c <_ZN5Servo3setENS_13servo_commandEi>
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	5c d1       	rcall	.+696    	; 0x8e0 <_ZN5Servo10delay100msEi>
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	89 e9       	ldi	r24, 0x99	; 153
     62e:	95 e1       	ldi	r25, 0x15	; 21
     630:	85 d1       	rcall	.+778    	; 0x93c <_ZN5Servo3setENS_13servo_commandEi>
     632:	8c c1       	rjmp	.+792    	; 0x94c <_ZN5Servo9slowcloseEv>
     634:	08 95       	ret

00000636 <main>:
	}
}usrTask1,usrTask2;

int main(void) {
	
 	Servo::setInitialise();
     636:	8c ee       	ldi	r24, 0xEC	; 236
     638:	9a e3       	ldi	r25, 0x3A	; 58
     63a:	6f d1       	rcall	.+734    	; 0x91a <_ZN5Servo13setInitialiseEi>
 	usrCall(usrTask);
     63c:	8d ea       	ldi	r24, 0xAD	; 173
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e d6       	rcall	.+3100   	; 0x125e <_Z7usrCallR4Task>
 	test();
     642:	e0 df       	rcall	.-64     	; 0x604 <_Z4testv>
	
 	Servo::delay100ms(10);
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	4b d1       	rcall	.+662    	; 0x8e0 <_ZN5Servo10delay100msEi>
	usrCall(usrTask1);
     64a:	86 ea       	ldi	r24, 0xA6	; 166
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	07 d6       	rcall	.+3086   	; 0x125e <_Z7usrCallR4Task>
	Wheel::move(Wheel::BACKWARD);
     650:	84 ea       	ldi	r24, 0xA4	; 164
     652:	55 d4       	rcall	.+2218   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(10);
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	43 d1       	rcall	.+646    	; 0x8e0 <_ZN5Servo10delay100msEi>
	usrCall(usrTask2);
     65a:	8f e9       	ldi	r24, 0x9F	; 159
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	ff d5       	rcall	.+3070   	; 0x125e <_Z7usrCallR4Task>
	Servo::delay100ms(10);
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	3d d1       	rcall	.+634    	; 0x8e0 <_ZN5Servo10delay100msEi>
	Wheel::set(70);
     666:	86 e4       	ldi	r24, 0x46	; 70
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	3c d4       	rcall	.+2168   	; 0xee4 <_ZN5Wheel3setEi>
	Wheel::move(Wheel::BTURNRIGHT);
     66c:	8c e2       	ldi	r24, 0x2C	; 44
     66e:	47 d4       	rcall	.+2190   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(10);
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	35 d1       	rcall	.+618    	; 0x8e0 <_ZN5Servo10delay100msEi>
	Wheel::move(Wheel::BACKWARD);
     676:	84 ea       	ldi	r24, 0xA4	; 164
     678:	42 d4       	rcall	.+2180   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
	Servo::delay100ms(9);
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	30 d1       	rcall	.+608    	; 0x8e0 <_ZN5Servo10delay100msEi>
	Wheel::move(Wheel::STOP);
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	3d d4       	rcall	.+2170   	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
	Servo::GG();	
     684:	b8 d1       	rcall	.+880    	; 0x9f6 <_ZN5Servo2GGEv>
		
		
	}
}usrTask1,usrTask2;

int main(void) {
     686:	ff cf       	rjmp	.-2      	; 0x686 <main+0x50>

00000688 <_GLOBAL__sub_I__Z4testv>:
	
	
    while(1) {

    }
}
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	8f ea       	ldi	r24, 0xAF	; 175
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0c d5       	rcall	.+2584   	; 0x10aa <_ZN7ElementC1Ev>
	
}

static class maintask : public Task{
	public:
	maintask(void){
     692:	ed ea       	ldi	r30, 0xAD	; 173
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	8c e2       	ldi	r24, 0x2C	; 44
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	91 83       	std	Z+1, r25	; 0x01
     69c:	80 83       	st	Z, r24
		stop=false;
     69e:	11 86       	std	Z+9, r1	; 0x09
		count=0;
     6a0:	16 82       	std	Z+6, r1	; 0x06
     6a2:	15 82       	std	Z+5, r1	; 0x05
     6a4:	88 ea       	ldi	r24, 0xA8	; 168
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	00 d5       	rcall	.+2560   	; 0x10aa <_ZN7ElementC1Ev>
	}
}usrTask;

static class maintask1 : public Task{
	public:
	maintask1(void){
     6aa:	e6 ea       	ldi	r30, 0xA6	; 166
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	c2 e3       	ldi	r28, 0x32	; 50
     6b0:	d1 e0       	ldi	r29, 0x01	; 1
     6b2:	d1 83       	std	Z+1, r29	; 0x01
     6b4:	c0 83       	st	Z, r28
		stop=false;
     6b6:	16 82       	std	Z+6, r1	; 0x06
		count=0;
     6b8:	15 82       	std	Z+5, r1	; 0x05
     6ba:	14 82       	std	Z+4, r1	; 0x04
     6bc:	81 ea       	ldi	r24, 0xA1	; 161
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	f4 d4       	rcall	.+2536   	; 0x10aa <_ZN7ElementC1Ev>
	}
}usrTask;

static class maintask1 : public Task{
	public:
	maintask1(void){
     6c2:	ef e9       	ldi	r30, 0x9F	; 159
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	d1 83       	std	Z+1, r29	; 0x01
     6c8:	c0 83       	st	Z, r28
		stop=false;
     6ca:	16 82       	std	Z+6, r1	; 0x06
		count=0;
     6cc:	15 82       	std	Z+5, r1	; 0x05
     6ce:	14 82       	std	Z+4, r1	; 0x04
	
	
    while(1) {

    }
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_ZN12_GLOBAL__N_13SPIEc>:
namespace {

    char u4, u5;

    char SPI(char c) {
        while (!(UCSR1A & _BV(UDRE1)));		// wait for empty transmit buffer
     6d6:	e8 ec       	ldi	r30, 0xC8	; 200
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	90 81       	ld	r25, Z
     6dc:	95 ff       	sbrs	r25, 5
     6de:	fd cf       	rjmp	.-6      	; 0x6da <_ZN12_GLOBAL__N_13SPIEc+0x4>
        UDR1 = c;
     6e0:	80 93 ce 00 	sts	0x00CE, r24
        while (!(UCSR1A & _BV(RXC1)));		// wait for data to be received
     6e4:	e8 ec       	ldi	r30, 0xC8	; 200
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	ec f7       	brge	.-6      	; 0x6e8 <_ZN12_GLOBAL__N_13SPIEc+0x12>
        return UDR1;							// dummy read
     6ee:	80 91 ce 00 	lds	r24, 0x00CE
    }
     6f2:	08 95       	ret

000006f4 <_Z5delayv>:
#include <avr/io.h>

#include "robocar_ll.h"

void __attribute__((noinline, naked)) delay(void) {
    __asm__("ret"::);
     6f4:	08 95       	ret

000006f6 <_Z6delayUh>:
}
//8 clk = 723 ns (11.0592 MHz)

void delayU(unsigned char t) {
     6f6:	cf 93       	push	r28
    while (t--) {
     6f8:	88 23       	and	r24, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <_Z6delayUh+0xe>
     6fc:	c8 2f       	mov	r28, r24
        delay();
     6fe:	fa df       	rcall	.-12     	; 0x6f4 <_Z5delayv>
     700:	c1 50       	subi	r28, 0x01	; 1
    __asm__("ret"::);
}
//8 clk = 723 ns (11.0592 MHz)

void delayU(unsigned char t) {
    while (t--) {
     702:	e9 f7       	brne	.-6      	; 0x6fe <_Z6delayUh+0x8>
        delay();
    }
}
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <_Z6mirrorc>:
                         "1: lsr __tmp_reg__" "\n\t"\
                         "rol %0" "\n\t"\
                         "brcs 1b" "\n\t"\
                         :"=a" (c)\
                         :"0" (c)\
                        );
     708:	28 2f       	mov	r18, r24
     70a:	02 2e       	mov	r0, r18
     70c:	2e ef       	ldi	r18, 0xFE	; 254
     70e:	06 94       	lsr	r0
     710:	22 1f       	adc	r18, r18
     712:	e8 f3       	brcs	.-6      	; 0x70e <_Z6mirrorc+0x6>
     714:	82 2f       	mov	r24, r18
    return c;
}
     716:	08 95       	ret

00000718 <_ZN2LL14lcdWriteNibbleEhh>:

namespace LL {

    void lcdWriteNibble(unsigned char n, unsigned char c) {
        // require lower nibble of n = 0
        BGATEL();
     718:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(n | c << 2);
     71e:	66 0f       	add	r22, r22
     720:	66 0f       	add	r22, r22
     722:	86 2b       	or	r24, r22
     724:	88 b9       	out	0x08, r24	; 8
        LCDSTROBE();
     726:	17 9a       	sbi	0x02, 7	; 2
     728:	e5 df       	rcall	.-54     	; 0x6f4 <_Z5delayv>
     72a:	17 98       	cbi	0x02, 7	; 2
     72c:	08 95       	ret

0000072e <_ZN2LL12lcdWriteByteEhh>:
    }

    void lcdWriteByte(unsigned char b, unsigned char c) {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	c8 2f       	mov	r28, r24
     734:	d6 2f       	mov	r29, r22
        lcdWriteNibble(b & 0xf0, c);		// high nibble first
     736:	80 7f       	andi	r24, 0xF0	; 240
     738:	ef df       	rcall	.-34     	; 0x718 <_ZN2LL14lcdWriteNibbleEhh>
        lcdWriteNibble(b << 4, c);
     73a:	6d 2f       	mov	r22, r29
     73c:	8c 2f       	mov	r24, r28
     73e:	82 95       	swap	r24
     740:	80 7f       	andi	r24, 0xF0	; 240
     742:	ea df       	rcall	.-44     	; 0x718 <_ZN2LL14lcdWriteNibbleEhh>
    }
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <_ZN2LL11lcdReadByteEh>:

    char lcdReadByte(unsigned char c) {
     74a:	cf 93       	push	r28
        unsigned char lownibble;
        BGATEL();
     74c:	2a 98       	cbi	0x05, 2	; 5
        BUS(BREAD);
     74e:	9f e0       	ldi	r25, 0x0F	; 15
     750:	97 b9       	out	0x07, r25	; 7
        BUSWRITE((c | 2) << 2);
     752:	82 60       	ori	r24, 0x02	; 2
     754:	88 0f       	add	r24, r24
     756:	88 0f       	add	r24, r24
     758:	88 b9       	out	0x08, r24	; 8
        LCDSTROBE();
     75a:	17 9a       	sbi	0x02, 7	; 2
     75c:	cb df       	rcall	.-106    	; 0x6f4 <_Z5delayv>
     75e:	17 98       	cbi	0x02, 7	; 2
        BUSREAD(c);
     760:	c6 b1       	in	r28, 0x06	; 6
        c &= 0xf0;	// high nibble first
        LCDSTROBE();
     762:	17 9a       	sbi	0x02, 7	; 2
     764:	c7 df       	rcall	.-114    	; 0x6f4 <_Z5delayv>
     766:	17 98       	cbi	0x02, 7	; 2
        BUSREAD(lownibble);
     768:	86 b1       	in	r24, 0x06	; 6
        return c | lownibble >> 4;
     76a:	82 95       	swap	r24
     76c:	8f 70       	andi	r24, 0x0F	; 15
        BGATEL();
        BUS(BREAD);
        BUSWRITE((c | 2) << 2);
        LCDSTROBE();
        BUSREAD(c);
        c &= 0xf0;	// high nibble first
     76e:	c0 7f       	andi	r28, 0xF0	; 240
        LCDSTROBE();
        BUSREAD(lownibble);
        return c | lownibble >> 4;
    }
     770:	8c 2b       	or	r24, r28
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <_ZN2LL7read541ENS_5HC541Eh>:

    char read541(HC541 address, unsigned char t) {
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
        SPICLKL();
     77a:	ca ec       	ldi	r28, 0xCA	; 202
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	98 81       	ld	r25, Y
     780:	9e 7f       	andi	r25, 0xFE	; 254
     782:	98 83       	st	Y, r25
        BGATEL();
     784:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     786:	9f ef       	ldi	r25, 0xFF	; 255
     788:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(address);
     78a:	88 b9       	out	0x08, r24	; 8
        BGATEH();
     78c:	2a 9a       	sbi	0x05, 2	; 5
        delayU(t);
     78e:	86 2f       	mov	r24, r22
     790:	b2 df       	rcall	.-156    	; 0x6f6 <_Z6delayUh>
        SPICLKH();
     792:	88 81       	ld	r24, Y
     794:	81 60       	ori	r24, 0x01	; 1
     796:	88 83       	st	Y, r24
        BGATEL();
     798:	2a 98       	cbi	0x05, 2	; 5
        PORTC &= 0xf3;
     79a:	88 b1       	in	r24, 0x08	; 8
     79c:	83 7f       	andi	r24, 0xF3	; 243
     79e:	88 b9       	out	0x08, r24	; 8
        return SPI(0);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	99 df       	rcall	.-206    	; 0x6d6 <_ZN12_GLOBAL__N_13SPIEc>
    }
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <_ZN2LL8write574ENS_5HC574Ec>:

    void write574(HC574 address, char c) {
        BGATEL();
     7aa:	2a 98       	cbi	0x05, 2	; 5
        BUS(BWRITE);
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
     7ae:	97 b9       	out	0x07, r25	; 7
        BUSWRITE(address);
     7b0:	88 b9       	out	0x08, r24	; 8
        BGATEH();
     7b2:	2a 9a       	sbi	0x05, 2	; 5
        SPI(c);
     7b4:	86 2f       	mov	r24, r22
     7b6:	8f df       	rcall	.-226    	; 0x6d6 <_ZN12_GLOBAL__N_13SPIEc>
        BGATEL();
     7b8:	2a 98       	cbi	0x05, 2	; 5
     7ba:	08 95       	ret

000007bc <_ZN2LL15servoSetAddressEc>:
    }

    void servoSetAddress(char c) {
     7bc:	cf 93       	push	r28
        u4 = (u4 & 0x1F) | mirror(c & 7);
     7be:	60 91 b8 01 	lds	r22, 0x01B8
     7c2:	c6 2f       	mov	r28, r22
     7c4:	cf 71       	andi	r28, 0x1F	; 31
     7c6:	87 70       	andi	r24, 0x07	; 7
     7c8:	9f df       	rcall	.-194    	; 0x708 <_Z6mirrorc>
     7ca:	68 2f       	mov	r22, r24
     7cc:	6c 2b       	or	r22, r28
     7ce:	60 93 b8 01 	sts	0x01B8, r22
        write574(U4, u4);
     7d2:	80 e4       	ldi	r24, 0x40	; 64
     7d4:	ea df       	rcall	.-44     	; 0x7aa <_ZN2LL8write574ENS_5HC574Ec>
    }
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <_ZN2LL16backMotorControlEc>:

    void backMotorControl(char c) {
        u5 = (u5 & 0x78) | (c & 0x87);
     7da:	87 78       	andi	r24, 0x87	; 135
     7dc:	60 91 b7 01 	lds	r22, 0x01B7
     7e0:	68 77       	andi	r22, 0x78	; 120
     7e2:	68 2b       	or	r22, r24
     7e4:	60 93 b7 01 	sts	0x01B7, r22
        write574(U5, u5);
     7e8:	80 e6       	ldi	r24, 0x60	; 96
     7ea:	df cf       	rjmp	.-66     	; 0x7aa <_ZN2LL8write574ENS_5HC574Ec>
     7ec:	08 95       	ret

000007ee <_ZN12_GLOBAL__N_18Slowmove4taskEv>:
	void second(){
		while(servo.width[0]>OPEN)
		{	servo.width[0]-=2;
			delayU(255);
		}	
	}
     7ee:	fc 01       	movw	r30, r24
     7f0:	80 85       	ldd	r24, Z+8	; 0x08
     7f2:	91 85       	ldd	r25, Z+9	; 0x09
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	91 87       	std	Z+9, r25	; 0x09
     7f8:	80 87       	std	Z+8, r24	; 0x08
     7fa:	22 85       	ldd	r18, Z+10	; 0x0a
     7fc:	22 23       	and	r18, r18
     7fe:	09 f4       	brne	.+2      	; 0x802 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x14>
     800:	40 c0       	rjmp	.+128    	; 0x882 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x94>
     802:	88 3e       	cpi	r24, 0xE8	; 232
     804:	93 40       	sbci	r25, 0x03	; 3
     806:	81 f5       	brne	.+96     	; 0x868 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x7a>
     808:	84 81       	ldd	r24, Z+4	; 0x04
     80a:	95 81       	ldd	r25, Z+5	; 0x05
     80c:	dc 01       	movw	r26, r24
     80e:	aa 0f       	add	r26, r26
     810:	bb 1f       	adc	r27, r27
     812:	a8 53       	subi	r26, 0x38	; 56
     814:	be 4f       	sbci	r27, 0xFE	; 254
     816:	2d 91       	ld	r18, X+
     818:	3c 91       	ld	r19, X
     81a:	46 81       	ldd	r20, Z+6	; 0x06
     81c:	57 81       	ldd	r21, Z+7	; 0x07
     81e:	24 17       	cp	r18, r20
     820:	35 07       	cpc	r19, r21
     822:	48 f4       	brcc	.+18     	; 0x836 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x48>
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	dc 01       	movw	r26, r24
     82a:	a8 53       	subi	r26, 0x38	; 56
     82c:	be 4f       	sbci	r27, 0xFE	; 254
     82e:	2f 5f       	subi	r18, 0xFF	; 255
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	2d 93       	st	X+, r18
     834:	3c 93       	st	X, r19
     836:	84 81       	ldd	r24, Z+4	; 0x04
     838:	95 81       	ldd	r25, Z+5	; 0x05
     83a:	dc 01       	movw	r26, r24
     83c:	aa 0f       	add	r26, r26
     83e:	bb 1f       	adc	r27, r27
     840:	a8 53       	subi	r26, 0x38	; 56
     842:	be 4f       	sbci	r27, 0xFE	; 254
     844:	2d 91       	ld	r18, X+
     846:	3c 91       	ld	r19, X
     848:	46 81       	ldd	r20, Z+6	; 0x06
     84a:	57 81       	ldd	r21, Z+7	; 0x07
     84c:	42 17       	cp	r20, r18
     84e:	53 07       	cpc	r21, r19
     850:	48 f4       	brcc	.+18     	; 0x864 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x76>
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	dc 01       	movw	r26, r24
     858:	a8 53       	subi	r26, 0x38	; 56
     85a:	be 4f       	sbci	r27, 0xFE	; 254
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	31 09       	sbc	r19, r1
     860:	2d 93       	st	X+, r18
     862:	3c 93       	st	X, r19
     864:	11 86       	std	Z+9, r1	; 0x09
     866:	10 86       	std	Z+8, r1	; 0x08
     868:	a4 81       	ldd	r26, Z+4	; 0x04
     86a:	b5 81       	ldd	r27, Z+5	; 0x05
     86c:	86 81       	ldd	r24, Z+6	; 0x06
     86e:	97 81       	ldd	r25, Z+7	; 0x07
     870:	aa 0f       	add	r26, r26
     872:	bb 1f       	adc	r27, r27
     874:	a8 53       	subi	r26, 0x38	; 56
     876:	be 4f       	sbci	r27, 0xFE	; 254
     878:	8d 93       	st	X+, r24
     87a:	9c 93       	st	X, r25
     87c:	89 2b       	or	r24, r25
     87e:	09 f0       	breq	.+2      	; 0x882 <_ZN12_GLOBAL__N_18Slowmove4taskEv+0x94>
     880:	12 86       	std	Z+10, r1	; 0x0a
     882:	08 95       	ret

00000884 <_ZN12_GLOBAL__N_15Servo4taskEv>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	8c 89       	ldd	r24, Y+20	; 0x14
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	98 0f       	add	r25, r24
     890:	89 2f       	mov	r24, r25
     892:	87 70       	andi	r24, 0x07	; 7
     894:	8c 8b       	std	Y+20, r24	; 0x14
     896:	92 df       	rcall	.-220    	; 0x7bc <_ZN2LL15servoSetAddressEc>
     898:	9c 89       	ldd	r25, Y+20	; 0x14
     89a:	e9 2f       	mov	r30, r25
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	32 96       	adiw	r30, 0x02	; 2
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	ec 0f       	add	r30, r28
     8a6:	fd 1f       	adc	r31, r29
     8a8:	80 81       	ld	r24, Z
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	51 f0       	breq	.+20     	; 0x8c4 <_ZN12_GLOBAL__N_15Servo4taskEv+0x40>
     8b0:	90 93 9b 00 	sts	0x009B, r25
     8b4:	80 93 9a 00 	sts	0x009A, r24
     8b8:	e0 e9       	ldi	r30, 0x90	; 144
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	80 62       	ori	r24, 0x20	; 32
     8c0:	80 83       	st	Z, r24
     8c2:	0b c0       	rjmp	.+22     	; 0x8da <_ZN12_GLOBAL__N_15Servo4taskEv+0x56>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	96 e3       	ldi	r25, 0x36	; 54
     8c8:	90 93 9b 00 	sts	0x009B, r25
     8cc:	80 93 9a 00 	sts	0x009A, r24
     8d0:	e0 e9       	ldi	r30, 0x90	; 144
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	8f 7d       	andi	r24, 0xDF	; 223
     8d8:	80 83       	st	Z, r24
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <_ZN5Servo10delay100msEi>:
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	20 e9       	ldi	r18, 0x90	; 144
     8ea:	31 e0       	ldi	r19, 0x01	; 1
     8ec:	82 9f       	mul	r24, r18
     8ee:	80 01       	movw	r16, r0
     8f0:	83 9f       	mul	r24, r19
     8f2:	10 0d       	add	r17, r0
     8f4:	92 9f       	mul	r25, r18
     8f6:	10 0d       	add	r17, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	10 16       	cp	r1, r16
     8fc:	11 06       	cpc	r1, r17
     8fe:	44 f4       	brge	.+16     	; 0x910 <_ZN5Servo10delay100msEi+0x30>
     900:	c0 e0       	ldi	r28, 0x00	; 0
     902:	d0 e0       	ldi	r29, 0x00	; 0
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	f7 de       	rcall	.-530    	; 0x6f6 <_Z6delayUh>
     908:	21 96       	adiw	r28, 0x01	; 1
     90a:	c0 17       	cp	r28, r16
     90c:	d1 07       	cpc	r29, r17
     90e:	d1 f7       	brne	.-12     	; 0x904 <_ZN5Servo10delay100msEi+0x24>
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <_ZN5Servo13setInitialiseEi>:
     91a:	e4 ec       	ldi	r30, 0xC4	; 196
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	93 87       	std	Z+11, r25	; 0x0b
     920:	82 87       	std	Z+10, r24	; 0x0a
     922:	20 e4       	ldi	r18, 0x40	; 64
     924:	3f e1       	ldi	r19, 0x1F	; 31
     926:	35 83       	std	Z+5, r19	; 0x05
     928:	24 83       	std	Z+4, r18	; 0x04
     92a:	28 ed       	ldi	r18, 0xD8	; 216
     92c:	39 e5       	ldi	r19, 0x59	; 89
     92e:	37 83       	std	Z+7, r19	; 0x07
     930:	26 83       	std	Z+6, r18	; 0x06
     932:	88 58       	subi	r24, 0x88	; 136
     934:	93 41       	sbci	r25, 0x13	; 19
     936:	91 87       	std	Z+9, r25	; 0x09
     938:	80 87       	std	Z+8, r24	; 0x08
     93a:	08 95       	ret

0000093c <_ZN5Servo3setENS_13servo_commandEi>:
     93c:	fb 01       	movw	r30, r22
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	e8 53       	subi	r30, 0x38	; 56
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <_ZN5Servo9slowcloseEv>:
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	8a e0       	ldi	r24, 0x0A	; 10
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	c5 df       	rcall	.-118    	; 0x8e0 <_ZN5Servo10delay100msEi>
     956:	c4 ec       	ldi	r28, 0xC4	; 196
     958:	d1 e0       	ldi	r29, 0x01	; 1
     95a:	88 ef       	ldi	r24, 0xF8	; 248
     95c:	9a e2       	ldi	r25, 0x2A	; 42
     95e:	99 87       	std	Y+9, r25	; 0x09
     960:	88 87       	std	Y+8, r24	; 0x08
     962:	8a e0       	ldi	r24, 0x0A	; 10
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	bc df       	rcall	.-136    	; 0x8e0 <_ZN5Servo10delay100msEi>
     968:	8c e9       	ldi	r24, 0x9C	; 156
     96a:	98 e1       	ldi	r25, 0x18	; 24
     96c:	9b 87       	std	Y+11, r25	; 0x0b
     96e:	8a 87       	std	Y+10, r24	; 0x0a
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	b5 df       	rcall	.-150    	; 0x8e0 <_ZN5Servo10delay100msEi>
     976:	8e 81       	ldd	r24, Y+6	; 0x06
     978:	9f 81       	ldd	r25, Y+7	; 0x07
     97a:	88 32       	cpi	r24, 0x28	; 40
     97c:	23 e2       	ldi	r18, 0x23	; 35
     97e:	92 07       	cpc	r25, r18
     980:	58 f4       	brcc	.+22     	; 0x998 <_ZN5Servo9slowcloseEv+0x4c>
     982:	02 96       	adiw	r24, 0x02	; 2
     984:	9f 83       	std	Y+7, r25	; 0x07
     986:	8e 83       	std	Y+6, r24	; 0x06
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	b5 de       	rcall	.-662    	; 0x6f6 <_Z6delayUh>
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	9f 81       	ldd	r25, Y+7	; 0x07
     990:	88 32       	cpi	r24, 0x28	; 40
     992:	23 e2       	ldi	r18, 0x23	; 35
     994:	92 07       	cpc	r25, r18
     996:	a8 f3       	brcs	.-22     	; 0x982 <_ZN5Servo9slowcloseEv+0x36>
     998:	80 91 c8 01 	lds	r24, 0x01C8
     99c:	90 91 c9 01 	lds	r25, 0x01C9
     9a0:	80 35       	cpi	r24, 0x50	; 80
     9a2:	26 e4       	ldi	r18, 0x46	; 70
     9a4:	92 07       	cpc	r25, r18
     9a6:	68 f4       	brcc	.+26     	; 0x9c2 <_ZN5Servo9slowcloseEv+0x76>
     9a8:	c4 ec       	ldi	r28, 0xC4	; 196
     9aa:	d1 e0       	ldi	r29, 0x01	; 1
     9ac:	02 96       	adiw	r24, 0x02	; 2
     9ae:	9d 83       	std	Y+5, r25	; 0x05
     9b0:	8c 83       	std	Y+4, r24	; 0x04
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	a0 de       	rcall	.-704    	; 0x6f6 <_Z6delayUh>
     9b6:	8c 81       	ldd	r24, Y+4	; 0x04
     9b8:	9d 81       	ldd	r25, Y+5	; 0x05
     9ba:	80 35       	cpi	r24, 0x50	; 80
     9bc:	26 e4       	ldi	r18, 0x46	; 70
     9be:	92 07       	cpc	r25, r18
     9c0:	a8 f3       	brcs	.-22     	; 0x9ac <_ZN5Servo9slowcloseEv+0x60>
     9c2:	c4 ec       	ldi	r28, 0xC4	; 196
     9c4:	d1 e0       	ldi	r29, 0x01	; 1
     9c6:	88 ed       	ldi	r24, 0xD8	; 216
     9c8:	99 e5       	ldi	r25, 0x59	; 89
     9ca:	9f 83       	std	Y+7, r25	; 0x07
     9cc:	8e 83       	std	Y+6, r24	; 0x06
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	86 df       	rcall	.-244    	; 0x8e0 <_ZN5Servo10delay100msEi>
     9d4:	80 e7       	ldi	r24, 0x70	; 112
     9d6:	97 e1       	ldi	r25, 0x17	; 23
     9d8:	99 87       	std	Y+9, r25	; 0x09
     9da:	88 87       	std	Y+8, r24	; 0x08
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	7f df       	rcall	.-258    	; 0x8e0 <_ZN5Servo10delay100msEi>
     9e2:	80 e5       	ldi	r24, 0x50	; 80
     9e4:	96 e4       	ldi	r25, 0x46	; 70
     9e6:	9b 87       	std	Y+11, r25	; 0x0b
     9e8:	8a 87       	std	Y+10, r24	; 0x0a
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	78 df       	rcall	.-272    	; 0x8e0 <_ZN5Servo10delay100msEi>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <_ZN5Servo2GGEv>:
	
	void GG(){
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
	void set(int num,int name){
		servo.width[name]=num;
     9fa:	c4 ec       	ldi	r28, 0xC4	; 196
     9fc:	d1 e0       	ldi	r29, 0x01	; 1
     9fe:	80 eb       	ldi	r24, 0xB0	; 176
     a00:	96 e3       	ldi	r25, 0x36	; 54
     a02:	9f 83       	std	Y+7, r25	; 0x07
     a04:	8e 83       	std	Y+6, r24	; 0x06
		servo.width[(int)i]=val;
		servo.width[0]=8000;
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
     a06:	88 ef       	ldi	r24, 0xF8	; 248
     a08:	9a e2       	ldi	r25, 0x2A	; 42
     a0a:	99 87       	std	Y+9, r25	; 0x09
     a0c:	88 87       	std	Y+8, r24	; 0x08
     a0e:	8c e9       	ldi	r24, 0x9C	; 156
     a10:	98 e1       	ldi	r25, 0x18	; 24
     a12:	9b 87       	std	Y+11, r25	; 0x0b
     a14:	8a 87       	std	Y+10, r24	; 0x0a
	void GG(){
		
		set(14000,1);
		set(DOWN1,2);
		set(DOWN2,3);
		delay100ms(10);
     a16:	8a e0       	ldi	r24, 0x0A	; 10
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	62 df       	rcall	.-316    	; 0x8e0 <_ZN5Servo10delay100msEi>
		servo.width[(int)i]=val;
		servo.width[0]=8000;
		servo.width[1]=LEFT;
		servo.width[2]=val-5000;
	}
	void set(enum servo_command a,int name){ servo.width[name]=a;}
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	9f e1       	ldi	r25, 0x1F	; 31
     a20:	9d 83       	std	Y+5, r25	; 0x05
     a22:	8c 83       	std	Y+4, r24	; 0x04
		delay100ms(10);
		set(OPEN,0);
		
		
		
	}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <__vector_33>:
	
	
}


ISR(TIMER3_COMPB_vect) {
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	0b b6       	in	r0, 0x3b	; 59
     a36:	0f 92       	push	r0
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
    isrAppend(servo);
     a50:	84 ec       	ldi	r24, 0xC4	; 196
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	d2 d3       	rcall	.+1956   	; 0x11fa <_Z9isrAppendR4Task>
	// isrAppend(slowmove);
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0b be       	out	0x3b, r0	; 59
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <_GLOBAL__sub_I__ZN5Servo10delay100msEi>:
     a7c:	86 ec       	ldi	r24, 0xC6	; 198
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	14 d3       	rcall	.+1576   	; 0x10aa <_ZN7ElementC1Ev>

namespace {

    class Servo: public Task {
    public:
        Servo(void) {
     a82:	e4 ec       	ldi	r30, 0xC4	; 196
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	88 e3       	ldi	r24, 0x38	; 56
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
            DDRB |=_BV(7);
     a8e:	27 9a       	sbi	0x04, 7	; 4
            OCR3B=13824;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	96 e3       	ldi	r25, 0x36	; 54
     a94:	90 93 9b 00 	sts	0x009B, r25
     a98:	80 93 9a 00 	sts	0x009A, r24
            TIMSK3|=_BV(OCIE3B);
     a9c:	a1 e7       	ldi	r26, 0x71	; 113
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	8c 91       	ld	r24, X
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	8c 93       	st	X, r24
            channel=width[0]=width[1]=0;
     aa6:	17 82       	std	Z+7, r1	; 0x07
     aa8:	16 82       	std	Z+6, r1	; 0x06
     aaa:	15 82       	std	Z+5, r1	; 0x05
     aac:	14 82       	std	Z+4, r1	; 0x04
     aae:	14 8a       	std	Z+20, r1	; 0x14
            width[2]=width[3]=0;
     ab0:	13 86       	std	Z+11, r1	; 0x0b
     ab2:	12 86       	std	Z+10, r1	; 0x0a
     ab4:	11 86       	std	Z+9, r1	; 0x09
     ab6:	10 86       	std	Z+8, r1	; 0x08
            width[4]=width[5]=0;
     ab8:	17 86       	std	Z+15, r1	; 0x0f
     aba:	16 86       	std	Z+14, r1	; 0x0e
     abc:	15 86       	std	Z+13, r1	; 0x0d
     abe:	14 86       	std	Z+12, r1	; 0x0c
            width[6]=width[7]=0;
     ac0:	13 8a       	std	Z+19, r1	; 0x13
     ac2:	12 8a       	std	Z+18, r1	; 0x12
     ac4:	11 8a       	std	Z+17, r1	; 0x11
     ac6:	10 8a       	std	Z+16, r1	; 0x10
     ac8:	8b eb       	ldi	r24, 0xBB	; 187
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	ee d2       	rcall	.+1500   	; 0x10aa <_ZN7ElementC1Ev>
namespace {

	class Slowmove: public Task { 
		
		public:
		Slowmove(void) {
     ace:	e9 eb       	ldi	r30, 0xB9	; 185
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	8e e3       	ldi	r24, 0x3E	; 62
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
			_start=false;
     ada:	12 86       	std	Z+10, r1	; 0x0a
     adc:	08 95       	ret

00000ade <_ZN6Timer34taskEv>:
        if (e) if (current == &t) current = e;
    }
private:
    List list;
    Timer *current;
    void task(void) {
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	ec 01       	movw	r28, r24
        if ((current = (Timer*)list.getNext(current))) {
     ae4:	68 85       	ldd	r22, Y+8	; 0x08
     ae6:	79 85       	ldd	r23, Y+9	; 0x09
     ae8:	61 15       	cp	r22, r1
     aea:	71 05       	cpc	r23, r1
     aec:	19 f0       	breq	.+6      	; 0xaf4 <_ZN6Timer34taskEv+0x16>
     aee:	6e 5f       	subi	r22, 0xFE	; 254
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <_ZN6Timer34taskEv+0x1a>
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	ce 01       	movw	r24, r28
     afa:	04 96       	adiw	r24, 0x04	; 4
     afc:	e3 d2       	rcall	.+1478   	; 0x10c4 <_ZN4List7getNextEP7Element>
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	c9 f0       	breq	.+50     	; 0xb34 <_ZN6Timer34taskEv+0x56>
     b02:	02 97       	sbiw	r24, 0x02	; 2
     b04:	99 87       	std	Y+9, r25	; 0x09
     b06:	88 87       	std	Y+8, r24	; 0x08
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	b1 f0       	breq	.+44     	; 0xb38 <_ZN6Timer34taskEv+0x5a>
            if (--current->count == 0) current->timeout();
     b0c:	fc 01       	movw	r30, r24
     b0e:	84 81       	ldd	r24, Z+4	; 0x04
     b10:	95 81       	ldd	r25, Z+5	; 0x05
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	95 83       	std	Z+5, r25	; 0x05
     b16:	84 83       	std	Z+4, r24	; 0x04
     b18:	89 2b       	or	r24, r25
     b1a:	49 f4       	brne	.+18     	; 0xb2e <_ZN6Timer34taskEv+0x50>
     b1c:	88 85       	ldd	r24, Y+8	; 0x08
     b1e:	99 85       	ldd	r25, Y+9	; 0x09
     b20:	dc 01       	movw	r26, r24
     b22:	ed 91       	ld	r30, X+
     b24:	fc 91       	ld	r31, X
     b26:	01 90       	ld	r0, Z+
     b28:	f0 81       	ld	r31, Z
     b2a:	e0 2d       	mov	r30, r0
     b2c:	09 95       	icall
            kerAppend(*this);
     b2e:	ce 01       	movw	r24, r28
     b30:	91 d3       	rcall	.+1826   	; 0x1254 <_Z9kerAppendR4Task>
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <_ZN6Timer34taskEv+0x5a>
    }
private:
    List list;
    Timer *current;
    void task(void) {
        if ((current = (Timer*)list.getNext(current))) {
     b34:	19 86       	std	Y+9, r1	; 0x09
     b36:	18 86       	std	Y+8, r1	; 0x08
            if (--current->count == 0) current->timeout();
            kerAppend(*this);
        }
    }
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <__vector_34>:
} timer3;

ISR(TIMER3_OVF_vect) {
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	0b b6       	in	r0, 0x3b	; 59
     b4a:	0f 92       	push	r0
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
    isrAppend(timer3);
     b64:	8b ed       	ldi	r24, 0xDB	; 219
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	48 d3       	rcall	.+1680   	; 0x11fa <_Z9isrAppendR4Task>
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <_ZN5timer3addER5Timer>:
        TCCR3B = 0b00011001;	// clk/1
        OCR3A = 27648;			// 2.5 ms for 11.0592 MHz
        TIMSK3 |= _BV(TOIE3);	// enable interrupt
    }
    void add(Timer &t) {
        list.append(t);
     b90:	bc 01       	movw	r22, r24
     b92:	6e 5f       	subi	r22, 0xFE	; 254
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	8f ed       	ldi	r24, 0xDF	; 223
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	b2 c2       	rjmp	.+1380   	; 0x1100 <_ZN4List6appendER7Element>
     b9c:	08 95       	ret

00000b9e <_ZN5timer6removeER5Timer>:

namespace timer {
    void add(Timer &t) {
        timer3.add(t);
    }
    void remove(Timer &t) {
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	ec 01       	movw	r28, r24
    }
    void add(Timer &t) {
        list.append(t);
    }
    void remove(Timer &t) {
        Timer* e = (Timer*)list.remove(t);
     ba4:	bc 01       	movw	r22, r24
     ba6:	6e 5f       	subi	r22, 0xFE	; 254
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	8f ed       	ldi	r24, 0xDF	; 223
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	d1 d2       	rcall	.+1442   	; 0x1152 <_ZN4List6removeER7Element>
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <_ZN5timer6removeER5Timer+0x34>
     bb4:	9c 01       	movw	r18, r24
     bb6:	22 50       	subi	r18, 0x02	; 2
     bb8:	31 09       	sbc	r19, r1
        if (e) if (current == &t) current = e;
     bba:	59 f0       	breq	.+22     	; 0xbd2 <_ZN5timer6removeER5Timer+0x34>
     bbc:	80 91 e3 01 	lds	r24, 0x01E3
     bc0:	90 91 e4 01 	lds	r25, 0x01E4
     bc4:	c8 17       	cp	r28, r24
     bc6:	d9 07       	cpc	r29, r25
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <_ZN5timer6removeER5Timer+0x34>
     bca:	30 93 e4 01 	sts	0x01E4, r19
     bce:	20 93 e3 01 	sts	0x01E3, r18
    void add(Timer &t) {
        timer3.add(t);
    }
    void remove(Timer &t) {
        timer3.remove(t);
    }
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_GLOBAL__sub_I___vector_34>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	8d ed       	ldi	r24, 0xDD	; 221
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	64 d2       	rcall	.+1224   	; 0x10aa <_ZN7ElementC1Ev>
#include "Task.h"
#include "Timer.h"

static class Timer3 : public Task {
public:
    Timer3(void) : current(0) {
     be2:	cb ed       	ldi	r28, 0xDB	; 219
     be4:	d1 e0       	ldi	r29, 0x01	; 1
     be6:	84 e4       	ldi	r24, 0x44	; 68
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	99 83       	std	Y+1, r25	; 0x01
     bec:	88 83       	st	Y, r24
     bee:	8f ed       	ldi	r24, 0xDF	; 223
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	5f d2       	rcall	.+1214   	; 0x10b2 <_ZN4ListC1Ev>
     bf4:	19 86       	std	Y+9, r1	; 0x09
     bf6:	18 86       	std	Y+8, r1	; 0x08
        TCCR3A = 0b00000011;	// OC3A & OC3B disconnected, Fast PWM
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	80 93 90 00 	sts	0x0090, r24
        TCCR3B = 0b00011001;	// clk/1
     bfe:	89 e1       	ldi	r24, 0x19	; 25
     c00:	80 93 91 00 	sts	0x0091, r24
        OCR3A = 27648;			// 2.5 ms for 11.0592 MHz
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	9c e6       	ldi	r25, 0x6C	; 108
     c08:	90 93 99 00 	sts	0x0099, r25
     c0c:	80 93 98 00 	sts	0x0098, r24
        TIMSK3 |= _BV(TOIE3);	// enable interrupt
     c10:	e1 e7       	ldi	r30, 0x71	; 113
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	80 83       	st	Z, r24
        timer3.add(t);
    }
    void remove(Timer &t) {
        timer3.remove(t);
    }
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_ZL5uitosjPch>:
	void setP(int P){	timer2.kP = P;	}
	void setI(int I){	timer2.kI = I;	}
	void setD(int D){	timer2.kD = D;	}
	void usrCount(unsigned int step){
		usrCountTask.set(step);
		usrCall(usrCountTask);		
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	7c 01       	movw	r14, r24
     c2e:	8b 01       	movw	r16, r22
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	fa 01       	movw	r30, r20
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	e6 0f       	add	r30, r22
     c38:	f7 1f       	adc	r31, r23
     c3a:	9c 01       	movw	r18, r24
     c3c:	ad ec       	ldi	r26, 0xCD	; 205
     c3e:	bc ec       	ldi	r27, 0xCC	; 204
     c40:	30 d3       	rcall	.+1632   	; 0x12a2 <__umulhisi3>
     c42:	ec 01       	movw	r28, r24
     c44:	d6 95       	lsr	r29
     c46:	c7 95       	ror	r28
     c48:	d6 95       	lsr	r29
     c4a:	c7 95       	ror	r28
     c4c:	d6 95       	lsr	r29
     c4e:	c7 95       	ror	r28
     c50:	9e 01       	movw	r18, r28
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	ce 01       	movw	r24, r28
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	82 0f       	add	r24, r18
     c66:	93 1f       	adc	r25, r19
     c68:	97 01       	movw	r18, r14
     c6a:	28 1b       	sub	r18, r24
     c6c:	39 0b       	sbc	r19, r25
     c6e:	c9 01       	movw	r24, r18
     c70:	80 5d       	subi	r24, 0xD0	; 208
     c72:	80 83       	st	Z, r24
     c74:	42 50       	subi	r20, 0x02	; 2
     c76:	51 09       	sbc	r21, r1
     c78:	3a f1       	brmi	.+78     	; 0xcc8 <_ZL5uitosjPch+0xa8>
     c7a:	78 01       	movw	r14, r16
     c7c:	20 97       	sbiw	r28, 0x00	; 0
     c7e:	f1 f0       	breq	.+60     	; 0xcbc <_ZL5uitosjPch+0x9c>
     c80:	9e 01       	movw	r18, r28
     c82:	ad ec       	ldi	r26, 0xCD	; 205
     c84:	bc ec       	ldi	r27, 0xCC	; 204
     c86:	0d d3       	rcall	.+1562   	; 0x12a2 <__umulhisi3>
     c88:	ac 01       	movw	r20, r24
     c8a:	56 95       	lsr	r21
     c8c:	47 95       	ror	r20
     c8e:	56 95       	lsr	r21
     c90:	47 95       	ror	r20
     c92:	56 95       	lsr	r21
     c94:	47 95       	ror	r20
     c96:	9a 01       	movw	r18, r20
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	ca 01       	movw	r24, r20
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	9e 01       	movw	r18, r28
     cb0:	28 1b       	sub	r18, r24
     cb2:	39 0b       	sbc	r19, r25
     cb4:	90 e3       	ldi	r25, 0x30	; 48
     cb6:	92 0f       	add	r25, r18
     cb8:	ea 01       	movw	r28, r20
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <_ZL5uitosjPch+0x9e>
     cbc:	90 e2       	ldi	r25, 0x20	; 32
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	90 83       	st	Z, r25
     cc2:	ee 15       	cp	r30, r14
     cc4:	ff 05       	cpc	r31, r15
     cc6:	d1 f6       	brne	.-76     	; 0xc7c <_ZL5uitosjPch+0x5c>
     cc8:	cd 2b       	or	r28, r29
     cca:	19 f0       	breq	.+6      	; 0xcd2 <_ZL5uitosjPch+0xb2>
     ccc:	8a e2       	ldi	r24, 0x2A	; 42
     cce:	f8 01       	movw	r30, r16
     cd0:	80 83       	st	Z, r24
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	08 95       	ret

00000ce0 <_ZN12_GLOBAL__N_16Timer24taskEv>:
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	84 da       	rcall	.-2808   	; 0x1fc <_ZN6Button6getBF1Ev>
     cf4:	8c 01       	movw	r16, r24
     cf6:	85 da       	rcall	.-2806   	; 0x202 <_ZN6Button6getBF2Ev>
     cf8:	6e e1       	ldi	r22, 0x1E	; 30
     cfa:	8c ec       	ldi	r24, 0xCC	; 204
     cfc:	3c dd       	rcall	.-1416   	; 0x776 <_ZN2LL7read541ENS_5HC541Eh>
     cfe:	88 a7       	std	Y+40, r24	; 0x28
     d00:	25 dc       	rcall	.-1974   	; 0x54c <_Z12displacementc>
     d02:	08 97       	sbiw	r24, 0x08	; 8
     d04:	7c 01       	movw	r14, r24
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	c2 da       	rcall	.-2684   	; 0x290 <_Znwj>
     d0c:	6c 01       	movw	r12, r24
     d0e:	fc 01       	movw	r30, r24
     d10:	10 86       	std	Z+8, r1	; 0x08
     d12:	88 a5       	ldd	r24, Y+40	; 0x28
     d14:	f9 dc       	rcall	.-1550   	; 0x708 <_Z6mirrorc>
     d16:	f6 01       	movw	r30, r12
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	68 2f       	mov	r22, r24
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	ab 01       	movw	r20, r22
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <_ZN12_GLOBAL__N_16Timer24taskEv+0x4a>
     d26:	55 95       	asr	r21
     d28:	47 95       	ror	r20
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <_ZN12_GLOBAL__N_16Timer24taskEv+0x46>
     d2e:	40 fd       	sbrc	r20, 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <_ZN12_GLOBAL__N_16Timer24taskEv+0x56>
     d32:	90 e3       	ldi	r25, 0x30	; 48
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <_ZN12_GLOBAL__N_16Timer24taskEv+0x58>
     d36:	91 e3       	ldi	r25, 0x31	; 49
     d38:	91 93       	st	Z+, r25
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	28 30       	cpi	r18, 0x08	; 8
     d40:	31 05       	cpc	r19, r1
     d42:	71 f7       	brne	.-36     	; 0xd20 <_ZN12_GLOBAL__N_16Timer24taskEv+0x40>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	ac db       	rcall	.-2216   	; 0x4a2 <_ZN3LCD5printEhPc>
     d4a:	6a a1       	ldd	r22, Y+34	; 0x22
     d4c:	7b a1       	ldd	r23, Y+35	; 0x23
     d4e:	82 e3       	ldi	r24, 0x32	; 50
     d50:	86 9f       	mul	r24, r22
     d52:	90 01       	movw	r18, r0
     d54:	87 9f       	mul	r24, r23
     d56:	30 0d       	add	r19, r0
     d58:	11 24       	eor	r1, r1
     d5a:	4c a1       	ldd	r20, Y+36	; 0x24
     d5c:	58 a1       	ldd	r21, Y+32	; 0x20
     d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d60:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d62:	8e 0d       	add	r24, r14
     d64:	9f 1d       	adc	r25, r15
     d66:	28 17       	cp	r18, r24
     d68:	39 07       	cpc	r19, r25
     d6a:	0c f4       	brge	.+2      	; 0xd6e <_ZN12_GLOBAL__N_16Timer24taskEv+0x8e>
     d6c:	c9 01       	movw	r24, r18
     d6e:	31 95       	neg	r19
     d70:	21 95       	neg	r18
     d72:	31 09       	sbc	r19, r1
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	0c f4       	brge	.+2      	; 0xd7c <_ZN12_GLOBAL__N_16Timer24taskEv+0x9c>
     d7a:	c9 01       	movw	r24, r18
     d7c:	9d 8f       	std	Y+29, r25	; 0x1d
     d7e:	8c 8f       	std	Y+28, r24	; 0x1c
     d80:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d82:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d84:	f7 01       	movw	r30, r14
     d86:	e2 1b       	sub	r30, r18
     d88:	f3 0b       	sbc	r31, r19
     d8a:	9f 01       	movw	r18, r30
     d8c:	ff 8e       	std	Y+31, r15	; 0x1f
     d8e:	ee 8e       	std	Y+30, r14	; 0x1e
     d90:	5e 9d       	mul	r21, r14
     d92:	f0 01       	movw	r30, r0
     d94:	5f 9d       	mul	r21, r15
     d96:	f0 0d       	add	r31, r0
     d98:	11 24       	eor	r1, r1
     d9a:	77 27       	eor	r23, r23
     d9c:	6f d2       	rcall	.+1246   	; 0x127c <__divmodhi4>
     d9e:	e6 0f       	add	r30, r22
     da0:	f7 1f       	adc	r31, r23
     da2:	42 9f       	mul	r20, r18
     da4:	60 01       	movw	r12, r0
     da6:	43 9f       	mul	r20, r19
     da8:	d0 0c       	add	r13, r0
     daa:	11 24       	eor	r1, r1
     dac:	ce 0e       	add	r12, r30
     dae:	df 1e       	adc	r13, r31
     db0:	88 a5       	ldd	r24, Y+40	; 0x28
     db2:	aa dc       	rcall	.-1708   	; 0x708 <_Z6mirrorc>
     db4:	f8 01       	movw	r30, r16
     db6:	38 96       	adiw	r30, 0x08	; 8
     db8:	d8 01       	movw	r26, r16
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	68 2f       	mov	r22, r24
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	ab 01       	movw	r20, r22
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <_ZN12_GLOBAL__N_16Timer24taskEv+0xec>
     dc8:	55 95       	asr	r21
     dca:	47 95       	ror	r20
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <_ZN12_GLOBAL__N_16Timer24taskEv+0xe8>
     dd0:	40 fd       	sbrc	r20, 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <_ZN12_GLOBAL__N_16Timer24taskEv+0xf8>
     dd4:	9e e2       	ldi	r25, 0x2E	; 46
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <_ZN12_GLOBAL__N_16Timer24taskEv+0xfa>
     dd8:	9a e2       	ldi	r25, 0x2A	; 42
     dda:	92 93       	st	-Z, r25
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	ea 17       	cp	r30, r26
     de2:	fb 07       	cpc	r31, r27
     de4:	71 f7       	brne	.-36     	; 0xdc2 <_ZN12_GLOBAL__N_16Timer24taskEv+0xe2>
     de6:	ff 20       	and	r15, r15
     de8:	3c f4       	brge	.+14     	; 0xdf8 <_ZN12_GLOBAL__N_16Timer24taskEv+0x118>
     dea:	f1 94       	neg	r15
     dec:	e1 94       	neg	r14
     dee:	f1 08       	sbc	r15, r1
     df0:	8d e2       	ldi	r24, 0x2D	; 45
     df2:	f8 01       	movw	r30, r16
     df4:	81 87       	std	Z+9, r24	; 0x09
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <_ZN12_GLOBAL__N_16Timer24taskEv+0x11e>
     df8:	8b e2       	ldi	r24, 0x2B	; 43
     dfa:	f8 01       	movw	r30, r16
     dfc:	81 87       	std	Z+9, r24	; 0x09
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	b8 01       	movw	r22, r16
     e02:	66 5f       	subi	r22, 0xF6	; 246
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	c7 01       	movw	r24, r14
     e08:	0b df       	rcall	.-490    	; 0xc20 <_ZL5uitosjPch>
     e0a:	dd 20       	and	r13, r13
     e0c:	44 f4       	brge	.+16     	; 0xe1e <_ZN12_GLOBAL__N_16Timer24taskEv+0x13e>
     e0e:	88 27       	eor	r24, r24
     e10:	99 27       	eor	r25, r25
     e12:	8c 19       	sub	r24, r12
     e14:	9d 09       	sbc	r25, r13
     e16:	2d e2       	ldi	r18, 0x2D	; 45
     e18:	f8 01       	movw	r30, r16
     e1a:	23 87       	std	Z+11, r18	; 0x0b
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <_ZN12_GLOBAL__N_16Timer24taskEv+0x146>
     e1e:	8b e2       	ldi	r24, 0x2B	; 43
     e20:	f8 01       	movw	r30, r16
     e22:	83 87       	std	Z+11, r24	; 0x0b
     e24:	c6 01       	movw	r24, r12
     e26:	b8 01       	movw	r22, r16
     e28:	64 5f       	subi	r22, 0xF4	; 244
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	44 e0       	ldi	r20, 0x04	; 4
     e2e:	f8 de       	rcall	.-528    	; 0xc20 <_ZL5uitosjPch>
     e30:	68 89       	ldd	r22, Y+16	; 0x10
     e32:	79 89       	ldd	r23, Y+17	; 0x11
     e34:	cb 01       	movw	r24, r22
     e36:	8c 19       	sub	r24, r12
     e38:	9d 09       	sbc	r25, r13
     e3a:	96 01       	movw	r18, r12
     e3c:	26 0f       	add	r18, r22
     e3e:	37 1f       	adc	r19, r23
     e40:	2f 3f       	cpi	r18, 0xFF	; 255
     e42:	31 05       	cpc	r19, r1
     e44:	19 f0       	breq	.+6      	; 0xe4c <_ZN12_GLOBAL__N_16Timer24taskEv+0x16c>
     e46:	14 f0       	brlt	.+4      	; 0xe4c <_ZN12_GLOBAL__N_16Timer24taskEv+0x16c>
     e48:	2f ef       	ldi	r18, 0xFF	; 255
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8f 3f       	cpi	r24, 0xFF	; 255
     e4e:	91 05       	cpc	r25, r1
     e50:	19 f0       	breq	.+6      	; 0xe58 <_ZN12_GLOBAL__N_16Timer24taskEv+0x178>
     e52:	14 f0       	brlt	.+4      	; 0xe58 <_ZN12_GLOBAL__N_16Timer24taskEv+0x178>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	69 01       	movw	r12, r18
     e5a:	33 23       	and	r19, r19
     e5c:	14 f4       	brge	.+4      	; 0xe62 <_ZN12_GLOBAL__N_16Timer24taskEv+0x182>
     e5e:	c1 2c       	mov	r12, r1
     e60:	d1 2c       	mov	r13, r1
     e62:	c0 92 b3 00 	sts	0x00B3, r12
     e66:	99 23       	and	r25, r25
     e68:	14 f4       	brge	.+4      	; 0xe6e <_ZN12_GLOBAL__N_16Timer24taskEv+0x18e>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	80 93 b4 00 	sts	0x00B4, r24
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	08 95       	ret

00000e84 <__vector_11>:
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	86 b5       	in	r24, 0x26	; 38
     eac:	80 93 f7 01 	sts	0x01F7, r24
     eb0:	80 91 84 00 	lds	r24, 0x0084
     eb4:	80 93 f6 01 	sts	0x01F6, r24
     eb8:	88 ef       	ldi	r24, 0xF8	; 248
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	9e d1       	rcall	.+828    	; 0x11fa <_Z9isrAppendR4Task>
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <_ZN5Wheel3setEi>:
     ee4:	90 93 09 02 	sts	0x0209, r25
     ee8:	80 93 08 02 	sts	0x0208, r24
     eec:	08 95       	ret

00000eee <_ZN5Wheel9getSensorEv>:
     eee:	80 91 20 02 	lds	r24, 0x0220
     ef2:	08 95       	ret

00000ef4 <_ZN5Wheel8setSpeedEi>:
     ef4:	90 93 0b 02 	sts	0x020B, r25
     ef8:	80 93 0a 02 	sts	0x020A, r24
     efc:	08 95       	ret

00000efe <_ZN5Wheel4moveENS_8_commandE>:
     efe:	cf 93       	push	r28
     f00:	c8 2f       	mov	r28, r24
     f02:	81 11       	cpse	r24, r1
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <_ZN5Wheel4moveENS_8_commandE+0x14>
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	80 93 b0 00 	sts	0x00B0, r24
     f0c:	80 e8       	ldi	r24, 0x80	; 128
     f0e:	65 dc       	rcall	.-1846   	; 0x7da <_ZN2LL16backMotorControlEc>
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <_ZN5Wheel4moveENS_8_commandE+0x22>
     f12:	83 70       	andi	r24, 0x03	; 3
     f14:	84 68       	ori	r24, 0x84	; 132
     f16:	61 dc       	rcall	.-1854   	; 0x7da <_ZN2LL16backMotorControlEc>
     f18:	c0 7f       	andi	r28, 0xF0	; 240
     f1a:	c3 60       	ori	r28, 0x03	; 3
     f1c:	c0 93 b0 00 	sts	0x00B0, r28
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv>:
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
     f2a:	88 85       	ldd	r24, Y+8	; 0x08
     f2c:	88 23       	and	r24, r24
     f2e:	81 f0       	breq	.+32     	; 0xf50 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x2c>
     f30:	10 92 f1 01 	sts	0x01F1, r1
     f34:	10 92 f0 01 	sts	0x01F0, r1
     f38:	10 92 f3 01 	sts	0x01F3, r1
     f3c:	10 92 f2 01 	sts	0x01F2, r1
     f40:	86 b5       	in	r24, 0x26	; 38
     f42:	80 93 f5 01 	sts	0x01F5, r24
     f46:	80 91 84 00 	lds	r24, 0x0084
     f4a:	80 93 f4 01 	sts	0x01F4, r24
     f4e:	18 86       	std	Y+8, r1	; 0x08
     f50:	1f 82       	std	Y+7, r1	; 0x07
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	8a 30       	cpi	r24, 0x0A	; 10
     f58:	91 05       	cpc	r25, r1
     f5a:	60 f4       	brcc	.+24     	; 0xf74 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x50>
     f5c:	80 e3       	ldi	r24, 0x30	; 48
     f5e:	8c 83       	std	Y+4, r24	; 0x04
     f60:	8d 83       	std	Y+5, r24	; 0x05
     f62:	80 91 79 00 	lds	r24, 0x0079
     f66:	4a e0       	ldi	r20, 0x0A	; 10
     f68:	be 01       	movw	r22, r28
     f6a:	6a 5f       	subi	r22, 0xFA	; 250
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	f1 d2       	rcall	.+1506   	; 0x1554 <__itoa_ncheck>
     f72:	16 c0       	rjmp	.+44     	; 0xfa0 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x7c>
     f74:	84 36       	cpi	r24, 0x64	; 100
     f76:	91 05       	cpc	r25, r1
     f78:	58 f4       	brcc	.+22     	; 0xf90 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x6c>
     f7a:	80 e3       	ldi	r24, 0x30	; 48
     f7c:	8c 83       	std	Y+4, r24	; 0x04
     f7e:	80 91 79 00 	lds	r24, 0x0079
     f82:	4a e0       	ldi	r20, 0x0A	; 10
     f84:	be 01       	movw	r22, r28
     f86:	6b 5f       	subi	r22, 0xFB	; 251
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	e3 d2       	rcall	.+1478   	; 0x1554 <__itoa_ncheck>
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0x7c>
     f90:	80 91 79 00 	lds	r24, 0x0079
     f94:	4a e0       	ldi	r20, 0x0A	; 10
     f96:	be 01       	movw	r22, r28
     f98:	6c 5f       	subi	r22, 0xFC	; 252
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	da d2       	rcall	.+1460   	; 0x1554 <__itoa_ncheck>
     fa0:	be 01       	movw	r22, r28
     fa2:	6c 5f       	subi	r22, 0xFC	; 252
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	7c da       	rcall	.-2824   	; 0x4a2 <_ZN3LCD5printEhPc>
     faa:	56 b5       	in	r21, 0x26	; 38
     fac:	40 91 84 00 	lds	r20, 0x0084
     fb0:	20 91 f0 01 	lds	r18, 0x01F0
     fb4:	30 91 f1 01 	lds	r19, 0x01F1
     fb8:	80 91 f2 01 	lds	r24, 0x01F2
     fbc:	90 91 f3 01 	lds	r25, 0x01F3
     fc0:	28 0f       	add	r18, r24
     fc2:	39 1f       	adc	r19, r25
     fc4:	25 0f       	add	r18, r21
     fc6:	31 1d       	adc	r19, r1
     fc8:	24 0f       	add	r18, r20
     fca:	31 1d       	adc	r19, r1
     fcc:	80 91 f5 01 	lds	r24, 0x01F5
     fd0:	28 1b       	sub	r18, r24
     fd2:	31 09       	sbc	r19, r1
     fd4:	80 91 f4 01 	lds	r24, 0x01F4
     fd8:	28 1b       	sub	r18, r24
     fda:	31 09       	sbc	r19, r1
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	28 17       	cp	r18, r24
     fe2:	39 07       	cpc	r19, r25
     fe4:	18 f4       	brcc	.+6      	; 0xfec <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0xc8>
     fe6:	ce 01       	movw	r24, r28
     fe8:	35 d1       	rcall	.+618    	; 0x1254 <_Z9kerAppendR4Task>
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <_ZN12_GLOBAL__N_112UsrCountTask4taskEv+0xcc>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	87 df       	rcall	.-242    	; 0xefe <_ZN5Wheel4moveENS_8_commandE>
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <_ZN5Wheel4setPEi>:
     ff6:	90 93 19 02 	sts	0x0219, r25
     ffa:	80 93 18 02 	sts	0x0218, r24
     ffe:	08 95       	ret

00001000 <_ZN5Wheel4setIEi>:
    1000:	90 93 1b 02 	sts	0x021B, r25
    1004:	80 93 1a 02 	sts	0x021A, r24
    1008:	08 95       	ret

0000100a <_ZN5Wheel4setDEi>:
    100a:	90 93 1d 02 	sts	0x021D, r25
    100e:	80 93 1c 02 	sts	0x021C, r24
    1012:	08 95       	ret

00001014 <_GLOBAL__sub_I___vector_11>:
	}
	
}
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	8a ef       	ldi	r24, 0xFA	; 250
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	46 d0       	rcall	.+140    	; 0x10aa <_ZN7ElementC1Ev>
    class Timer2: public Task  {
        public:
			unsigned char L_speed_limit, R_speed_limit;
            unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
            unsigned int L_count, R_count,speed;
            Timer2(void) {
    101e:	c8 ef       	ldi	r28, 0xF8	; 248
    1020:	d1 e0       	ldi	r29, 0x01	; 1
    1022:	8a e4       	ldi	r24, 0x4A	; 74
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	99 83       	std	Y+1, r25	; 0x01
    1028:	88 83       	st	Y, r24
    enum _TCCR2A {	A_CON = 0b10000011, B_CON = 0b00100011, DISCON = 0b11};
	
	class PIDcontrol {
	public:
		PIDcontrol(void){
			iTerm = lastInput = 0;	
    102a:	1f 8a       	std	Y+23, r1	; 0x17
    102c:	1e 8a       	std	Y+22, r1	; 0x16
    102e:	1d 8a       	std	Y+21, r1	; 0x15
    1030:	1c 8a       	std	Y+20, r1	; 0x14
    1032:	1b 8e       	std	Y+27, r1	; 0x1b
    1034:	1a 8e       	std	Y+26, r1	; 0x1a
    1036:	19 8e       	std	Y+25, r1	; 0x19
    1038:	18 8e       	std	Y+24, r1	; 0x18
    103a:	1f 8e       	std	Y+31, r1	; 0x1f
    103c:	1e 8e       	std	Y+30, r1	; 0x1e
    103e:	1d 8e       	std	Y+29, r1	; 0x1d
    1040:	1c 8e       	std	Y+28, r1	; 0x1c
        public:
			unsigned char L_speed_limit, R_speed_limit;
            unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
            unsigned int L_count, R_count,speed;
            Timer2(void) {
                DDRD |= _BV(7);
    1042:	57 9a       	sbi	0x0a, 7	; 10
                DDRD |= _BV(6);
    1044:	56 9a       	sbi	0x0a, 6	; 10
                TCCR2A = DISCON;
    1046:	e0 eb       	ldi	r30, 0xB0	; 176
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	90 83       	st	Z, r25
                TCCR2B = 0b111;
    104e:	87 e0       	ldi	r24, 0x07	; 7
    1050:	80 93 b1 00 	sts	0x00B1, r24
                TCCR0B = TCCR1B = 7;
    1054:	80 93 81 00 	sts	0x0081, r24
    1058:	85 bd       	out	0x25, r24	; 37
                ASSR &= ~_BV(AS2);
    105a:	a6 eb       	ldi	r26, 0xB6	; 182
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	8c 91       	ld	r24, X
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	8c 93       	st	X, r24
				kI = 20;
				kD = 10;*/
            }
            void move(unsigned char command) {
                if (command == Wheel::STOP) {
                    TCCR2A = DISCON;
    1064:	90 83       	st	Z, r25
                    LL::backMotorControl(ON);
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	b8 db       	rcall	.-2192   	; 0x7da <_ZN2LL16backMotorControlEc>
                TCCR2A = DISCON;
                TCCR2B = 0b111;
                TCCR0B = TCCR1B = 7;
                ASSR &= ~_BV(AS2);
                move(Wheel::STOP);
                L_OCR = R_OCR = 128;
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	80 93 b4 00 	sts	0x00B4, r24
    1070:	80 93 b3 00 	sts	0x00B3, r24
				choosesensor=0;
    1074:	1f a2       	std	Y+39, r1	; 0x27
    1076:	1e a2       	std	Y+38, r1	; 0x26
                TIMSK2 |= _BV(TOIE2);	// enable overflow interrupt
    1078:	e0 e7       	ldi	r30, 0x70	; 112
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	80 83       	st	Z, r24
				speed=60;
    1082:	8c e3       	ldi	r24, 0x3C	; 60
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	99 8b       	std	Y+17, r25	; 0x11
    1088:	88 8b       	std	Y+16, r24	; 0x10
				trackspeed = 5;
    108a:	85 e0       	ldi	r24, 0x05	; 5
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9b 8b       	std	Y+19, r25	; 0x13
    1090:	8a 8b       	std	Y+18, r24	; 0x12
    1092:	87 ee       	ldi	r24, 0xE7	; 231
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	09 d0       	rcall	.+18     	; 0x10aa <_ZN7ElementC1Ev>

    }	timer2;
	
		 unsigned char L_isr, R_isr, L_last, R_last, L_speed, R_speed;
		 unsigned int L_count, R_count;
		 class UsrCountTask :public Task{
    1098:	80 e5       	ldi	r24, 0x50	; 80
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	90 93 e6 01 	sts	0x01E6, r25
    10a0:	80 93 e5 01 	sts	0x01E5, r24
	void usrCount(unsigned int step){
		usrCountTask.set(step);
		usrCall(usrCountTask);		
	}
	
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_ZN7ElementC1Ev>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	08 95       	ret

000010b2 <_ZN4ListC1Ev>:
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	f8 df       	rcall	.-16     	; 0x10aa <_ZN7ElementC1Ev>
    10ba:	db 83       	std	Y+3, r29	; 0x03
    10bc:	ca 83       	std	Y+2, r28	; 0x02
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <_ZN4List7getNextEP7Element>:
    10c4:	61 15       	cp	r22, r1
    10c6:	71 05       	cpc	r23, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <_ZN4List7getNextEP7Element+0x8>
    10ca:	bc 01       	movw	r22, r24
    10cc:	fb 01       	movw	r30, r22
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	19 f4       	brne	.+6      	; 0x10de <_ZN4List7getNextEP7Element+0x1a>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	08 95       	ret
    10de:	82 2f       	mov	r24, r18
    10e0:	93 2f       	mov	r25, r19
    10e2:	08 95       	ret

000010e4 <_ZN4List4pushER7Element>:
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	e8 17       	cp	r30, r24
    10ec:	f9 07       	cpc	r31, r25
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <_ZN4List4pushER7Element+0x10>
    10f0:	73 83       	std	Z+3, r23	; 0x03
    10f2:	62 83       	std	Z+2, r22	; 0x02
    10f4:	db 01       	movw	r26, r22
    10f6:	8d 93       	st	X+, r24
    10f8:	9c 93       	st	X, r25
    10fa:	71 83       	std	Z+1, r23	; 0x01
    10fc:	60 83       	st	Z, r22
    10fe:	08 95       	ret

00001100 <_ZN4List6appendER7Element>:
    1100:	dc 01       	movw	r26, r24
    1102:	12 96       	adiw	r26, 0x02	; 2
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	13 97       	sbiw	r26, 0x03	; 3
    110a:	71 83       	std	Z+1, r23	; 0x01
    110c:	60 83       	st	Z, r22
    110e:	13 96       	adiw	r26, 0x03	; 3
    1110:	7c 93       	st	X, r23
    1112:	6e 93       	st	-X, r22
    1114:	12 97       	sbiw	r26, 0x02	; 2
    1116:	fb 01       	movw	r30, r22
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	08 95       	ret

0000111e <_ZN4List3popEv>:
    111e:	dc 01       	movw	r26, r24
    1120:	ed 91       	ld	r30, X+
    1122:	fc 91       	ld	r31, X
    1124:	11 97       	sbiw	r26, 0x01	; 1
    1126:	8e 17       	cp	r24, r30
    1128:	9f 07       	cpc	r25, r31
    112a:	79 f0       	breq	.+30     	; 0x114a <_ZN4List3popEv+0x2c>
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	9c 93       	st	X, r25
    1134:	8e 93       	st	-X, r24
    1136:	8a 17       	cp	r24, r26
    1138:	9b 07       	cpc	r25, r27
    113a:	21 f4       	brne	.+8      	; 0x1144 <_ZN4List3popEv+0x26>
    113c:	13 96       	adiw	r26, 0x03	; 3
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
    1142:	12 97       	sbiw	r26, 0x02	; 2
    1144:	f1 83       	std	Z+1, r31	; 0x01
    1146:	e0 83       	st	Z, r30
    1148:	02 c0       	rjmp	.+4      	; 0x114e <_ZN4List3popEv+0x30>
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	cf 01       	movw	r24, r30
    1150:	08 95       	ret

00001152 <_ZN4List6removeER7Element>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ac 01       	movw	r20, r24
    1158:	fc 01       	movw	r30, r24
    115a:	17 c0       	rjmp	.+46     	; 0x118a <_ZN4List6removeER7Element+0x38>
    115c:	26 17       	cp	r18, r22
    115e:	37 07       	cpc	r19, r23
    1160:	99 f4       	brne	.+38     	; 0x1188 <_ZN4List6removeER7Element+0x36>
    1162:	df 01       	movw	r26, r30
    1164:	ec 01       	movw	r28, r24
    1166:	2a 81       	ldd	r18, Y+2	; 0x02
    1168:	3b 81       	ldd	r19, Y+3	; 0x03
    116a:	26 17       	cp	r18, r22
    116c:	37 07       	cpc	r19, r23
    116e:	11 f4       	brne	.+4      	; 0x1174 <_ZN4List6removeER7Element+0x22>
    1170:	fb 83       	std	Y+3, r31	; 0x03
    1172:	ea 83       	std	Y+2, r30	; 0x02
    1174:	eb 01       	movw	r28, r22
    1176:	88 81       	ld	r24, Y
    1178:	99 81       	ldd	r25, Y+1	; 0x01
    117a:	8d 93       	st	X+, r24
    117c:	9c 93       	st	X, r25
    117e:	79 83       	std	Y+1, r23	; 0x01
    1180:	68 83       	st	Y, r22
    1182:	8e 2f       	mov	r24, r30
    1184:	9f 2f       	mov	r25, r31
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <_ZN4List6removeER7Element+0x46>
    1188:	f9 01       	movw	r30, r18
    118a:	20 81       	ld	r18, Z
    118c:	31 81       	ldd	r19, Z+1	; 0x01
    118e:	42 17       	cp	r20, r18
    1190:	53 07       	cpc	r21, r19
    1192:	21 f7       	brne	.-56     	; 0x115c <_ZN4List6removeER7Element+0xa>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <_ZN5QueueC1EPS_>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    11a8:	8b 01       	movw	r16, r22
    11aa:	83 df       	rcall	.-250    	; 0x10b2 <_ZN4ListC1Ev>
    11ac:	1d 83       	std	Y+5, r17	; 0x05
    11ae:	0c 83       	std	Y+4, r16	; 0x04
    11b0:	1e 82       	std	Y+6, r1	; 0x06
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <_ZN5Queue6appendER4Task>:
    11bc:	fc 01       	movw	r30, r24
    11be:	26 81       	ldd	r18, Z+6	; 0x06
    11c0:	22 23       	and	r18, r18
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <_ZN5Queue6appendER4Task+0x14>
    11c4:	6e 5f       	subi	r22, 0xFE	; 254
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	89 e2       	ldi	r24, 0x29	; 41
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	8b cf       	rjmp	.-234    	; 0x10e4 <_ZN4List4pushER7Element>
    11ce:	08 95       	ret
    11d0:	6e 5f       	subi	r22, 0xFE	; 254
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	95 cf       	rjmp	.-214    	; 0x1100 <_ZN4List6appendER7Element>
    11d6:	08 95       	ret

000011d8 <_ZN5Queue3popEv>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	8e 83       	std	Y+6, r24	; 0x06
    11e2:	ce 01       	movw	r24, r28
    11e4:	9c df       	rcall	.-200    	; 0x111e <_ZN4List3popEv>
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	11 f0       	breq	.+4      	; 0x11ee <_ZN5Queue3popEv+0x16>
    11ea:	02 97       	sbiw	r24, 0x02	; 2
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <_ZN5Queue3popEv+0x1a>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	1e 82       	std	Y+6, r1	; 0x06
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <_Z9isrAppendR4Task>:
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	bc 01       	movw	r22, r24
    1204:	82 e2       	ldi	r24, 0x22	; 34
    1206:	92 e0       	ldi	r25, 0x02	; 2
    1208:	d9 df       	rcall	.-78     	; 0x11bc <_ZN5Queue6appendER4Task>
    120a:	80 91 21 02 	lds	r24, 0x0221
    120e:	81 11       	cpse	r24, r1
    1210:	1c c0       	rjmp	.+56     	; 0x124a <_Z9isrAppendR4Task+0x50>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 21 02 	sts	0x0221, r24
    1218:	78 94       	sei
    121a:	c2 e2       	ldi	r28, 0x22	; 34
    121c:	d2 e0       	ldi	r29, 0x02	; 2
    121e:	8e 01       	movw	r16, r28
    1220:	ce 01       	movw	r24, r28
    1222:	da df       	rcall	.-76     	; 0x11d8 <_ZN5Queue3popEv>
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	49 f0       	breq	.+18     	; 0x123a <_Z9isrAppendR4Task+0x40>
    1228:	dc 01       	movw	r26, r24
    122a:	ed 91       	ld	r30, X+
    122c:	fc 91       	ld	r31, X
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	09 95       	icall
    1236:	e8 01       	movw	r28, r16
    1238:	f3 cf       	rjmp	.-26     	; 0x1220 <_Z9isrAppendR4Task+0x26>
    123a:	0c 80       	ldd	r0, Y+4	; 0x04
    123c:	dd 81       	ldd	r29, Y+5	; 0x05
    123e:	c0 2d       	mov	r28, r0
    1240:	20 97       	sbiw	r28, 0x00	; 0
    1242:	71 f7       	brne	.-36     	; 0x1220 <_Z9isrAppendR4Task+0x26>
    1244:	f8 94       	cli
    1246:	10 92 21 02 	sts	0x0221, r1
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <_Z9kerAppendR4Task>:
    1254:	bc 01       	movw	r22, r24
    1256:	89 e2       	ldi	r24, 0x29	; 41
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	b0 cf       	rjmp	.-160    	; 0x11bc <_ZN5Queue6appendER4Task>
    125c:	08 95       	ret

0000125e <_Z7usrCallR4Task>:
    125e:	f8 94       	cli
    1260:	cc df       	rcall	.-104    	; 0x11fa <_Z9isrAppendR4Task>
    1262:	78 94       	sei
    1264:	08 95       	ret

00001266 <_GLOBAL__sub_I__Z5__seiv>:
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	89 e2       	ldi	r24, 0x29	; 41
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	97 df       	rcall	.-210    	; 0x119e <_ZN5QueueC1EPS_>
    1270:	69 e2       	ldi	r22, 0x29	; 41
    1272:	72 e0       	ldi	r23, 0x02	; 2
    1274:	82 e2       	ldi	r24, 0x22	; 34
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	92 cf       	rjmp	.-220    	; 0x119e <_ZN5QueueC1EPS_>
    127a:	08 95       	ret

0000127c <__divmodhi4>:
    127c:	97 fb       	bst	r25, 7
    127e:	07 2e       	mov	r0, r23
    1280:	16 f4       	brtc	.+4      	; 0x1286 <__divmodhi4+0xa>
    1282:	00 94       	com	r0
    1284:	06 d0       	rcall	.+12     	; 0x1292 <__divmodhi4_neg1>
    1286:	77 fd       	sbrc	r23, 7
    1288:	08 d0       	rcall	.+16     	; 0x129a <__divmodhi4_neg2>
    128a:	1a d0       	rcall	.+52     	; 0x12c0 <__udivmodhi4>
    128c:	07 fc       	sbrc	r0, 7
    128e:	05 d0       	rcall	.+10     	; 0x129a <__divmodhi4_neg2>
    1290:	3e f4       	brtc	.+14     	; 0x12a0 <__divmodhi4_exit>

00001292 <__divmodhi4_neg1>:
    1292:	90 95       	com	r25
    1294:	81 95       	neg	r24
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__divmodhi4_neg2>:
    129a:	70 95       	com	r23
    129c:	61 95       	neg	r22
    129e:	7f 4f       	sbci	r23, 0xFF	; 255

000012a0 <__divmodhi4_exit>:
    12a0:	08 95       	ret

000012a2 <__umulhisi3>:
    12a2:	a2 9f       	mul	r26, r18
    12a4:	b0 01       	movw	r22, r0
    12a6:	b3 9f       	mul	r27, r19
    12a8:	c0 01       	movw	r24, r0
    12aa:	a3 9f       	mul	r26, r19
    12ac:	70 0d       	add	r23, r0
    12ae:	81 1d       	adc	r24, r1
    12b0:	11 24       	eor	r1, r1
    12b2:	91 1d       	adc	r25, r1
    12b4:	b2 9f       	mul	r27, r18
    12b6:	70 0d       	add	r23, r0
    12b8:	81 1d       	adc	r24, r1
    12ba:	11 24       	eor	r1, r1
    12bc:	91 1d       	adc	r25, r1
    12be:	08 95       	ret

000012c0 <__udivmodhi4>:
    12c0:	aa 1b       	sub	r26, r26
    12c2:	bb 1b       	sub	r27, r27
    12c4:	51 e1       	ldi	r21, 0x11	; 17
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <__udivmodhi4_ep>

000012c8 <__udivmodhi4_loop>:
    12c8:	aa 1f       	adc	r26, r26
    12ca:	bb 1f       	adc	r27, r27
    12cc:	a6 17       	cp	r26, r22
    12ce:	b7 07       	cpc	r27, r23
    12d0:	10 f0       	brcs	.+4      	; 0x12d6 <__udivmodhi4_ep>
    12d2:	a6 1b       	sub	r26, r22
    12d4:	b7 0b       	sbc	r27, r23

000012d6 <__udivmodhi4_ep>:
    12d6:	88 1f       	adc	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	5a 95       	dec	r21
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__udivmodhi4_loop>
    12de:	80 95       	com	r24
    12e0:	90 95       	com	r25
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	08 95       	ret

000012e8 <__tablejump2__>:
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	00 24       	eor	r0, r0
    12ee:	00 1c       	adc	r0, r0
    12f0:	0b be       	out	0x3b, r0	; 59
    12f2:	07 90       	elpm	r0, Z+
    12f4:	f6 91       	elpm	r31, Z
    12f6:	e0 2d       	mov	r30, r0
    12f8:	09 94       	ijmp

000012fa <malloc>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	10 f4       	brcc	.+4      	; 0x1308 <malloc+0xe>
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	e0 91 32 02 	lds	r30, 0x0232
    130c:	f0 91 33 02 	lds	r31, 0x0233
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c0 e0       	ldi	r28, 0x00	; 0
    1316:	d0 e0       	ldi	r29, 0x00	; 0
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	11 f1       	breq	.+68     	; 0x1360 <malloc+0x66>
    131c:	40 81       	ld	r20, Z
    131e:	51 81       	ldd	r21, Z+1	; 0x01
    1320:	48 17       	cp	r20, r24
    1322:	59 07       	cpc	r21, r25
    1324:	c0 f0       	brcs	.+48     	; 0x1356 <malloc+0x5c>
    1326:	48 17       	cp	r20, r24
    1328:	59 07       	cpc	r21, r25
    132a:	61 f4       	brne	.+24     	; 0x1344 <malloc+0x4a>
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 97       	sbiw	r28, 0x00	; 0
    1332:	19 f0       	breq	.+6      	; 0x133a <malloc+0x40>
    1334:	9b 83       	std	Y+3, r25	; 0x03
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <malloc+0x96>
    133a:	90 93 33 02 	sts	0x0233, r25
    133e:	80 93 32 02 	sts	0x0232, r24
    1342:	26 c0       	rjmp	.+76     	; 0x1390 <malloc+0x96>
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	19 f0       	breq	.+6      	; 0x1350 <malloc+0x56>
    134a:	42 17       	cp	r20, r18
    134c:	53 07       	cpc	r21, r19
    134e:	18 f4       	brcc	.+6      	; 0x1356 <malloc+0x5c>
    1350:	9a 01       	movw	r18, r20
    1352:	be 01       	movw	r22, r28
    1354:	df 01       	movw	r26, r30
    1356:	ef 01       	movw	r28, r30
    1358:	02 80       	ldd	r0, Z+2	; 0x02
    135a:	f3 81       	ldd	r31, Z+3	; 0x03
    135c:	e0 2d       	mov	r30, r0
    135e:	dc cf       	rjmp	.-72     	; 0x1318 <malloc+0x1e>
    1360:	21 15       	cp	r18, r1
    1362:	31 05       	cpc	r19, r1
    1364:	09 f1       	breq	.+66     	; 0x13a8 <malloc+0xae>
    1366:	28 1b       	sub	r18, r24
    1368:	39 0b       	sbc	r19, r25
    136a:	24 30       	cpi	r18, 0x04	; 4
    136c:	31 05       	cpc	r19, r1
    136e:	90 f4       	brcc	.+36     	; 0x1394 <malloc+0x9a>
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	8d 91       	ld	r24, X+
    1374:	9c 91       	ld	r25, X
    1376:	13 97       	sbiw	r26, 0x03	; 3
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	21 f0       	breq	.+8      	; 0x1386 <malloc+0x8c>
    137e:	fb 01       	movw	r30, r22
    1380:	93 83       	std	Z+3, r25	; 0x03
    1382:	82 83       	std	Z+2, r24	; 0x02
    1384:	04 c0       	rjmp	.+8      	; 0x138e <malloc+0x94>
    1386:	90 93 33 02 	sts	0x0233, r25
    138a:	80 93 32 02 	sts	0x0232, r24
    138e:	fd 01       	movw	r30, r26
    1390:	32 96       	adiw	r30, 0x02	; 2
    1392:	44 c0       	rjmp	.+136    	; 0x141c <malloc+0x122>
    1394:	fd 01       	movw	r30, r26
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	81 93       	st	Z+, r24
    139c:	91 93       	st	Z+, r25
    139e:	22 50       	subi	r18, 0x02	; 2
    13a0:	31 09       	sbc	r19, r1
    13a2:	2d 93       	st	X+, r18
    13a4:	3c 93       	st	X, r19
    13a6:	3a c0       	rjmp	.+116    	; 0x141c <malloc+0x122>
    13a8:	20 91 30 02 	lds	r18, 0x0230
    13ac:	30 91 31 02 	lds	r19, 0x0231
    13b0:	23 2b       	or	r18, r19
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <malloc+0xca>
    13b4:	20 91 02 01 	lds	r18, 0x0102
    13b8:	30 91 03 01 	lds	r19, 0x0103
    13bc:	30 93 31 02 	sts	0x0231, r19
    13c0:	20 93 30 02 	sts	0x0230, r18
    13c4:	20 91 00 01 	lds	r18, 0x0100
    13c8:	30 91 01 01 	lds	r19, 0x0101
    13cc:	21 15       	cp	r18, r1
    13ce:	31 05       	cpc	r19, r1
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <malloc+0xe8>
    13d2:	2d b7       	in	r18, 0x3d	; 61
    13d4:	3e b7       	in	r19, 0x3e	; 62
    13d6:	40 91 04 01 	lds	r20, 0x0104
    13da:	50 91 05 01 	lds	r21, 0x0105
    13de:	24 1b       	sub	r18, r20
    13e0:	35 0b       	sbc	r19, r21
    13e2:	e0 91 30 02 	lds	r30, 0x0230
    13e6:	f0 91 31 02 	lds	r31, 0x0231
    13ea:	e2 17       	cp	r30, r18
    13ec:	f3 07       	cpc	r31, r19
    13ee:	a0 f4       	brcc	.+40     	; 0x1418 <malloc+0x11e>
    13f0:	2e 1b       	sub	r18, r30
    13f2:	3f 0b       	sbc	r19, r31
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	78 f0       	brcs	.+30     	; 0x1418 <malloc+0x11e>
    13fa:	ac 01       	movw	r20, r24
    13fc:	4e 5f       	subi	r20, 0xFE	; 254
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	24 17       	cp	r18, r20
    1402:	35 07       	cpc	r19, r21
    1404:	48 f0       	brcs	.+18     	; 0x1418 <malloc+0x11e>
    1406:	4e 0f       	add	r20, r30
    1408:	5f 1f       	adc	r21, r31
    140a:	50 93 31 02 	sts	0x0231, r21
    140e:	40 93 30 02 	sts	0x0230, r20
    1412:	81 93       	st	Z+, r24
    1414:	91 93       	st	Z+, r25
    1416:	02 c0       	rjmp	.+4      	; 0x141c <malloc+0x122>
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	cf 01       	movw	r24, r30
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <free>:
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	09 f4       	brne	.+2      	; 0x1432 <free+0xe>
    1430:	8c c0       	rjmp	.+280    	; 0x154a <free+0x126>
    1432:	fc 01       	movw	r30, r24
    1434:	32 97       	sbiw	r30, 0x02	; 2
    1436:	13 82       	std	Z+3, r1	; 0x03
    1438:	12 82       	std	Z+2, r1	; 0x02
    143a:	00 91 32 02 	lds	r16, 0x0232
    143e:	10 91 33 02 	lds	r17, 0x0233
    1442:	01 15       	cp	r16, r1
    1444:	11 05       	cpc	r17, r1
    1446:	81 f4       	brne	.+32     	; 0x1468 <free+0x44>
    1448:	20 81       	ld	r18, Z
    144a:	31 81       	ldd	r19, Z+1	; 0x01
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	20 91 30 02 	lds	r18, 0x0230
    1454:	30 91 31 02 	lds	r19, 0x0231
    1458:	28 17       	cp	r18, r24
    145a:	39 07       	cpc	r19, r25
    145c:	79 f5       	brne	.+94     	; 0x14bc <free+0x98>
    145e:	f0 93 31 02 	sts	0x0231, r31
    1462:	e0 93 30 02 	sts	0x0230, r30
    1466:	71 c0       	rjmp	.+226    	; 0x154a <free+0x126>
    1468:	d8 01       	movw	r26, r16
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	ae 17       	cp	r26, r30
    1470:	bf 07       	cpc	r27, r31
    1472:	50 f4       	brcc	.+20     	; 0x1488 <free+0x64>
    1474:	12 96       	adiw	r26, 0x02	; 2
    1476:	2d 91       	ld	r18, X+
    1478:	3c 91       	ld	r19, X
    147a:	13 97       	sbiw	r26, 0x03	; 3
    147c:	ad 01       	movw	r20, r26
    147e:	21 15       	cp	r18, r1
    1480:	31 05       	cpc	r19, r1
    1482:	09 f1       	breq	.+66     	; 0x14c6 <free+0xa2>
    1484:	d9 01       	movw	r26, r18
    1486:	f3 cf       	rjmp	.-26     	; 0x146e <free+0x4a>
    1488:	9d 01       	movw	r18, r26
    148a:	da 01       	movw	r26, r20
    148c:	33 83       	std	Z+3, r19	; 0x03
    148e:	22 83       	std	Z+2, r18	; 0x02
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	86 0f       	add	r24, r22
    1496:	97 1f       	adc	r25, r23
    1498:	82 17       	cp	r24, r18
    149a:	93 07       	cpc	r25, r19
    149c:	69 f4       	brne	.+26     	; 0x14b8 <free+0x94>
    149e:	ec 01       	movw	r28, r24
    14a0:	28 81       	ld	r18, Y
    14a2:	39 81       	ldd	r19, Y+1	; 0x01
    14a4:	26 0f       	add	r18, r22
    14a6:	37 1f       	adc	r19, r23
    14a8:	2e 5f       	subi	r18, 0xFE	; 254
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	31 83       	std	Z+1, r19	; 0x01
    14ae:	20 83       	st	Z, r18
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	93 83       	std	Z+3, r25	; 0x03
    14b6:	82 83       	std	Z+2, r24	; 0x02
    14b8:	45 2b       	or	r20, r21
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <free+0xa2>
    14bc:	f0 93 33 02 	sts	0x0233, r31
    14c0:	e0 93 32 02 	sts	0x0232, r30
    14c4:	42 c0       	rjmp	.+132    	; 0x154a <free+0x126>
    14c6:	13 96       	adiw	r26, 0x03	; 3
    14c8:	fc 93       	st	X, r31
    14ca:	ee 93       	st	-X, r30
    14cc:	12 97       	sbiw	r26, 0x02	; 2
    14ce:	ed 01       	movw	r28, r26
    14d0:	49 91       	ld	r20, Y+
    14d2:	59 91       	ld	r21, Y+
    14d4:	9e 01       	movw	r18, r28
    14d6:	24 0f       	add	r18, r20
    14d8:	35 1f       	adc	r19, r21
    14da:	e2 17       	cp	r30, r18
    14dc:	f3 07       	cpc	r31, r19
    14de:	71 f4       	brne	.+28     	; 0x14fc <free+0xd8>
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	84 0f       	add	r24, r20
    14e6:	95 1f       	adc	r25, r21
    14e8:	02 96       	adiw	r24, 0x02	; 2
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	9c 93       	st	X, r25
    14ee:	8e 93       	st	-X, r24
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	13 96       	adiw	r26, 0x03	; 3
    14f6:	9c 93       	st	X, r25
    14f8:	8e 93       	st	-X, r24
    14fa:	12 97       	sbiw	r26, 0x02	; 2
    14fc:	e0 e0       	ldi	r30, 0x00	; 0
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	d8 01       	movw	r26, r16
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	8d 91       	ld	r24, X+
    1506:	9c 91       	ld	r25, X
    1508:	13 97       	sbiw	r26, 0x03	; 3
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	19 f0       	breq	.+6      	; 0x1514 <free+0xf0>
    150e:	f8 01       	movw	r30, r16
    1510:	8c 01       	movw	r16, r24
    1512:	f6 cf       	rjmp	.-20     	; 0x1500 <free+0xdc>
    1514:	8d 91       	ld	r24, X+
    1516:	9c 91       	ld	r25, X
    1518:	98 01       	movw	r18, r16
    151a:	2e 5f       	subi	r18, 0xFE	; 254
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	20 91 30 02 	lds	r18, 0x0230
    1526:	30 91 31 02 	lds	r19, 0x0231
    152a:	28 17       	cp	r18, r24
    152c:	39 07       	cpc	r19, r25
    152e:	69 f4       	brne	.+26     	; 0x154a <free+0x126>
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	29 f4       	brne	.+10     	; 0x153e <free+0x11a>
    1534:	10 92 33 02 	sts	0x0233, r1
    1538:	10 92 32 02 	sts	0x0232, r1
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <free+0x11e>
    153e:	13 82       	std	Z+3, r1	; 0x03
    1540:	12 82       	std	Z+2, r1	; 0x02
    1542:	10 93 31 02 	sts	0x0231, r17
    1546:	00 93 30 02 	sts	0x0230, r16
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <__itoa_ncheck>:
    1554:	bb 27       	eor	r27, r27
    1556:	4a 30       	cpi	r20, 0x0A	; 10
    1558:	31 f4       	brne	.+12     	; 0x1566 <__itoa_ncheck+0x12>
    155a:	99 23       	and	r25, r25
    155c:	22 f4       	brpl	.+8      	; 0x1566 <__itoa_ncheck+0x12>
    155e:	bd e2       	ldi	r27, 0x2D	; 45
    1560:	90 95       	com	r25
    1562:	81 95       	neg	r24
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	01 c0       	rjmp	.+2      	; 0x156a <__utoa_common>

00001568 <__utoa_ncheck>:
    1568:	bb 27       	eor	r27, r27

0000156a <__utoa_common>:
    156a:	fb 01       	movw	r30, r22
    156c:	55 27       	eor	r21, r21
    156e:	aa 27       	eor	r26, r26
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	aa 1f       	adc	r26, r26
    1576:	a4 17       	cp	r26, r20
    1578:	10 f0       	brcs	.+4      	; 0x157e <__utoa_common+0x14>
    157a:	a4 1b       	sub	r26, r20
    157c:	83 95       	inc	r24
    157e:	50 51       	subi	r21, 0x10	; 16
    1580:	b9 f7       	brne	.-18     	; 0x1570 <__utoa_common+0x6>
    1582:	a0 5d       	subi	r26, 0xD0	; 208
    1584:	aa 33       	cpi	r26, 0x3A	; 58
    1586:	08 f0       	brcs	.+2      	; 0x158a <__utoa_common+0x20>
    1588:	a9 5d       	subi	r26, 0xD9	; 217
    158a:	a1 93       	st	Z+, r26
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	79 f7       	brne	.-34     	; 0x156e <__utoa_common+0x4>
    1590:	b1 11       	cpse	r27, r1
    1592:	b1 93       	st	Z+, r27
    1594:	11 92       	st	Z+, r1
    1596:	cb 01       	movw	r24, r22
    1598:	00 c0       	rjmp	.+0      	; 0x159a <strrev>

0000159a <strrev>:
    159a:	dc 01       	movw	r26, r24
    159c:	fc 01       	movw	r30, r24
    159e:	67 2f       	mov	r22, r23
    15a0:	71 91       	ld	r23, Z+
    15a2:	77 23       	and	r23, r23
    15a4:	e1 f7       	brne	.-8      	; 0x159e <strrev+0x4>
    15a6:	32 97       	sbiw	r30, 0x02	; 2
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <strrev+0x18>
    15aa:	7c 91       	ld	r23, X
    15ac:	6d 93       	st	X+, r22
    15ae:	70 83       	st	Z, r23
    15b0:	62 91       	ld	r22, -Z
    15b2:	ae 17       	cp	r26, r30
    15b4:	bf 07       	cpc	r27, r31
    15b6:	c8 f3       	brcs	.-14     	; 0x15aa <strrev+0x10>
    15b8:	08 95       	ret

000015ba <_exit>:
    15ba:	f8 94       	cli

000015bc <__stop_program>:
    15bc:	ff cf       	rjmp	.-2      	; 0x15bc <__stop_program>
